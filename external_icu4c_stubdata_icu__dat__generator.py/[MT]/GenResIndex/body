def GenResIndex(input_file):
    res_index = 'res_index.txt'
    brkitrs = set()
    colls = set()
    currs = set()
    langs = set()
    locales = set()
    regions = set()
    zones = set()
    for line in open(input_file, 'r'):
        if (('root.' in line) or ('res_index' in line) or ('_.res' in line)):
            continue
        if ('brkitr/' in line):
            AddResFile(brkitrs, line)
        elif ('coll/' in line):
            AddResFile(colls, line)
        elif ('curr/' in line):
            AddResFile(currs, line)
        elif ('lang/' in line):
            AddResFile(langs, line)
        elif ('region/' in line):
            AddResFile(regions, line)
        elif ('zone/' in line):
            AddResFile(zones, line)
        elif ('.res' in line):
            end = line.find('.res')
            if ((end <= 3) or ((line.find('_') <= 3) and (line.find('_') > 0))):
                locales.add(line[:end])
    kind_to_locales = {'brkitr': brkitrs, 'coll': colls, 'curr': currs, 'lang': langs, 'locales': locales, 'region': regions, 'zone': zones, }
    every_locale = set()
    for locales in kind_to_locales.itervalues():
        every_locale = every_locale.union(locales)
    if VERBOSE:
        for (kind, locales) in kind_to_locales.items():
            print ('%s=%s' % (kind, sorted(locales)))
    every_language = set()
    for locale in every_locale:
        language = re.sub('(_.*)', '', locale)
        if ((language != 'pool') and (language != 'supplementalData')):
            every_language.add(language)
    input_basename = os.path.basename(input_file)
    print ('%s includes %s.' % (input_basename, ', '.join(sorted(every_language))))
    missing_files = []
    for locale in every_locale:
        for (kind, locales) in kind_to_locales.items():
            p = os.path.join(ICU4C_DIR, 'data', kind, (locale + '.txt'))
            if ((not (locale in locales)) and os.path.exists(p)):
                missing_files.append(p)
    for missing_file in sorted(missing_files):
        relative_path = '/'.join(missing_file.split('/')[(-2):])
        print ('warning: missing data for supported locale: %s' % relative_path)
    WriteIndex(os.path.join(TMP_DAT_PATH, res_index), locales, CLDR_VERSION)
    for (kind, locales) in kind_to_locales.items():
        if (kind == 'locales'):
            continue
        WriteIndex(os.path.join(TMP_DAT_PATH, kind, res_index), locales)
    InvokeIcuTool('genrb', TMP_DAT_PATH, [res_index])
    for (kind, locales) in kind_to_locales.items():
        if (kind == 'locales'):
            continue
        InvokeIcuTool('genrb', os.path.join(TMP_DAT_PATH, kind), [res_index])

{
  AlgorithmParameterSpec paramSpec=new IvParameterSpec(iv);
  String alg;
  String blockMode="CBC";
  String padding="PKCS5Padding";
  Key sKey;
  if (dekAlgName.endsWith("-CFB")) {
    blockMode="CFB";
    padding="NoPadding";
  }
  if (dekAlgName.endsWith("-ECB") || "DES-EDE".equals(dekAlgName) || "DES-EDE3".equals(dekAlgName)) {
    blockMode="ECB";
    paramSpec=null;
  }
  if (dekAlgName.endsWith("-OFB")) {
    blockMode="OFB";
    padding="NoPadding";
  }
  if (dekAlgName.startsWith("DES-EDE")) {
    alg="DESede";
    boolean des2=!dekAlgName.startsWith("DES-EDE3");
    sKey=getKey(password,alg,24,iv,des2);
  }
 else   if (dekAlgName.startsWith("DES-")) {
    alg="DES";
    sKey=getKey(password,alg,8,iv);
  }
 else   if (dekAlgName.startsWith("BF-")) {
    alg="Blowfish";
    sKey=getKey(password,alg,16,iv);
  }
 else   if (dekAlgName.startsWith("RC2-")) {
    alg="RC2";
    int keyBits=128;
    if (dekAlgName.startsWith("RC2-40-")) {
      keyBits=40;
    }
 else     if (dekAlgName.startsWith("RC2-64-")) {
      keyBits=64;
    }
    sKey=getKey(password,alg,keyBits / 8,iv);
    if (paramSpec == null) {
      paramSpec=new RC2ParameterSpec(keyBits);
    }
 else {
      paramSpec=new RC2ParameterSpec(keyBits,iv);
    }
  }
 else   if (dekAlgName.startsWith("AES-")) {
    alg="AES";
    byte[] salt=iv;
    if (salt.length > 8) {
      salt=new byte[8];
      System.arraycopy(iv,0,salt,0,8);
    }
    int keyBits;
    if (dekAlgName.startsWith("AES-128-")) {
      keyBits=128;
    }
 else     if (dekAlgName.startsWith("AES-192-")) {
      keyBits=192;
    }
 else     if (dekAlgName.startsWith("AES-256-")) {
      keyBits=256;
    }
 else {
      throw new EncryptionException("unknown AES encryption with private key");
    }
    sKey=getKey(password,"AES",keyBits / 8,salt);
  }
 else {
    throw new EncryptionException("unknown encryption with private key");
  }
  String transformation=alg + "/" + blockMode+ "/"+ padding;
  try {
    Cipher c=Cipher.getInstance(transformation,provider);
    int mode=encrypt ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE;
    if (paramSpec == null) {
      c.init(mode,sKey);
    }
 else {
      c.init(mode,sKey,paramSpec);
    }
    return c.doFinal(bytes);
  }
 catch (  Exception e) {
    throw new EncryptionException("exception using cipher - please check password and data.",e);
  }
}

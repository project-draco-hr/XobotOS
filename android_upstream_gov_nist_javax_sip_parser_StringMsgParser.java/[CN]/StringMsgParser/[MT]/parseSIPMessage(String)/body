{
  if (msgString == null || msgString.length() == 0)   return null;
  rawStringMessage=msgString;
  int i=0;
  try {
    while (msgString.charAt(i) < 0x20)     i++;
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    return null;
  }
catch (  StringIndexOutOfBoundsException ex) {
    return null;
  }
  String currentLine=null;
  String currentHeader=null;
  boolean isFirstLine=true;
  SIPMessage message=null;
  do {
    int lineStart=i;
    try {
      char c=msgString.charAt(i);
      while (c != '\r' && c != '\n')       c=msgString.charAt(++i);
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      break;
    }
catch (    StringIndexOutOfBoundsException ex) {
      break;
    }
    currentLine=msgString.substring(lineStart,i);
    currentLine=trimEndOfLine(currentLine);
    if (currentLine.length() == 0) {
      if (currentHeader != null) {
        processHeader(currentHeader,message);
      }
    }
 else {
      if (isFirstLine) {
        message=processFirstLine(currentLine);
      }
 else {
        char firstChar=currentLine.charAt(0);
        if (firstChar == '\t' || firstChar == ' ') {
          if (currentHeader == null)           throw new ParseException("Bad header continuation.",0);
          currentHeader+=currentLine.substring(1);
        }
 else {
          if (currentHeader != null) {
            processHeader(currentHeader,message);
          }
          currentHeader=currentLine;
        }
      }
    }
    if (msgString.charAt(i) == '\r' && msgString.length() > i + 1 && msgString.charAt(i + 1) == '\n')     i++;
    i++;
    isFirstLine=false;
  }
 while (currentLine.length() > 0);
  message.setSize(i);
  if (readBody && message.getContentLength() != null) {
    if (message.getContentLength().getContentLength() != 0) {
      String body=msgString.substring(i);
      message.setMessageContent(body,this.strict,computeContentLengthFromMessage,message.getContentLength().getContentLength());
    }
 else     if (!computeContentLengthFromMessage && message.getContentLength().getContentLength() == 0 && !msgString.endsWith("\r\n\r\n")) {
      if (strict) {
        throw new ParseException("Extraneous characters at the end of the message ",i);
      }
    }
  }
  return message;
}

{
  if (peerPort == -1) {
    if (sipStack.isLoggingEnabled()) {
      this.sipStack.getStackLogger().logDebug(getClass().getName() + ":sendMessage: Dropping reply!");
    }
    throw new IOException("Receiver port not set ");
  }
 else {
    if (sipStack.isLoggingEnabled()) {
      this.sipStack.getStackLogger().logDebug(":sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ " messageSize = "+ msg.length);
    }
  }
  if (peerProtocol.compareToIgnoreCase("UDP") == 0) {
    DatagramPacket reply=new DatagramPacket(msg,msg.length,peerAddress,peerPort);
    try {
      DatagramSocket sock;
      if (sipStack.udpFlag) {
        sock=((UDPMessageProcessor)messageProcessor).sock;
      }
 else {
        sock=sipStack.getNetworkLayer().createDatagramSocket();
      }
      if (sipStack.isLoggingEnabled()) {
        this.sipStack.getStackLogger().logDebug("sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ new String(msg));
      }
      sock.send(reply);
      if (!sipStack.udpFlag)       sock.close();
    }
 catch (    IOException ex) {
      throw ex;
    }
catch (    Exception ex) {
      InternalErrorHandler.handleException(ex);
    }
  }
 else {
    Socket outputSocket=sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),peerAddress,peerPort,"tcp",msg,retry,this);
    OutputStream myOutputStream=outputSocket.getOutputStream();
    myOutputStream.write(msg,0,msg.length);
    myOutputStream.flush();
  }
}

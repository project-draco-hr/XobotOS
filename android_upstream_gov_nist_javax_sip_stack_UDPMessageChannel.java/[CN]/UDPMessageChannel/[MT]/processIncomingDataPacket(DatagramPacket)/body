{
  this.peerAddress=packet.getAddress();
  int packetLength=packet.getLength();
  byte[] bytes=packet.getData();
  byte[] msgBytes=new byte[packetLength];
  System.arraycopy(bytes,0,msgBytes,0,packetLength);
  if (sipStack.isLoggingEnabled()) {
    this.sipStack.getStackLogger().logDebug("UDPMessageChannel: processIncomingDataPacket : peerAddress = " + peerAddress.getHostAddress() + "/"+ packet.getPort()+ " Length = "+ packetLength);
  }
  SIPMessage sipMessage=null;
  try {
    this.receptionTime=System.currentTimeMillis();
    sipMessage=myParser.parseSIPMessage(msgBytes);
    myParser=null;
  }
 catch (  ParseException ex) {
    myParser=null;
    if (sipStack.isLoggingEnabled()) {
      this.sipStack.getStackLogger().logDebug("Rejecting message !  " + new String(msgBytes));
      this.sipStack.getStackLogger().logDebug("error message " + ex.getMessage());
      this.sipStack.getStackLogger().logException(ex);
    }
    String msgString=new String(msgBytes,0,packetLength);
    if (!msgString.startsWith("SIP/") && !msgString.startsWith("ACK ")) {
      String badReqRes=createBadReqRes(msgString,ex);
      if (badReqRes != null) {
        if (sipStack.isLoggingEnabled()) {
          sipStack.getStackLogger().logDebug("Sending automatic 400 Bad Request:");
          sipStack.getStackLogger().logDebug(badReqRes);
        }
        try {
          this.sendMessage(badReqRes.getBytes(),peerAddress,packet.getPort(),"UDP",false);
        }
 catch (        IOException e) {
          this.sipStack.getStackLogger().logException(e);
        }
      }
 else {
        if (sipStack.isLoggingEnabled()) {
          sipStack.getStackLogger().logDebug("Could not formulate automatic 400 Bad Request");
        }
      }
    }
    return;
  }
  if (sipMessage == null) {
    if (sipStack.isLoggingEnabled()) {
      this.sipStack.getStackLogger().logDebug("Rejecting message !  + Null message parsed.");
    }
    if (pingBackRecord.get(packet.getAddress().getHostAddress() + ":" + packet.getPort()) == null) {
      byte[] retval="\r\n\r\n".getBytes();
      DatagramPacket keepalive=new DatagramPacket(retval,0,retval.length,packet.getAddress(),packet.getPort());
      ((UDPMessageProcessor)this.messageProcessor).sock.send(keepalive);
      this.sipStack.getTimer().schedule(new PingBackTimerTask(packet.getAddress().getHostAddress(),packet.getPort()),1000);
    }
    return;
  }
  ViaList viaList=sipMessage.getViaHeaders();
  if (sipMessage.getFrom() == null || sipMessage.getTo() == null || sipMessage.getCallId() == null || sipMessage.getCSeq() == null || sipMessage.getViaHeaders() == null) {
    String badmsg=new String(msgBytes);
    if (sipStack.isLoggingEnabled()) {
      this.sipStack.getStackLogger().logError("bad message " + badmsg);
      this.sipStack.getStackLogger().logError(">>> Dropped Bad Msg " + "From = " + sipMessage.getFrom() + "To = "+ sipMessage.getTo()+ "CallId = "+ sipMessage.getCallId()+ "CSeq = "+ sipMessage.getCSeq()+ "Via = "+ sipMessage.getViaHeaders());
    }
    return;
  }
  if (sipMessage instanceof SIPRequest) {
    Via v=(Via)viaList.getFirst();
    Hop hop=sipStack.addressResolver.resolveAddress(v.getHop());
    this.peerPort=hop.getPort();
    this.peerProtocol=v.getTransport();
    this.peerPacketSourceAddress=packet.getAddress();
    this.peerPacketSourcePort=packet.getPort();
    try {
      this.peerAddress=packet.getAddress();
      boolean hasRPort=v.hasParameter(Via.RPORT);
      if (hasRPort || !hop.getHost().equals(this.peerAddress.getHostAddress())) {
        v.setParameter(Via.RECEIVED,this.peerAddress.getHostAddress());
      }
      if (hasRPort) {
        v.setParameter(Via.RPORT,Integer.toString(this.peerPacketSourcePort));
      }
    }
 catch (    java.text.ParseException ex1) {
      InternalErrorHandler.handleException(ex1);
    }
  }
 else {
    this.peerPacketSourceAddress=packet.getAddress();
    this.peerPacketSourcePort=packet.getPort();
    this.peerAddress=packet.getAddress();
    this.peerPort=packet.getPort();
    this.peerProtocol=((Via)viaList.getFirst()).getTransport();
  }
  this.processMessage(sipMessage);
}

{
  if (sipStack.isLoggingEnabled() && this.sipStack.isLogStackTraceOnMessageSend()) {
    this.sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);
  }
  if (peerPort == -1) {
    if (sipStack.isLoggingEnabled()) {
      this.sipStack.getStackLogger().logDebug(getClass().getName() + ":sendMessage: Dropping reply!");
    }
    throw new IOException("Receiver port not set ");
  }
 else {
    if (sipStack.isLoggingEnabled()) {
      this.sipStack.getStackLogger().logDebug("sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ "messageSize =  "+ msg.length+ " message = "+ new String(msg));
      this.sipStack.getStackLogger().logDebug("*******************\n");
    }
  }
  DatagramPacket reply=new DatagramPacket(msg,msg.length,peerAddress,peerPort);
  try {
    DatagramSocket sock;
    boolean created=false;
    if (sipStack.udpFlag) {
      sock=((UDPMessageProcessor)messageProcessor).sock;
    }
 else {
      sock=new DatagramSocket();
      created=true;
    }
    sock.send(reply);
    if (created)     sock.close();
  }
 catch (  IOException ex) {
    throw ex;
  }
catch (  Exception ex) {
    InternalErrorHandler.handleException(ex);
  }
}

{
  AcceptLanguageList acceptLanguageList=new AcceptLanguageList();
  if (debug)   dbg_enter("AcceptLanguageParser.parse");
  try {
    headerName(TokenTypes.ACCEPT_LANGUAGE);
    while (lexer.lookAhead(0) != '\n') {
      AcceptLanguage acceptLanguage=new AcceptLanguage();
      acceptLanguage.setHeaderName(SIPHeaderNames.ACCEPT_LANGUAGE);
      if (lexer.lookAhead(0) != ';') {
        lexer.match(TokenTypes.ID);
        Token value=lexer.getNextToken();
        acceptLanguage.setLanguageRange(value.getTokenValue());
      }
      while (lexer.lookAhead(0) == ';') {
        this.lexer.match(';');
        this.lexer.SPorHT();
        this.lexer.match('q');
        this.lexer.SPorHT();
        this.lexer.match('=');
        this.lexer.SPorHT();
        lexer.match(TokenTypes.ID);
        Token value=lexer.getNextToken();
        try {
          float fl=Float.parseFloat(value.getTokenValue());
          acceptLanguage.setQValue(fl);
        }
 catch (        NumberFormatException ex) {
          throw createParseException(ex.getMessage());
        }
catch (        InvalidArgumentException ex) {
          throw createParseException(ex.getMessage());
        }
        this.lexer.SPorHT();
      }
      acceptLanguageList.add(acceptLanguage);
      if (lexer.lookAhead(0) == ',') {
        this.lexer.match(',');
        this.lexer.SPorHT();
      }
 else       this.lexer.SPorHT();
    }
  }
  finally {
    if (debug)     dbg_leave("AcceptLanguageParser.parse");
  }
  return acceptLanguageList;
}

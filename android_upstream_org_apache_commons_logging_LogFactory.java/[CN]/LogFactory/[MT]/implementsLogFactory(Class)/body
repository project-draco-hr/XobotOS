{
  boolean implementsLogFactory=false;
  if (logFactoryClass != null) {
    try {
      ClassLoader logFactoryClassLoader=logFactoryClass.getClassLoader();
      if (logFactoryClassLoader == null) {
        logDiagnostic("[CUSTOM LOG FACTORY] was loaded by the boot classloader");
      }
 else {
        logHierarchy("[CUSTOM LOG FACTORY] ",logFactoryClassLoader);
        Class factoryFromCustomLoader=Class.forName("org.apache.commons.logging.LogFactory",false,logFactoryClassLoader);
        implementsLogFactory=factoryFromCustomLoader.isAssignableFrom(logFactoryClass);
        if (implementsLogFactory) {
          logDiagnostic("[CUSTOM LOG FACTORY] " + logFactoryClass.getName() + " implements LogFactory but was loaded by an incompatible classloader.");
        }
 else {
          logDiagnostic("[CUSTOM LOG FACTORY] " + logFactoryClass.getName() + " does not implement LogFactory.");
        }
      }
    }
 catch (    SecurityException e) {
      logDiagnostic("[CUSTOM LOG FACTORY] SecurityException thrown whilst trying to determine whether " + "the compatibility was caused by a classloader conflict: " + e.getMessage());
    }
catch (    LinkageError e) {
      logDiagnostic("[CUSTOM LOG FACTORY] LinkageError thrown whilst trying to determine whether " + "the compatibility was caused by a classloader conflict: " + e.getMessage());
    }
catch (    ClassNotFoundException e) {
      logDiagnostic("[CUSTOM LOG FACTORY] LogFactory class cannot be loaded by classloader which loaded the " + "custom LogFactory implementation. Is the custom factory in the right classloader?");
    }
  }
  return implementsLogFactory;
}

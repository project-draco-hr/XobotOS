{
  if (!curve.isKoblitz()) {
    throw new IllegalArgumentException("si is defined for Koblitz curves only");
  }
  int m=curve.getM();
  int a=curve.getA().toBigInteger().intValue();
  byte mu=curve.getMu();
  int h=curve.getH().intValue();
  int index=m + 3 - a;
  BigInteger[] ui=getLucas(mu,index,false);
  BigInteger dividend0;
  BigInteger dividend1;
  if (mu == 1) {
    dividend0=ECConstants.ONE.subtract(ui[1]);
    dividend1=ECConstants.ONE.subtract(ui[0]);
  }
 else   if (mu == -1) {
    dividend0=ECConstants.ONE.add(ui[1]);
    dividend1=ECConstants.ONE.add(ui[0]);
  }
 else {
    throw new IllegalArgumentException("mu must be 1 or -1");
  }
  BigInteger[] si=new BigInteger[2];
  if (h == 2) {
    si[0]=dividend0.shiftRight(1);
    si[1]=dividend1.shiftRight(1).negate();
  }
 else   if (h == 4) {
    si[0]=dividend0.shiftRight(2);
    si[1]=dividend1.shiftRight(2).negate();
  }
 else {
    throw new IllegalArgumentException("h (Cofactor) must be 2 or 4");
  }
  return si;
}

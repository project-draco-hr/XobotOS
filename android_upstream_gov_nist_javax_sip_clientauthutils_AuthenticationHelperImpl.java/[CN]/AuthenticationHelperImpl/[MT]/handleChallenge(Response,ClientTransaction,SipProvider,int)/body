{
  try {
    if (sipStack.isLoggingEnabled()) {
      sipStack.getStackLogger().logDebug("handleChallenge: " + challenge);
    }
    SIPRequest challengedRequest=((SIPRequest)challengedTransaction.getRequest());
    Request reoriginatedRequest=null;
    if (challengedRequest.getToTag() != null || challengedTransaction.getDialog() == null || challengedTransaction.getDialog().getState() != DialogState.CONFIRMED) {
      reoriginatedRequest=(Request)challengedRequest.clone();
    }
 else {
      reoriginatedRequest=challengedTransaction.getDialog().createRequest(challengedRequest.getMethod());
      Iterator<String> headerNames=challengedRequest.getHeaderNames();
      while (headerNames.hasNext()) {
        String headerName=headerNames.next();
        if (reoriginatedRequest.getHeader(headerName) != null) {
          ListIterator<Header> iterator=reoriginatedRequest.getHeaders(headerName);
          while (iterator.hasNext()) {
            reoriginatedRequest.addHeader(iterator.next());
          }
        }
      }
    }
    removeBranchID(reoriginatedRequest);
    if (challenge == null || reoriginatedRequest == null) {
      throw new NullPointerException("A null argument was passed to handle challenge.");
    }
    ListIterator authHeaders=null;
    if (challenge.getStatusCode() == Response.UNAUTHORIZED) {
      authHeaders=challenge.getHeaders(WWWAuthenticateHeader.NAME);
    }
 else     if (challenge.getStatusCode() == Response.PROXY_AUTHENTICATION_REQUIRED) {
      authHeaders=challenge.getHeaders(ProxyAuthenticateHeader.NAME);
    }
 else {
      throw new IllegalArgumentException("Unexpected status code ");
    }
    if (authHeaders == null) {
      throw new IllegalArgumentException("Could not find WWWAuthenticate or ProxyAuthenticate headers");
    }
    reoriginatedRequest.removeHeader(AuthorizationHeader.NAME);
    reoriginatedRequest.removeHeader(ProxyAuthorizationHeader.NAME);
    CSeqHeader cSeq=(CSeqHeader)reoriginatedRequest.getHeader((CSeqHeader.NAME));
    try {
      cSeq.setSeqNumber(cSeq.getSeqNumber() + 1l);
    }
 catch (    InvalidArgumentException ex) {
      throw new SipException("Invalid CSeq -- could not increment : " + cSeq.getSeqNumber());
    }
    if (challengedRequest.getRouteHeaders() == null) {
      Hop hop=((SIPClientTransaction)challengedTransaction).getNextHop();
      SipURI sipUri=(SipURI)reoriginatedRequest.getRequestURI();
      if (!hop.getHost().equalsIgnoreCase(sipUri.getHost()) && !hop.equals(sipStack.getRouter(challengedRequest).getOutboundProxy()))       sipUri.setMAddrParam(hop.getHost());
      if (hop.getPort() != -1)       sipUri.setPort(hop.getPort());
    }
    ClientTransaction retryTran=transactionCreator.getNewClientTransaction(reoriginatedRequest);
    WWWAuthenticateHeader authHeader=null;
    SipURI requestUri=(SipURI)challengedTransaction.getRequest().getRequestURI();
    while (authHeaders.hasNext()) {
      authHeader=(WWWAuthenticateHeader)authHeaders.next();
      String realm=authHeader.getRealm();
      AuthorizationHeader authorization=null;
      String sipDomain;
      if (this.accountManager instanceof SecureAccountManager) {
        UserCredentialHash credHash=((SecureAccountManager)this.accountManager).getCredentialHash(challengedTransaction,realm);
        URI uri=reoriginatedRequest.getRequestURI();
        sipDomain=credHash.getSipDomain();
        authorization=this.getAuthorization(reoriginatedRequest.getMethod(),uri.toString(),(reoriginatedRequest.getContent() == null) ? "" : new String(reoriginatedRequest.getRawContent()),authHeader,credHash);
      }
 else {
        UserCredentials userCreds=((AccountManager)this.accountManager).getCredentials(challengedTransaction,realm);
        sipDomain=userCreds.getSipDomain();
        if (userCreds == null)         throw new SipException("Cannot find user creds for the given user name and realm");
        authorization=this.getAuthorization(reoriginatedRequest.getMethod(),reoriginatedRequest.getRequestURI().toString(),(reoriginatedRequest.getContent() == null) ? "" : new String(reoriginatedRequest.getRawContent()),authHeader,userCreds);
      }
      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Created authorization header: " + authorization.toString());
      if (cacheTime != 0)       cachedCredentials.cacheAuthorizationHeader(sipDomain,authorization,cacheTime);
      reoriginatedRequest.addHeader(authorization);
    }
    if (sipStack.isLoggingEnabled()) {
      sipStack.getStackLogger().logDebug("Returning authorization transaction." + retryTran);
    }
    return retryTran;
  }
 catch (  SipException ex) {
    throw ex;
  }
catch (  Exception ex) {
    sipStack.getStackLogger().logError("Unexpected exception ",ex);
    throw new SipException("Unexpected exception ",ex);
  }
}

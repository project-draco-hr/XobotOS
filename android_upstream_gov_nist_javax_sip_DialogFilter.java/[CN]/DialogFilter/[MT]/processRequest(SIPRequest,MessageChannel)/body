{
  if (sipStack.isLoggingEnabled())   sipStack.getStackLogger().logDebug("PROCESSING INCOMING REQUEST " + sipRequest + " transactionChannel = "+ transactionChannel+ " listening point = "+ listeningPoint.getIPAddress()+ ":"+ listeningPoint.getPort());
  if (listeningPoint == null) {
    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Dropping message: No listening point registered!");
    return;
  }
  SipStackImpl sipStack=(SipStackImpl)transactionChannel.getSIPStack();
  SipProviderImpl sipProvider=listeningPoint.getProvider();
  if (sipProvider == null) {
    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("No provider - dropping !!");
    return;
  }
  if (sipStack == null)   InternalErrorHandler.handleException("Egads! no sip stack!");
  SIPServerTransaction transaction=(SIPServerTransaction)this.transactionChannel;
  if (transaction != null) {
    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("transaction state = " + transaction.getState());
  }
  String dialogId=sipRequest.getDialogId(true);
  SIPDialog dialog=sipStack.getDialog(dialogId);
  if (dialog != null && sipProvider != dialog.getSipProvider()) {
    Contact contact=dialog.getMyContactHeader();
    if (contact != null) {
      SipUri contactUri=(SipUri)(contact.getAddress().getURI());
      String ipAddress=contactUri.getHost();
      int contactPort=contactUri.getPort();
      String contactTransport=contactUri.getTransportParam();
      if (contactTransport == null)       contactTransport="udp";
      if (contactPort == -1) {
        if (contactTransport.equals("udp") || contactTransport.equals("tcp"))         contactPort=5060;
 else         contactPort=5061;
      }
      if (ipAddress != null && (!ipAddress.equals(listeningPoint.getIPAddress()) || contactPort != listeningPoint.getPort())) {
        if (sipStack.isLoggingEnabled()) {
          sipStack.getStackLogger().logDebug("nulling dialog -- listening point mismatch!  " + contactPort + "  lp port = "+ listeningPoint.getPort());
        }
        dialog=null;
      }
    }
  }
  if (sipProvider.isAutomaticDialogSupportEnabled() && sipProvider.isDialogErrorsAutomaticallyHandled() && sipRequest.getToTag() == null) {
    SIPServerTransaction sipServerTransaction=sipStack.findMergedTransaction(sipRequest);
    if (sipServerTransaction != null) {
      this.sendLoopDetectedResponse(sipRequest,transaction);
      return;
    }
  }
  if (sipStack.isLoggingEnabled()) {
    sipStack.getStackLogger().logDebug("dialogId = " + dialogId);
    sipStack.getStackLogger().logDebug("dialog = " + dialog);
  }
  if (sipRequest.getHeader(Route.NAME) != null && transaction.getDialog() != null) {
    RouteList routes=sipRequest.getRouteHeaders();
    Route route=(Route)routes.getFirst();
    SipUri uri=(SipUri)route.getAddress().getURI();
    int port;
    if (uri.getHostPort().hasPort()) {
      port=uri.getHostPort().getPort();
    }
 else {
      if (listeningPoint.getTransport().equalsIgnoreCase("TLS"))       port=5061;
 else       port=5060;
    }
    String host=uri.getHost();
    if ((host.equals(listeningPoint.getIPAddress()) || host.equalsIgnoreCase(listeningPoint.getSentBy())) && port == listeningPoint.getPort()) {
      if (routes.size() == 1)       sipRequest.removeHeader(Route.NAME);
 else       routes.removeFirst();
    }
  }
  if (sipRequest.getMethod().equals(Request.REFER) && dialog != null && sipProvider.isDialogErrorsAutomaticallyHandled()) {
    ReferToHeader sipHeader=(ReferToHeader)sipRequest.getHeader(ReferTo.NAME);
    if (sipHeader == null) {
      this.sendBadRequestResponse(sipRequest,transaction,"Refer-To header is missing");
      return;
    }
    SIPTransaction lastTransaction=((SIPDialog)dialog).getLastTransaction();
    if (lastTransaction != null && sipProvider.isDialogErrorsAutomaticallyHandled()) {
      SIPRequest lastRequest=(SIPRequest)lastTransaction.getRequest();
      if (lastTransaction instanceof SIPServerTransaction) {
        if (!((SIPDialog)dialog).isAckSeen() && lastRequest.getMethod().equals(Request.INVITE)) {
          this.sendRequestPendingResponse(sipRequest,transaction);
          return;
        }
      }
 else       if (lastTransaction instanceof SIPClientTransaction) {
        long cseqno=lastRequest.getCSeqHeader().getSeqNumber();
        String method=lastRequest.getMethod();
        if (method.equals(Request.INVITE) && !dialog.isAckSent(cseqno)) {
          this.sendRequestPendingResponse(sipRequest,transaction);
          return;
        }
      }
    }
  }
 else   if (sipRequest.getMethod().equals(Request.UPDATE)) {
    if (sipProvider.isAutomaticDialogSupportEnabled() && dialog == null) {
      this.sendCallOrTransactionDoesNotExistResponse(sipRequest,transaction);
      return;
    }
  }
 else   if (sipRequest.getMethod().equals(Request.ACK)) {
    if (transaction != null && transaction.isInviteTransaction()) {
      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing ACK for INVITE Tx ");
    }
 else {
      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing ACK for dialog " + dialog);
      if (dialog == null) {
        if (sipStack.isLoggingEnabled()) {
          sipStack.getStackLogger().logDebug("Dialog does not exist " + sipRequest.getFirstLine() + " isServerTransaction = "+ true);
        }
        SIPServerTransaction st=sipStack.getRetransmissionAlertTransaction(dialogId);
        if (st != null && st.isRetransmissionAlertEnabled()) {
          st.disableRetransmissionAlerts();
        }
        SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);
        if (ackTransaction != null) {
          if (sipStack.isLoggingEnabled())           sipStack.getStackLogger().logDebug("Found Tx pending ACK");
          try {
            ackTransaction.setAckSeen();
            sipStack.removeTransaction(ackTransaction);
            sipStack.removeTransactionPendingAck(ackTransaction);
          }
 catch (          Exception ex) {
            if (sipStack.isLoggingEnabled()) {
              sipStack.getStackLogger().logError("Problem terminating transaction",ex);
            }
          }
          return;
        }
      }
 else {
        if (!dialog.handleAck(transaction)) {
          if (!dialog.isSequnceNumberValidation()) {
            if (sipStack.isLoggingEnabled()) {
              sipStack.getStackLogger().logDebug("Dialog exists with loose dialog validation " + sipRequest.getFirstLine() + " isServerTransaction = "+ true+ " dialog = "+ dialog.getDialogId());
            }
            SIPServerTransaction st=sipStack.getRetransmissionAlertTransaction(dialogId);
            if (st != null && st.isRetransmissionAlertEnabled()) {
              st.disableRetransmissionAlerts();
            }
          }
 else {
            if (sipStack.isLoggingEnabled()) {
              sipStack.getStackLogger().logDebug("Dropping ACK - cannot find a transaction or dialog");
            }
            SIPServerTransaction ackTransaction=sipStack.findTransactionPendingAck(sipRequest);
            if (ackTransaction != null) {
              if (sipStack.isLoggingEnabled())               sipStack.getStackLogger().logDebug("Found Tx pending ACK");
              try {
                ackTransaction.setAckSeen();
                sipStack.removeTransaction(ackTransaction);
                sipStack.removeTransactionPendingAck(ackTransaction);
              }
 catch (              Exception ex) {
                if (sipStack.isLoggingEnabled()) {
                  sipStack.getStackLogger().logError("Problem terminating transaction",ex);
                }
              }
            }
            return;
          }
        }
 else {
          transaction.passToListener();
          dialog.addTransaction(transaction);
          dialog.addRoute(sipRequest);
          transaction.setDialog(dialog,dialogId);
          if (sipRequest.getMethod().equals(Request.INVITE) && sipProvider.isDialogErrorsAutomaticallyHandled()) {
            sipStack.putInMergeTable(transaction,sipRequest);
          }
          if (sipStack.deliverTerminatedEventForAck) {
            try {
              sipStack.addTransaction(transaction);
              transaction.scheduleAckRemoval();
            }
 catch (            IOException ex) {
            }
          }
 else {
            transaction.setMapped(true);
          }
        }
      }
    }
  }
 else   if (sipRequest.getMethod().equals(Request.PRACK)) {
    if (sipStack.isLoggingEnabled())     sipStack.getStackLogger().logDebug("Processing PRACK for dialog " + dialog);
    if (dialog == null && sipProvider.isAutomaticDialogSupportEnabled()) {
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug("Dialog does not exist " + sipRequest.getFirstLine() + " isServerTransaction = "+ true);
      }
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug("Sending 481 for PRACK - automatic dialog support is enabled -- cant find dialog!");
      }
      SIPResponse notExist=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);
      try {
        sipProvider.sendResponse(notExist);
      }
 catch (      SipException e) {
        sipStack.getStackLogger().logError("error sending response",e);
      }
      if (transaction != null) {
        sipStack.removeTransaction(transaction);
        transaction.releaseSem();
      }
      return;
    }
 else     if (dialog != null) {
      if (!dialog.handlePrack(sipRequest)) {
        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logDebug("Dropping out of sequence PRACK ");
        if (transaction != null) {
          sipStack.removeTransaction(transaction);
          transaction.releaseSem();
        }
        return;
      }
 else {
        try {
          sipStack.addTransaction(transaction);
          dialog.addTransaction(transaction);
          dialog.addRoute(sipRequest);
          transaction.setDialog(dialog,dialogId);
        }
 catch (        Exception ex) {
          InternalErrorHandler.handleException(ex);
        }
      }
    }
 else {
      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Processing PRACK without a DIALOG -- this must be a proxy element");
    }
  }
 else   if (sipRequest.getMethod().equals(Request.BYE)) {
    if (dialog != null && !dialog.isRequestConsumable(sipRequest)) {
      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Dropping out of sequence BYE " + dialog.getRemoteSeqNumber() + " "+ sipRequest.getCSeq().getSeqNumber());
      if (dialog.getRemoteSeqNumber() >= sipRequest.getCSeq().getSeqNumber() && transaction.getState() == TransactionState.TRYING) {
        this.sendServerInternalErrorResponse(sipRequest,transaction);
      }
      if (transaction != null)       sipStack.removeTransaction(transaction);
      return;
    }
 else     if (dialog == null && sipProvider.isAutomaticDialogSupportEnabled()) {
      SIPResponse response=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);
      response.setReasonPhrase("Dialog Not Found");
      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("dropping request -- automatic dialog " + "support enabled and dialog does not exist!");
      try {
        transaction.sendResponse(response);
      }
 catch (      SipException ex) {
        sipStack.getStackLogger().logError("Error in sending response",ex);
      }
      if (transaction != null) {
        sipStack.removeTransaction(transaction);
        transaction.releaseSem();
        transaction=null;
      }
      return;
    }
    if (transaction != null && dialog != null) {
      try {
        if (sipProvider == dialog.getSipProvider()) {
          sipStack.addTransaction(transaction);
          dialog.addTransaction(transaction);
          transaction.setDialog(dialog,dialogId);
        }
      }
 catch (      IOException ex) {
        InternalErrorHandler.handleException(ex);
      }
    }
    if (sipStack.isLoggingEnabled()) {
      sipStack.getStackLogger().logDebug("BYE Tx = " + transaction + " isMapped ="+ transaction.isTransactionMapped());
    }
  }
 else   if (sipRequest.getMethod().equals(Request.CANCEL)) {
    SIPServerTransaction st=(SIPServerTransaction)sipStack.findCancelTransaction(sipRequest,true);
    if (sipStack.isLoggingEnabled()) {
      sipStack.getStackLogger().logDebug("Got a CANCEL, InviteServerTx = " + st + " cancel Server Tx ID = "+ transaction+ " isMapped = "+ transaction.isTransactionMapped());
    }
    if (sipRequest.getMethod().equals(Request.CANCEL)) {
      if (st != null && st.getState() == SIPTransaction.TERMINATED_STATE) {
        if (sipStack.isLoggingEnabled())         sipStack.getStackLogger().logDebug("Too late to cancel Transaction");
        try {
          transaction.sendResponse(sipRequest.createResponse(Response.OK));
        }
 catch (        Exception ex) {
          if (ex.getCause() != null && ex.getCause() instanceof IOException) {
            st.raiseIOExceptionEvent();
          }
        }
        return;
      }
      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logDebug("Cancel transaction = " + st);
    }
    if (transaction != null && st != null && st.getDialog() != null) {
      transaction.setDialog((SIPDialog)st.getDialog(),dialogId);
      dialog=(SIPDialog)st.getDialog();
    }
 else     if (st == null && sipProvider.isAutomaticDialogSupportEnabled() && transaction != null) {
      SIPResponse response=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug("dropping request -- automatic dialog support " + "enabled and INVITE ST does not exist!");
      }
      try {
        sipProvider.sendResponse(response);
      }
 catch (      SipException ex) {
        InternalErrorHandler.handleException(ex);
      }
      if (transaction != null) {
        sipStack.removeTransaction(transaction);
        transaction.releaseSem();
      }
      return;
    }
    if (st != null) {
      try {
        if (transaction != null) {
          sipStack.addTransaction(transaction);
          transaction.setPassToListener();
          transaction.setInviteTransaction(st);
          st.acquireSem();
        }
      }
 catch (      Exception ex) {
        InternalErrorHandler.handleException(ex);
      }
    }
  }
 else   if (sipRequest.getMethod().equals(Request.INVITE)) {
    SIPTransaction lastTransaction=dialog == null ? null : dialog.getInviteTransaction();
    if (dialog != null && transaction != null && lastTransaction != null && sipRequest.getCSeq().getSeqNumber() > dialog.getRemoteSeqNumber() && lastTransaction instanceof SIPServerTransaction && sipProvider.isDialogErrorsAutomaticallyHandled() && dialog.isSequnceNumberValidation() && lastTransaction.isInviteTransaction() && lastTransaction.getState() != TransactionState.COMPLETED && lastTransaction.getState() != TransactionState.TERMINATED && lastTransaction.getState() != TransactionState.CONFIRMED) {
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug("Sending 500 response for out of sequence message");
      }
      this.sendServerInternalErrorResponse(sipRequest,transaction);
      return;
    }
    lastTransaction=(dialog == null ? null : dialog.getLastTransaction());
    if (dialog != null && sipProvider.isDialogErrorsAutomaticallyHandled() && lastTransaction != null && lastTransaction.isInviteTransaction() && lastTransaction instanceof ClientTransaction && lastTransaction.getLastResponse() != null && lastTransaction.getLastResponse().getStatusCode() == 200 && !dialog.isAckSent(lastTransaction.getLastResponse().getCSeq().getSeqNumber())) {
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug("Sending 491 response for client Dialog ACK not sent.");
      }
      this.sendRequestPendingResponse(sipRequest,transaction);
      return;
    }
    if (dialog != null && lastTransaction != null && sipProvider.isDialogErrorsAutomaticallyHandled() && lastTransaction.isInviteTransaction() && lastTransaction instanceof ServerTransaction && !dialog.isAckSeen()) {
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug("Sending 491 response for server Dialog ACK not seen.");
      }
      this.sendRequestPendingResponse(sipRequest,transaction);
      return;
    }
  }
  if (sipStack.isLoggingEnabled()) {
    sipStack.getStackLogger().logDebug("CHECK FOR OUT OF SEQ MESSAGE " + dialog + " transaction "+ transaction);
  }
  if (dialog != null && transaction != null && !sipRequest.getMethod().equals(Request.BYE) && !sipRequest.getMethod().equals(Request.CANCEL) && !sipRequest.getMethod().equals(Request.ACK) && !sipRequest.getMethod().equals(Request.PRACK)) {
    if (!dialog.isRequestConsumable(sipRequest)) {
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug("Dropping out of sequence message " + dialog.getRemoteSeqNumber() + " "+ sipRequest.getCSeq());
      }
      if (dialog.getRemoteSeqNumber() >= sipRequest.getCSeq().getSeqNumber() && sipProvider.isDialogErrorsAutomaticallyHandled() && (transaction.getState() == TransactionState.TRYING || transaction.getState() == TransactionState.PROCEEDING)) {
        this.sendServerInternalErrorResponse(sipRequest,transaction);
      }
      return;
    }
    try {
      if (sipProvider == dialog.getSipProvider()) {
        sipStack.addTransaction(transaction);
        dialog.addTransaction(transaction);
        dialog.addRoute(sipRequest);
        transaction.setDialog(dialog,dialogId);
      }
    }
 catch (    IOException ex) {
      transaction.raiseIOExceptionEvent();
      sipStack.removeTransaction(transaction);
      return;
    }
  }
  RequestEvent sipEvent;
  if (sipStack.isLoggingEnabled()) {
    sipStack.getStackLogger().logDebug(sipRequest.getMethod() + " transaction.isMapped = " + transaction.isTransactionMapped());
  }
  if (dialog == null && sipRequest.getMethod().equals(Request.NOTIFY)) {
    SIPClientTransaction pendingSubscribeClientTx=sipStack.findSubscribeTransaction(sipRequest,listeningPoint);
    if (sipStack.isLoggingEnabled()) {
      sipStack.getStackLogger().logDebug("PROCESSING NOTIFY  DIALOG == null " + pendingSubscribeClientTx);
    }
    if (sipProvider.isAutomaticDialogSupportEnabled() && pendingSubscribeClientTx == null && !sipStack.deliverUnsolicitedNotify) {
      try {
        if (sipStack.isLoggingEnabled()) {
          sipStack.getStackLogger().logDebug("Could not find Subscription for Notify Tx.");
        }
        Response errorResponse=sipRequest.createResponse(Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST);
        errorResponse.setReasonPhrase("Subscription does not exist");
        sipProvider.sendResponse(errorResponse);
        return;
      }
 catch (      Exception ex) {
        sipStack.getStackLogger().logError("Exception while sending error response statelessly",ex);
        return;
      }
    }
    if (pendingSubscribeClientTx != null) {
      transaction.setPendingSubscribe(pendingSubscribeClientTx);
      SIPDialog subscriptionDialog=(SIPDialog)pendingSubscribeClientTx.getDefaultDialog();
      if (subscriptionDialog == null || subscriptionDialog.getDialogId() == null || !subscriptionDialog.getDialogId().equals(dialogId)) {
        if (subscriptionDialog != null && subscriptionDialog.getDialogId() == null) {
          subscriptionDialog.setDialogId(dialogId);
        }
 else {
          subscriptionDialog=pendingSubscribeClientTx.getDialog(dialogId);
        }
        if (sipStack.isLoggingEnabled()) {
          sipStack.getStackLogger().logDebug("PROCESSING NOTIFY Subscribe DIALOG " + subscriptionDialog);
        }
        if (subscriptionDialog == null && (sipProvider.isAutomaticDialogSupportEnabled() || pendingSubscribeClientTx.getDefaultDialog() != null)) {
          Event event=(Event)sipRequest.getHeader(EventHeader.NAME);
          if (sipStack.isEventForked(event.getEventType())) {
            subscriptionDialog=SIPDialog.createFromNOTIFY(pendingSubscribeClientTx,transaction);
          }
        }
        if (subscriptionDialog != null) {
          transaction.setDialog(subscriptionDialog,dialogId);
          subscriptionDialog.setState(DialogState.CONFIRMED.getValue());
          sipStack.putDialog(subscriptionDialog);
          pendingSubscribeClientTx.setDialog(subscriptionDialog,dialogId);
          if (!transaction.isTransactionMapped()) {
            this.sipStack.mapTransaction(transaction);
            transaction.setPassToListener();
            try {
              this.sipStack.addTransaction(transaction);
            }
 catch (            Exception ex) {
            }
          }
        }
      }
 else {
        transaction.setDialog(subscriptionDialog,dialogId);
        dialog=subscriptionDialog;
        if (!transaction.isTransactionMapped()) {
          this.sipStack.mapTransaction(transaction);
          transaction.setPassToListener();
          try {
            this.sipStack.addTransaction(transaction);
          }
 catch (          Exception ex) {
          }
        }
        sipStack.putDialog(subscriptionDialog);
        if (pendingSubscribeClientTx != null) {
          subscriptionDialog.addTransaction(pendingSubscribeClientTx);
          pendingSubscribeClientTx.setDialog(subscriptionDialog,dialogId);
        }
      }
      if (transaction != null && ((SIPServerTransaction)transaction).isTransactionMapped()) {
        sipEvent=new RequestEvent((SipProvider)sipProvider,(ServerTransaction)transaction,subscriptionDialog,(Request)sipRequest);
      }
 else {
        sipEvent=new RequestEvent((SipProvider)sipProvider,null,subscriptionDialog,(Request)sipRequest);
      }
    }
 else {
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug("could not find subscribe tx");
      }
      sipEvent=new RequestEvent(sipProvider,null,null,(Request)sipRequest);
    }
  }
 else {
    if (transaction != null && (((SIPServerTransaction)transaction).isTransactionMapped())) {
      sipEvent=new RequestEvent(sipProvider,(ServerTransaction)transaction,dialog,(Request)sipRequest);
    }
 else {
      sipEvent=new RequestEvent(sipProvider,null,dialog,(Request)sipRequest);
    }
  }
  sipProvider.handleEvent(sipEvent,transaction);
}

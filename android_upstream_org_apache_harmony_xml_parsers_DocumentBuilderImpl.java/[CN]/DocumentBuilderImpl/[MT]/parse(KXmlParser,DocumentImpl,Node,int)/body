{
  int token=parser.getEventType();
  while (token != endToken && token != XmlPullParser.END_DOCUMENT) {
    if (token == XmlPullParser.PROCESSING_INSTRUCTION) {
      String text=parser.getText();
      int dot=text.indexOf(' ');
      String target=(dot != -1 ? text.substring(0,dot) : text);
      String data=(dot != -1 ? text.substring(dot + 1) : "");
      node.appendChild(document.createProcessingInstruction(target,data));
    }
 else     if (token == XmlPullParser.DOCDECL) {
      String name=parser.getRootElementName();
      String publicId=parser.getPublicId();
      String systemId=parser.getSystemId();
      document.appendChild(new DocumentTypeImpl(document,name,publicId,systemId));
    }
 else     if (token == XmlPullParser.COMMENT) {
      if (!ignoreComments) {
        node.appendChild(document.createComment(parser.getText()));
      }
    }
 else     if (token == XmlPullParser.IGNORABLE_WHITESPACE) {
      if (!ignoreElementContentWhitespace && document != node) {
        appendText(document,node,token,parser.getText());
      }
    }
 else     if (token == XmlPullParser.TEXT || token == XmlPullParser.CDSECT) {
      appendText(document,node,token,parser.getText());
    }
 else     if (token == XmlPullParser.ENTITY_REF) {
      String entity=parser.getName();
      if (entityResolver != null) {
      }
      String resolved=resolvePredefinedOrCharacterEntity(entity);
      if (resolved != null) {
        appendText(document,node,token,resolved);
      }
 else {
        node.appendChild(document.createEntityReference(entity));
      }
    }
 else     if (token == XmlPullParser.START_TAG) {
      if (namespaceAware) {
        String namespace=parser.getNamespace();
        String name=parser.getName();
        String prefix=parser.getPrefix();
        if ("".equals(namespace)) {
          namespace=null;
        }
        Element element=document.createElementNS(namespace,name);
        element.setPrefix(prefix);
        node.appendChild(element);
        for (int i=0; i < parser.getAttributeCount(); i++) {
          String attrNamespace=parser.getAttributeNamespace(i);
          String attrPrefix=parser.getAttributePrefix(i);
          String attrName=parser.getAttributeName(i);
          String attrValue=parser.getAttributeValue(i);
          if ("".equals(attrNamespace)) {
            attrNamespace=null;
          }
          Attr attr=document.createAttributeNS(attrNamespace,attrName);
          attr.setPrefix(attrPrefix);
          attr.setValue(attrValue);
          element.setAttributeNodeNS(attr);
        }
        token=parser.nextToken();
        parse(parser,document,element,XmlPullParser.END_TAG);
        parser.require(XmlPullParser.END_TAG,namespace,name);
      }
 else {
        String name=parser.getName();
        Element element=document.createElement(name);
        node.appendChild(element);
        for (int i=0; i < parser.getAttributeCount(); i++) {
          String attrName=parser.getAttributeName(i);
          String attrValue=parser.getAttributeValue(i);
          Attr attr=document.createAttribute(attrName);
          attr.setValue(attrValue);
          element.setAttributeNode(attr);
        }
        token=parser.nextToken();
        parse(parser,document,element,XmlPullParser.END_TAG);
        parser.require(XmlPullParser.END_TAG,"",name);
      }
    }
    token=parser.nextToken();
  }
}

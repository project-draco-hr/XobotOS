{
  if (debug)   dbg_enter("InReplyToParser.parse");
  InReplyToList list=new InReplyToList();
  try {
    headerName(TokenTypes.IN_REPLY_TO);
    while (lexer.lookAhead(0) != '\n') {
      InReplyTo inReplyTo=new InReplyTo();
      inReplyTo.setHeaderName(SIPHeaderNames.IN_REPLY_TO);
      this.lexer.match(TokenTypes.ID);
      Token token=lexer.getNextToken();
      if (lexer.lookAhead(0) == '@') {
        this.lexer.match('@');
        this.lexer.match(TokenTypes.ID);
        Token secToken=lexer.getNextToken();
        inReplyTo.setCallId(token.getTokenValue() + "@" + secToken.getTokenValue());
      }
 else {
        inReplyTo.setCallId(token.getTokenValue());
      }
      this.lexer.SPorHT();
      list.add(inReplyTo);
      while (lexer.lookAhead(0) == ',') {
        this.lexer.match(',');
        this.lexer.SPorHT();
        inReplyTo=new InReplyTo();
        this.lexer.match(TokenTypes.ID);
        token=lexer.getNextToken();
        if (lexer.lookAhead(0) == '@') {
          this.lexer.match('@');
          this.lexer.match(TokenTypes.ID);
          Token secToken=lexer.getNextToken();
          inReplyTo.setCallId(token.getTokenValue() + "@" + secToken.getTokenValue());
        }
 else {
          inReplyTo.setCallId(token.getTokenValue());
        }
        list.add(inReplyTo);
      }
    }
    return list;
  }
  finally {
    if (debug)     dbg_leave("InReplyToParser.parse");
  }
}

{
  AlgorithmIdentifier algId=keyInfo.getAlgorithmId();
  if (algId.getObjectId().equals(PKCSObjectIdentifiers.rsaEncryption) || algId.getObjectId().equals(X509ObjectIdentifiers.id_ea_rsa)) {
    RSAPublicKeyStructure pubKey=new RSAPublicKeyStructure((ASN1Sequence)keyInfo.getPublicKey());
    return new RSAKeyParameters(false,pubKey.getModulus(),pubKey.getPublicExponent());
  }
 else   if (algId.getObjectId().equals(X9ObjectIdentifiers.dhpublicnumber)) {
    DHPublicKey dhPublicKey=DHPublicKey.getInstance(keyInfo.getPublicKey());
    BigInteger y=dhPublicKey.getY().getValue();
    DHDomainParameters dhParams=DHDomainParameters.getInstance(keyInfo.getAlgorithmId().getParameters());
    BigInteger p=dhParams.getP().getValue();
    BigInteger g=dhParams.getG().getValue();
    BigInteger q=dhParams.getQ().getValue();
    BigInteger j=null;
    if (dhParams.getJ() != null) {
      j=dhParams.getJ().getValue();
    }
    DHValidationParameters validation=null;
    DHValidationParms dhValidationParms=dhParams.getValidationParms();
    if (dhValidationParms != null) {
      byte[] seed=dhValidationParms.getSeed().getBytes();
      BigInteger pgenCounter=dhValidationParms.getPgenCounter().getValue();
      validation=new DHValidationParameters(seed,pgenCounter.intValue());
    }
    return new DHPublicKeyParameters(y,new DHParameters(p,g,q,j,validation));
  }
 else   if (algId.getObjectId().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {
    DHParameter params=new DHParameter((ASN1Sequence)keyInfo.getAlgorithmId().getParameters());
    DERInteger derY=(DERInteger)keyInfo.getPublicKey();
    BigInteger lVal=params.getL();
    int l=lVal == null ? 0 : lVal.intValue();
    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);
    return new DHPublicKeyParameters(derY.getValue(),dhParams);
  }
 else   if (algId.getObjectId().equals(X9ObjectIdentifiers.id_dsa) || algId.getObjectId().equals(OIWObjectIdentifiers.dsaWithSHA1)) {
    DERInteger derY=(DERInteger)keyInfo.getPublicKey();
    DEREncodable de=keyInfo.getAlgorithmId().getParameters();
    DSAParameters parameters=null;
    if (de != null) {
      DSAParameter params=DSAParameter.getInstance(de.getDERObject());
      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());
    }
    return new DSAPublicKeyParameters(derY.getValue(),parameters);
  }
 else   if (algId.getObjectId().equals(X9ObjectIdentifiers.id_ecPublicKey)) {
    X962Parameters params=new X962Parameters((DERObject)keyInfo.getAlgorithmId().getParameters());
    ECDomainParameters dParams=null;
    if (params.isNamedCurve()) {
      DERObjectIdentifier oid=(DERObjectIdentifier)params.getParameters();
      X9ECParameters ecP=X962NamedCurves.getByOID(oid);
      if (ecP == null) {
        ecP=SECNamedCurves.getByOID(oid);
        if (ecP == null) {
          ecP=NISTNamedCurves.getByOID(oid);
        }
      }
      dParams=new ECDomainParameters(ecP.getCurve(),ecP.getG(),ecP.getN(),ecP.getH(),ecP.getSeed());
    }
 else {
      X9ECParameters ecP=new X9ECParameters((ASN1Sequence)params.getParameters());
      dParams=new ECDomainParameters(ecP.getCurve(),ecP.getG(),ecP.getN(),ecP.getH(),ecP.getSeed());
    }
    DERBitString bits=keyInfo.getPublicKeyData();
    byte[] data=bits.getBytes();
    ASN1OctetString key=new DEROctetString(data);
    X9ECPoint derQ=new X9ECPoint(dParams.getCurve(),key);
    return new ECPublicKeyParameters(derQ.getPoint(),dParams);
  }
 else {
    throw new RuntimeException("algorithm identifier in key not recognised");
  }
}

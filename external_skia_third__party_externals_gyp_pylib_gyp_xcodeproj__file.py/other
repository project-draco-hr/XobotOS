'Xcode project file generator.\n\nThis module is both an Xcode project file generator and a documentation of the\nXcode project file format.  Knowledge of the project file format was gained\nbased on extensive experience with Xcode, and by making changes to projects in\nXcode.app and observing the resultant changes in the associated project files.\n\nXCODE PROJECT FILES\n\nThe generator targets the file format as written by Xcode 3.1 (specifically,\n3.1.2), but past experience has taught that the format has not changed\nsignificantly in the past several years, and future versions of Xcode are able\nto read older project files.\n\nXcode project files are "bundled": the project "file" from an end-user\'s\nperspective is actually a directory with an ".xcodeproj" extension.  The\nproject file from this module\'s perspective is actually a file inside this\ndirectory, always named "project.pbxproj".  This file contains a complete\ndescription of the project and is all that is needed to use the xcodeproj.\nOther files contained in the xcodeproj directory are simply used to store\nper-user settings, such as the state of various UI elements in the Xcode\napplication.\n\nThe project.pbxproj file is a property list, stored in a format almost\nidentical to the NeXTstep property list format.  The file is able to carry\nUnicode data, and is encoded in UTF-8.  The root element in the property list\nis a dictionary that contains several properties of minimal interest, and two\nproperties of immense interest.  The most important property is a dictionary\nnamed "objects".  The entire structure of the project is represented by the\nchildren of this property.  The objects dictionary is keyed by unique 96-bit\nvalues represented by 24 uppercase hexadecimal characters.  Each value in the\nobjects dictionary is itself a dictionary, describing an individual object.\n\nEach object in the dictionary is a member of a class, which is identified by\nthe "isa" property of each object.  A variety of classes are represented in a\nproject file.  Objects can refer to other objects by ID, using the 24-character\nhexadecimal object key.  A project\'s objects form a tree, with a root object\nof class PBXProject at the root.  As an example, the PBXProject object serves\nas parent to an XCConfigurationList object defining the build configurations\nused in the project, a PBXGroup object serving as a container for all files\nreferenced in the project, and a list of target objects, each of which defines\na target in the project.  There are several different types of target object,\nsuch as PBXNativeTarget and PBXAggregateTarget.  In this module, this\nrelationship is expressed by having each target type derive from an abstract\nbase named XCTarget.\n\nThe project.pbxproj file\'s root dictionary also contains a property, sibling to\nthe "objects" dictionary, named "rootObject".  The value of rootObject is a\n24-character object key referring to the root PBXProject object in the\nobjects dictionary.\n\nIn Xcode, every file used as input to a target or produced as a final product\nof a target must appear somewhere in the hierarchy rooted at the PBXGroup\nobject referenced by the PBXProject\'s mainGroup property.  A PBXGroup is\ngenerally represented as a folder in the Xcode application.  PBXGroups can\ncontain other PBXGroups as well as PBXFileReferences, which are pointers to\nactual files.\n\nEach XCTarget contains a list of build phases, represented in this module by\nthe abstract base XCBuildPhase.  Examples of concrete XCBuildPhase derivations\nare PBXSourcesBuildPhase and PBXFrameworksBuildPhase, which correspond to the\n"Compile Sources" and "Link Binary With Libraries" phases displayed in the\nXcode application.  Files used as input to these phases (for example, source\nfiles in the former case and libraries and frameworks in the latter) are\nrepresented by PBXBuildFile objects, referenced by elements of "files" lists\nin XCTarget objects.  Each PBXBuildFile object refers to a PBXBuildFile\nobject as a "weak" reference: it does not "own" the PBXBuildFile, which is\nowned by the root object\'s mainGroup or a descendant group.  In most cases, the\nlayer of indirection between an XCBuildPhase and a PBXFileReference via a\nPBXBuildFile appears extraneous, but there\'s actually one reason for this:\nfile-specific compiler flags are added to the PBXBuildFile object so as to\nallow a single file to be a member of multiple targets while having distinct\ncompiler flags for each.  These flags can be modified in the Xcode applciation\nin the "Build" tab of a File Info window.\n\nWhen a project is open in the Xcode application, Xcode will rewrite it.  As\nsuch, this module is careful to adhere to the formatting used by Xcode, to\navoid insignificant changes appearing in the file when it is used in the\nXcode application.  This will keep version control repositories happy, and\nmakes it possible to compare a project file used in Xcode to one generated by\nthis module to determine if any significant changes were made in the\napplication.\n\nXcode has its own way of assigning 24-character identifiers to each object,\nwhich is not duplicated here.  Because the identifier only is only generated\nonce, when an object is created, and is then left unchanged, there is no need\nto attempt to duplicate Xcode\'s behavior in this area.  The generator is free\nto select any identifier, even at random, to refer to the objects it creates,\nand Xcode will retain those identifiers and use them when subsequently\nrewriting the project file.  However, the generator would choose new random\nidentifiers each time the project files are generated, leading to difficulties\ncomparing "used" project files to "pristine" ones produced by this module,\nand causing the appearance of changes as every object identifier is changed\nwhen updated projects are checked in to a version control repository.  To\nmitigate this problem, this module chooses identifiers in a more deterministic\nway, by hashing a description of each object as well as its parent and ancestor\nobjects.  This strategy should result in minimal "shift" in IDs as successive\ngenerations of project files are produced.\n\nTHIS MODULE\n\nThis module introduces several classes, all derived from the XCObject class.\nNearly all of the "brains" are built into the XCObject class, which understands\nhow to create and modify objects, maintain the proper tree structure, compute\nidentifiers, and print objects.  For the most part, classes derived from\nXCObject need only provide a _schema class object, a dictionary that\nexpresses what properties objects of the class may contain.\n\nGiven this structure, it\'s possible to build a minimal project file by creating\nobjects of the appropriate types and making the proper connections:\n\n  config_list = XCConfigurationList()\n  group = PBXGroup()\n  project = PBXProject({\'buildConfigurationList\': config_list,\n                        \'mainGroup\': group})\n\nWith the project object set up, it can be added to an XCProjectFile object.\nXCProjectFile is a pseudo-class in the sense that it is a concrete XCObject\nsubclass that does not actually correspond to a class type found in a project\nfile.  Rather, it is used to represent the project file\'s root dictionary.\nPrinting an XCProjectFile will print the entire project file, including the\nfull "objects" dictionary.\n\n  project_file = XCProjectFile({\'rootObject\': project})\n  project_file.ComputeIDs()\n  project_file.Print()\n\nXcode project files are always encoded in UTF-8.  This module will accept\nstrings of either the str class or the unicode class.  Strings of class str\nare assumed to already be encoded in UTF-8.  Obviously, if you\'re just using\nASCII, you won\'t encounter difficulties because ASCII is a UTF-8 subset.\nStrings of class unicode are handled properly and encoded in UTF-8 when\na project file is output.\n'
import gyp.common
import posixpath
import re
import struct
import sys
try:
    import hashlib
    _new_sha1 = hashlib.sha1
except ImportError:
    import sha
    _new_sha1 = sha.new
_unquoted = re.compile('^[A-Za-z0-9$./_]+$')
_quoted = re.compile('___')
_escaped = re.compile('[\\\\"]|[^ -~]')
_path_leading_variable = re.compile('^\\$\\((.*?)\\)(/(.*))?$')
PBXTargetDependency._schema['target'][1] = XCTarget

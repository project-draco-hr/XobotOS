def __init__(self, properties=None, id=None, parent=None, force_outdir=None, force_prefix=None, force_extension=None):
    XCTarget.__init__(self, properties, id, parent)
    if (('productName' in self._properties) and ('productType' in self._properties) and (not ('productReference' in self._properties)) and (self._properties['productType'] in self._product_filetypes)):
        products_group = None
        pbxproject = self.PBXProjectAncestor()
        if (pbxproject != None):
            products_group = pbxproject.ProductsGroup()
        if (products_group != None):
            (filetype, prefix, suffix) = self._product_filetypes[self._properties['productType']]
            if (self._properties['productType'] == 'com.googlecode.gyp.xcode.bundle'):
                self._properties['productType'] = 'com.apple.product-type.library.dynamic'
                self.SetBuildSetting('MACH_O_TYPE', 'mh_bundle')
                self.SetBuildSetting('DYLIB_CURRENT_VERSION', '')
                self.SetBuildSetting('DYLIB_COMPATIBILITY_VERSION', '')
                if (force_extension == None):
                    force_extension = suffix[1:]
            if (force_extension is not None):
                if filetype.startswith('wrapper.'):
                    self.SetBuildSetting('WRAPPER_EXTENSION', force_extension)
                else:
                    suffix = ('.' + force_extension)
                    self.SetBuildSetting('EXECUTABLE_EXTENSION', force_extension)
                if filetype.startswith('compiled.mach-o.executable'):
                    product_name = self._properties['productName']
                    product_name += suffix
                    suffix = ''
                    self.SetProperty('productName', product_name)
                    self.SetBuildSetting('PRODUCT_NAME', product_name)
            if (force_prefix is not None):
                prefix = force_prefix
            if filetype.startswith('wrapper.'):
                self.SetBuildSetting('WRAPPER_PREFIX', prefix)
            else:
                self.SetBuildSetting('EXECUTABLE_PREFIX', prefix)
            if (force_outdir is not None):
                self.SetBuildSetting('TARGET_BUILD_DIR', force_outdir)
            product_name = self._properties['productName']
            prefix_len = len(prefix)
            if (prefix_len and (product_name[:prefix_len] == prefix)):
                product_name = product_name[prefix_len:]
                self.SetProperty('productName', product_name)
                self.SetBuildSetting('PRODUCT_NAME', product_name)
            ref_props = {'explicitFileType': filetype, 'includeInIndex': 0, 'path': ((prefix + product_name) + suffix), 'sourceTree': 'BUILT_PRODUCTS_DIR', }
            file_ref = PBXFileReference(ref_props)
            products_group.AppendChild(file_ref)
            self.SetProperty('productReference', file_ref)

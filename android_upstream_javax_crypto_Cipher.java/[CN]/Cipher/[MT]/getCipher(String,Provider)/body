{
  if (transformation == null || transformation.isEmpty()) {
    throw invalidTransformation(transformation);
  }
  String[] transf=checkTransformation(transformation);
  boolean needSetPadding=false;
  boolean needSetMode=false;
  Object engineSpi=null;
  Provider engineProvider=provider;
  if (transf[1] == null && transf[2] == null) {
    if (provider == null) {
      Engine.SpiAndProvider sap=ENGINE.getInstance(transf[0],null);
      engineSpi=sap.spi;
      engineProvider=sap.provider;
    }
 else {
      engineSpi=ENGINE.getInstance(transf[0],provider,null);
    }
  }
 else {
    String[] searchOrder={transf[0] + "/" + transf[1]+ "/"+ transf[2],transf[0] + "/" + transf[1],transf[0] + "//" + transf[2],transf[0]};
    int i;
    for (i=0; i < searchOrder.length; i++) {
      try {
        if (provider == null) {
          Engine.SpiAndProvider sap=ENGINE.getInstance(searchOrder[i],null);
          engineSpi=sap.spi;
          engineProvider=sap.provider;
        }
 else {
          engineSpi=ENGINE.getInstance(searchOrder[i],provider,null);
        }
        break;
      }
 catch (      NoSuchAlgorithmException e) {
        if (i == searchOrder.length - 1) {
          throw new NoSuchAlgorithmException(transformation,e);
        }
      }
    }
switch (i) {
case 1:
      needSetPadding=true;
    break;
case 2:
  needSetMode=true;
break;
case 3:
needSetPadding=true;
needSetMode=true;
}
}
if (engineSpi == null || engineProvider == null) {
throw new NoSuchAlgorithmException(transformation);
}
if (!(engineSpi instanceof CipherSpi)) {
throw new NoSuchAlgorithmException(engineSpi.getClass().getName());
}
CipherSpi cspi=(CipherSpi)engineSpi;
Cipher c=new Cipher(cspi,engineProvider,transformation);
if (needSetMode) {
c.spiImpl.engineSetMode(transf[1]);
}
if (needSetPadding) {
c.spiImpl.engineSetPadding(transf[2]);
}
return c;
}

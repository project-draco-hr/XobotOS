{
  if (sha_mac == null) {
    init();
  }
  SecretKeySpec keyMd5;
  SecretKeySpec keySha1;
  if ((secret == null) || (secret.length == 0)) {
    secret=new byte[8];
    keyMd5=new SecretKeySpec(secret,"HmacMD5");
    keySha1=new SecretKeySpec(secret,"HmacSHA1");
  }
 else {
    int length=secret.length >> 1;
    int offset=secret.length & 1;
    keyMd5=new SecretKeySpec(secret,0,length + offset,"HmacMD5");
    keySha1=new SecretKeySpec(secret,length,length + offset,"HmacSHA1");
  }
  if (logger != null) {
    logger.println("secret[" + secret.length + "]: ");
    logger.printAsHex(16,""," ",secret);
    logger.println("label[" + str_byts.length + "]: ");
    logger.printAsHex(16,""," ",str_byts);
    logger.println("seed[" + seed.length + "]: ");
    logger.printAsHex(16,""," ",seed);
    logger.println("MD5 key:");
    logger.printAsHex(16,""," ",keyMd5.getEncoded());
    logger.println("SHA1 key:");
    logger.printAsHex(16,""," ",keySha1.getEncoded());
  }
  md5_mac.init(keyMd5);
  sha_mac.init(keySha1);
  int pos=0;
  md5_mac.update(str_byts);
  byte[] hash=md5_mac.doFinal(seed);
  while (pos < out.length) {
    md5_mac.update(hash);
    md5_mac.update(str_byts);
    md5_mac.update(seed);
    if (pos + md5_mac_length < out.length) {
      md5_mac.doFinal(out,pos);
      pos+=md5_mac_length;
    }
 else {
      System.arraycopy(md5_mac.doFinal(),0,out,pos,out.length - pos);
      break;
    }
    hash=md5_mac.doFinal(hash);
  }
  if (logger != null) {
    logger.println("P_MD5:");
    logger.printAsHex(md5_mac_length,""," ",out);
  }
  pos=0;
  sha_mac.update(str_byts);
  hash=sha_mac.doFinal(seed);
  byte[] sha1hash;
  while (pos < out.length) {
    sha_mac.update(hash);
    sha_mac.update(str_byts);
    sha1hash=sha_mac.doFinal(seed);
    for (int i=0; (i < sha_mac_length) & (pos < out.length); i++) {
      out[pos++]^=sha1hash[i];
    }
    hash=sha_mac.doFinal(hash);
  }
  if (logger != null) {
    logger.println("PRF:");
    logger.printAsHex(sha_mac_length,""," ",out);
  }
}

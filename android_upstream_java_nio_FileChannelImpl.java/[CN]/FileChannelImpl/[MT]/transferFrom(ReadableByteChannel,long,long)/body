{
  checkOpen();
  if (!src.isOpen()) {
    throw new ClosedChannelException();
  }
  checkWritable();
  if (position < 0 || count < 0 || count > Integer.MAX_VALUE) {
    throw new IllegalArgumentException("position=" + position + " count="+ count);
  }
  if (position > size()) {
    return 0;
  }
  if (src instanceof FileChannel) {
    FileChannel fileSrc=(FileChannel)src;
    long size=fileSrc.size();
    long filePosition=fileSrc.position();
    count=Math.min(count,size - filePosition);
    ByteBuffer buffer=fileSrc.map(MapMode.READ_ONLY,filePosition,count);
    try {
      fileSrc.position(filePosition + count);
      return write(buffer,position);
    }
  finally {
      NioUtils.freeDirectBuffer(buffer);
    }
  }
  ByteBuffer buffer=ByteBuffer.allocate((int)count);
  src.read(buffer);
  buffer.flip();
  return write(buffer,position);
}

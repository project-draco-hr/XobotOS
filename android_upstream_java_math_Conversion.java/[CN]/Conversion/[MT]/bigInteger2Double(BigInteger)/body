{
  val.prepareJavaRepresentation();
  if ((val.numberLength < 2) || ((val.numberLength == 2) && (val.digits[1] > 0))) {
    return val.longValue();
  }
  if (val.numberLength > 32) {
    return ((val.sign > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);
  }
  int bitLen=val.abs().bitLength();
  long exponent=bitLen - 1;
  int delta=bitLen - 54;
  long lVal=val.abs().shiftRight(delta).longValue();
  long mantissa=lVal & 0x1FFFFFFFFFFFFFL;
  if (exponent == 1023) {
    if (mantissa == 0X1FFFFFFFFFFFFFL) {
      return ((val.sign > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);
    }
    if (mantissa == 0x1FFFFFFFFFFFFEL) {
      return ((val.sign > 0) ? Double.MAX_VALUE : -Double.MAX_VALUE);
    }
  }
  if (((mantissa & 1) == 1) && (((mantissa & 2) == 2) || BitLevel.nonZeroDroppedBits(delta,val.digits))) {
    mantissa+=2;
  }
  mantissa>>=1;
  long resSign=(val.sign < 0) ? 0x8000000000000000L : 0;
  exponent=((1023 + exponent) << 52) & 0x7FF0000000000000L;
  long result=resSign | exponent | mantissa;
  return Double.longBitsToDouble(result);
}

{
  String headerNameLowerCase=SIPHeaderNamesCache.toLowerCase(headerName);
  SIPHeader toRemove=(SIPHeader)nameTable.get(headerNameLowerCase);
  if (toRemove == null)   return;
  if (toRemove instanceof SIPHeaderList) {
    SIPHeaderList<?> hdrList=(SIPHeaderList<?>)toRemove;
    if (top)     hdrList.removeFirst();
 else     hdrList.removeLast();
    if (hdrList.isEmpty()) {
      Iterator<SIPHeader> li=this.headers.iterator();
      while (li.hasNext()) {
        SIPHeader sipHeader=(SIPHeader)li.next();
        if (sipHeader.getName().equalsIgnoreCase(headerNameLowerCase))         li.remove();
      }
      nameTable.remove(headerNameLowerCase);
    }
  }
 else {
    this.nameTable.remove(headerNameLowerCase);
    if (toRemove instanceof From) {
      this.fromHeader=null;
    }
 else     if (toRemove instanceof To) {
      this.toHeader=null;
    }
 else     if (toRemove instanceof CSeq) {
      this.cSeqHeader=null;
    }
 else     if (toRemove instanceof CallID) {
      this.callIdHeader=null;
    }
 else     if (toRemove instanceof MaxForwards) {
      this.maxForwardsHeader=null;
    }
 else     if (toRemove instanceof ContentLength) {
      this.contentLengthHeader=null;
    }
    Iterator<SIPHeader> li=this.headers.iterator();
    while (li.hasNext()) {
      SIPHeader sipHeader=(SIPHeader)li.next();
      if (sipHeader.getName().equalsIgnoreCase(headerName))       li.remove();
    }
  }
}

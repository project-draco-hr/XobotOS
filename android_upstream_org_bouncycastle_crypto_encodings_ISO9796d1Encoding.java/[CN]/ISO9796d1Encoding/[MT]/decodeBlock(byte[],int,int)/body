{
  byte[] block=engine.processBlock(in,inOff,inLen);
  int r=1;
  int t=(bitSize + 13) / 16;
  BigInteger iS=new BigInteger(1,block);
  BigInteger iR;
  if (iS.mod(SIXTEEN).equals(SIX)) {
    iR=iS;
  }
 else   if ((modulus.subtract(iS)).mod(SIXTEEN).equals(SIX)) {
    iR=modulus.subtract(iS);
  }
 else {
    throw new InvalidCipherTextException("resulting integer iS or (modulus - iS) is not congruent to 6 mod 16");
  }
  block=convertOutputDecryptOnly(iR);
  if ((block[block.length - 1] & 0x0f) != 0x6) {
    throw new InvalidCipherTextException("invalid forcing byte in block");
  }
  block[block.length - 1]=(byte)(((block[block.length - 1] & 0xff) >>> 4) | ((inverse[(block[block.length - 2] & 0xff) >> 4]) << 4));
  block[0]=(byte)((shadows[(block[1] & 0xff) >>> 4] << 4) | shadows[block[1] & 0x0f]);
  boolean boundaryFound=false;
  int boundary=0;
  for (int i=block.length - 1; i >= block.length - 2 * t; i-=2) {
    int val=((shadows[(block[i] & 0xff) >>> 4] << 4) | shadows[block[i] & 0x0f]);
    if (((block[i - 1] ^ val) & 0xff) != 0) {
      if (!boundaryFound) {
        boundaryFound=true;
        r=(block[i - 1] ^ val) & 0xff;
        boundary=i - 1;
      }
 else {
        throw new InvalidCipherTextException("invalid tsums in block");
      }
    }
  }
  block[boundary]=0;
  byte[] nblock=new byte[(block.length - boundary) / 2];
  for (int i=0; i < nblock.length; i++) {
    nblock[i]=block[2 * i + boundary + 1];
  }
  padBits=r - 1;
  return nblock;
}

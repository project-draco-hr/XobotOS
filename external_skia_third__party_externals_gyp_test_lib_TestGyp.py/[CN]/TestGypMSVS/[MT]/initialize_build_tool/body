def initialize_build_tool(self):
    ' Initializes the Visual Studio .build_tool and .uses_msbuild parameters.\n\n    We use the value specified by GYP_MSVS_VERSION.  If not specified, we\n    search %PATH% and %PATHEXT% for a devenv.{exe,bat,...} executable.\n    Failing that, we search for likely deployment paths.\n    '
    super(TestGypMSVS, self).initialize_build_tool()
    possible_roots = ['C:\\Program Files (x86)', 'C:\\Program Files', 'E:\\Program Files (x86)', 'E:\\Program Files']
    possible_paths = {'2010': 'Microsoft Visual Studio 10.0\\Common7\\IDE\\devenv.com', '2008': 'Microsoft Visual Studio 9.0\\Common7\\IDE\\devenv.com', '2005': 'Microsoft Visual Studio 8\\Common7\\IDE\\devenv.com', }
    msvs_version = os.environ.get('GYP_MSVS_VERSION', 'auto')
    if (msvs_version in possible_paths):
        path = possible_paths[msvs_version]
        for r in possible_roots:
            bt = os.path.join(r, path)
            if os.path.exists(bt):
                self.build_tool = bt
                self.uses_msbuild = (msvs_version >= '2010')
                return
        else:
            print ('Warning: Environment variable GYP_MSVS_VERSION specifies "%s" but corresponding "%s" was not found.' % (msvs_version, path))
    if self.build_tool:
        for (version, path) in possible_paths.iteritems():
            if (self.build_tool.find(path) >= 0):
                self.uses_msbuild = (version >= '2010')
                return
        else:
            self.uses_msbuild = False
        return
    for (version, path) in possible_paths.iteritems():
        for r in possible_roots:
            bt = os.path.join(r, path)
            if os.path.exists(bt):
                self.build_tool = bt
                self.uses_msbuild = (msvs_version >= '2010')
                return
    print 'Error: could not find devenv'
    sys.exit(1)

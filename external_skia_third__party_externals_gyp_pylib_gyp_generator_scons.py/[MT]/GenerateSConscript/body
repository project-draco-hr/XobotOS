def GenerateSConscript(output_filename, spec, build_file, build_file_data):
    "\n  Generates a SConscript file for a specific target.\n\n  This generates a SConscript file suitable for building any or all of\n  the target's configurations.\n\n  A SConscript file may be called multiple times to generate targets for\n  multiple configurations.  Consequently, it needs to be ready to build\n  the target for any requested configuration, and therefore contains\n  information about the settings for all configurations (generated into\n  the SConscript file at gyp configuration time) as well as logic for\n  selecting (at SCons build time) the specific configuration being built.\n\n  The general outline of a generated SConscript file is:\n\n    --  Header\n\n    --  Import 'env'.  This contains a $CONFIG_NAME construction\n        variable that specifies what configuration to build\n        (e.g. Debug, Release).\n\n    --  Configurations.  This is a dictionary with settings for\n        the different configurations (Debug, Release) under which this\n        target can be built.  The values in the dictionary are themselves\n        dictionaries specifying what construction variables should added\n        to the local copy of the imported construction environment\n        (Append), should be removed (FilterOut), and should outright\n        replace the imported values (Replace).\n\n    --  Clone the imported construction environment and update\n        with the proper configuration settings.\n\n    --  Initialize the lists of the targets' input files and prerequisites.\n\n    --  Target-specific actions and rules.  These come after the\n        input file and prerequisite initializations because the\n        outputs of the actions and rules may affect the input file\n        list (process_outputs_as_sources) and get added to the list of\n        prerequisites (so that they're guaranteed to be executed before\n        building the target).\n\n    --  Call the Builder for the target itself.\n\n    --  Arrange for any copies to be made into installation directories.\n\n    --  Set up the {name} Alias (phony Node) for the target as the\n        primary handle for building all of the target's pieces.\n\n    --  Use env.Require() to make sure the prerequisites (explicitly\n        specified, but also including the actions and rules) are built\n        before the target itself.\n\n    --  Return the {name} Alias to the calling SConstruct file\n        so it can be added to the list of default targets.\n  "
    scons_target = SCons.Target(spec)
    gyp_dir = os.path.dirname(output_filename)
    if (not gyp_dir):
        gyp_dir = '.'
    gyp_dir = os.path.abspath(gyp_dir)
    output_dir = os.path.dirname(output_filename)
    src_dir = build_file_data['_DEPTH']
    src_dir_rel = gyp.common.RelativePath(src_dir, output_dir)
    subdir = gyp.common.RelativePath(os.path.dirname(build_file), src_dir)
    src_subdir = ('$SRC_DIR/' + subdir)
    src_subdir_ = (src_subdir + '/')
    component_name = os.path.splitext(os.path.basename(build_file))[0]
    target_name = spec['target_name']
    if (not os.path.exists(gyp_dir)):
        os.makedirs(gyp_dir)
    fp = open(output_filename, 'w')
    fp.write(header)
    fp.write('\nimport os\n')
    fp.write('\nImport("env")\n')
    fp.write('\n')
    fp.write(('env = env.Clone(COMPONENT_NAME=%s,\n' % repr(component_name)))
    fp.write(('                TARGET_NAME=%s)\n' % repr(target_name)))
    for config in spec['configurations'].itervalues():
        if config.get('scons_line_length'):
            fp.write(_spawn_hack)
            break
    indent = (' ' * 12)
    fp.write('\n')
    fp.write('configurations = {\n')
    for (config_name, config) in spec['configurations'].iteritems():
        fp.write(("    '%s' : {\n" % config_name))
        fp.write("        'Append' : dict(\n")
        GenerateConfig(fp, config, indent, src_subdir)
        libraries = spec.get('libraries')
        if libraries:
            WriteList(fp, map(repr, libraries), prefix=indent, preamble=('%sLIBS = [\n    ' % indent), postamble=('\n%s],\n' % indent))
        fp.write('        ),\n')
        fp.write("        'FilterOut' : dict(\n")
        for (key, var) in config.get('scons_remove', {}).iteritems():
            fp.write(('             %s = %s,\n' % (key, repr(var))))
        fp.write('        ),\n')
        fp.write("        'Replace' : dict(\n")
        scons_settings = config.get('scons_variable_settings', {})
        for key in sorted(scons_settings.keys()):
            val = pprint.pformat(scons_settings[key])
            fp.write(('             %s = %s,\n' % (key, val)))
        if ('c++' in spec.get('link_languages', [])):
            fp.write(('             %s = %s,\n' % ('LINK', repr('$CXX'))))
        if config.get('scons_line_length'):
            fp.write('             SPAWN = gyp_spawn,\n')
        fp.write('        ),\n')
        fp.write("        'ImportExternal' : [\n")
        for var in config.get('scons_import_variables', []):
            fp.write(('             %s,\n' % repr(var)))
        fp.write('        ],\n')
        fp.write("        'PropagateExternal' : [\n")
        for var in config.get('scons_propagate_variables', []):
            fp.write(('             %s,\n' % repr(var)))
        fp.write('        ],\n')
        fp.write('    },\n')
    fp.write('}\n')
    fp.write("\nconfig = configurations[env['CONFIG_NAME']]\nenv.Append(**config['Append'])\nenv.FilterOut(**config['FilterOut'])\nenv.Replace(**config['Replace'])\n")
    fp.write("\n# Scons forces -fPIC for SHCCFLAGS on some platforms.\n# Disable that so we can control it from cflags in gyp.\n# Note that Scons itself is inconsistent with its -fPIC\n# setting. SHCCFLAGS forces -fPIC, and SHCFLAGS does not.\n# This will make SHCCFLAGS consistent with SHCFLAGS.\nenv['SHCCFLAGS'] = ['$CCFLAGS']\n")
    fp.write("\nfor _var in config['ImportExternal']:\n  if _var in ARGUMENTS:\n    env[_var] = ARGUMENTS[_var]\n  elif _var in os.environ:\n    env[_var] = os.environ[_var]\nfor _var in config['PropagateExternal']:\n  if _var in ARGUMENTS:\n    env[_var] = ARGUMENTS[_var]\n  elif _var in os.environ:\n    env['ENV'][_var] = os.environ[_var]\n")
    fp.write("\nenv['ENV']['LD_LIBRARY_PATH'] = env.subst('$LIB_DIR')\n")
    variants = spec.get('variants', {})
    for setting in sorted(variants.keys()):
        if_fmt = "if ARGUMENTS.get(%s) not in (None, '0'):\n"
        fp.write('\n')
        fp.write((if_fmt % repr(setting.upper())))
        fp.write('  env.AppendUnique(\n')
        GenerateConfig(fp, variants[setting], indent, src_subdir)
        fp.write('  )\n')
    scons_target.write_input_files(fp)
    fp.write('\n')
    fp.write('target_files = []\n')
    prerequisites = spec.get('scons_prerequisites', [])
    fp.write(('prerequisites = %s\n' % pprint.pformat(prerequisites)))
    actions = spec.get('actions', [])
    for action in actions:
        a = (['cd', src_subdir, '&&'] + action['action'])
        message = action.get('message')
        if message:
            message = repr(message)
        inputs = [FixPath(f, src_subdir_) for f in action.get('inputs', [])]
        outputs = [FixPath(f, src_subdir_) for f in action.get('outputs', [])]
        if outputs:
            template = _command_template
        else:
            template = _alias_template
        fp.write((template % {'inputs': pprint.pformat(inputs), 'outputs': pprint.pformat(outputs), 'action': pprint.pformat(a), 'message': message, 'target_name': target_name, }))
        if int(action.get('process_outputs_as_sources', 0)):
            fp.write('input_files.extend(_outputs)\n')
        fp.write('prerequisites.extend(_outputs)\n')
        fp.write('target_files.extend(_outputs)\n')
    rules = spec.get('rules', [])
    for rule in rules:
        name = rule['rule_name']
        a = (['cd', src_subdir, '&&'] + rule['action'])
        message = rule.get('message')
        if message:
            message = repr(message)
        if int(rule.get('process_outputs_as_sources', 0)):
            poas_line = '_processed_input_files.extend(_generated)'
        else:
            poas_line = '_processed_input_files.append(infile)'
        inputs = [FixPath(f, src_subdir_) for f in rule.get('inputs', [])]
        outputs = [FixPath(f, src_subdir_) for f in rule.get('outputs', [])]
        fp.write((_rule_template % {'inputs': pprint.pformat(inputs), 'outputs': pprint.pformat(outputs), 'action': pprint.pformat(a), 'extension': rule['extension'], 'name': name, 'message': message, 'process_outputs_as_sources_line': poas_line, 'src_dir': src_subdir_, }))
    scons_target.write_target(fp, src_subdir)
    copies = spec.get('copies', [])
    if copies:
        fp.write(_copy_action_template)
    for copy in copies:
        destdir = None
        files = None
        try:
            destdir = copy['destination']
        except KeyError as e:
            gyp.common.ExceptionAppend(e, ("Required 'destination' key missing for 'copies' in %s." % build_file))
            raise
        try:
            files = copy['files']
        except KeyError as e:
            gyp.common.ExceptionAppend(e, ("Required 'files' key missing for 'copies' in %s." % build_file))
            raise
        if (not files):
            continue
        if (not destdir):
            raise Exception(("Required 'destination' key is empty for 'copies' in %s." % build_file))
        fmt = "\n_outputs = env.Command(%s,\n    %s,\n    GYPCopy('$TARGET', '$SOURCE'))\n"
        for f in copy['files']:
            dest = os.path.join(destdir, os.path.basename(f.rstrip(os.sep)))
            f = FixPath(f, src_subdir_)
            dest = FixPath(dest, src_subdir_)
            fp.write((fmt % (repr(dest), repr(f))))
            fp.write('target_files.extend(_outputs)\n')
    run_as = spec.get('run_as')
    if run_as:
        action = run_as.get('action', [])
        working_directory = run_as.get('working_directory')
        if (not working_directory):
            working_directory = gyp_dir
        elif (not os.path.isabs(working_directory)):
            working_directory = os.path.normpath(os.path.join(gyp_dir, working_directory))
        if run_as.get('environment'):
            for (key, val) in run_as.get('environment').iteritems():
                action = ([('%s="%s"' % (key, val))] + action)
        action = (['cd', ('"%s"' % working_directory), '&&'] + action)
        fp.write((_run_as_template % {'action': pprint.pformat(action), 'message': run_as.get('message', ''), }))
    fmt = "\ngyp_target = env.Alias('%s', target_files)\n"
    fp.write((fmt % target_name))
    dependencies = spec.get('scons_dependencies', [])
    if dependencies:
        WriteList(fp, dependencies, preamble='dependencies = [\n    ', postamble='\n]\n')
        fp.write('env.Requires(target_files, dependencies)\n')
        fp.write('env.Requires(gyp_target, dependencies)\n')
        fp.write('for prerequisite in prerequisites:\n')
        fp.write('  env.Requires(prerequisite, dependencies)\n')
    fp.write('env.Requires(gyp_target, prerequisites)\n')
    if run_as:
        fp.write((_run_as_template_suffix % {'target_name': target_name, }))
    fp.write('Return("gyp_target")\n')
    fp.close()

{
  HttpRoute route=roureq.getRoute();
  HttpHost proxy=route.getProxyHost();
  RequestWrapper request=roureq.getRequest();
  HttpParams params=request.getParams();
  if (HttpClientParams.isRedirecting(params) && this.redirectHandler.isRedirectRequested(response,context)) {
    if (redirectCount >= maxRedirects) {
      throw new RedirectException("Maximum redirects (" + maxRedirects + ") exceeded");
    }
    redirectCount++;
    URI uri=this.redirectHandler.getLocationURI(response,context);
    HttpHost newTarget=new HttpHost(uri.getHost(),uri.getPort(),uri.getScheme());
    HttpGet redirect=new HttpGet(uri);
    HttpRequest orig=request.getOriginal();
    redirect.setHeaders(orig.getAllHeaders());
    RequestWrapper wrapper=new RequestWrapper(redirect);
    wrapper.setParams(params);
    HttpRoute newRoute=determineRoute(newTarget,wrapper,context);
    RoutedRequest newRequest=new RoutedRequest(wrapper,newRoute);
    if (this.log.isDebugEnabled()) {
      this.log.debug("Redirecting to '" + uri + "' via "+ newRoute);
    }
    return newRequest;
  }
  CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);
  if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {
    if (this.targetAuthHandler.isAuthenticationRequested(response,context)) {
      HttpHost target=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
      if (target == null) {
        target=route.getTargetHost();
      }
      this.log.debug("Target requested authentication");
      Map<String,Header> challenges=this.targetAuthHandler.getChallenges(response,context);
      try {
        processChallenges(challenges,this.targetAuthState,this.targetAuthHandler,response,context);
      }
 catch (      AuthenticationException ex) {
        if (this.log.isWarnEnabled()) {
          this.log.warn("Authentication error: " + ex.getMessage());
          return null;
        }
      }
      updateAuthState(this.targetAuthState,target,credsProvider);
      if (this.targetAuthState.getCredentials() != null) {
        return roureq;
      }
 else {
        return null;
      }
    }
 else {
      this.targetAuthState.setAuthScope(null);
    }
    if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {
      this.log.debug("Proxy requested authentication");
      Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);
      try {
        processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);
      }
 catch (      AuthenticationException ex) {
        if (this.log.isWarnEnabled()) {
          this.log.warn("Authentication error: " + ex.getMessage());
          return null;
        }
      }
      updateAuthState(this.proxyAuthState,proxy,credsProvider);
      if (this.proxyAuthState.getCredentials() != null) {
        return roureq;
      }
 else {
        return null;
      }
    }
 else {
      this.proxyAuthState.setAuthScope(null);
    }
  }
  return null;
}

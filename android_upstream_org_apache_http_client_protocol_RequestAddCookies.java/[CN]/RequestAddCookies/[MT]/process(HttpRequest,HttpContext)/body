{
  if (request == null) {
    throw new IllegalArgumentException("HTTP request may not be null");
  }
  if (context == null) {
    throw new IllegalArgumentException("HTTP context may not be null");
  }
  CookieStore cookieStore=(CookieStore)context.getAttribute(ClientContext.COOKIE_STORE);
  if (cookieStore == null) {
    this.log.info("Cookie store not available in HTTP context");
    return;
  }
  CookieSpecRegistry registry=(CookieSpecRegistry)context.getAttribute(ClientContext.COOKIESPEC_REGISTRY);
  if (registry == null) {
    this.log.info("CookieSpec registry not available in HTTP context");
    return;
  }
  HttpHost targetHost=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
  if (targetHost == null) {
    throw new IllegalStateException("Target host not specified in HTTP context");
  }
  ManagedClientConnection conn=(ManagedClientConnection)context.getAttribute(ExecutionContext.HTTP_CONNECTION);
  if (conn == null) {
    throw new IllegalStateException("Client connection not specified in HTTP context");
  }
  String policy=HttpClientParams.getCookiePolicy(request.getParams());
  if (this.log.isDebugEnabled()) {
    this.log.debug("CookieSpec selected: " + policy);
  }
  URI requestURI;
  if (request instanceof HttpUriRequest) {
    requestURI=((HttpUriRequest)request).getURI();
  }
 else {
    try {
      requestURI=new URI(request.getRequestLine().getUri());
    }
 catch (    URISyntaxException ex) {
      throw new ProtocolException("Invalid request URI: " + request.getRequestLine().getUri(),ex);
    }
  }
  String hostName=targetHost.getHostName();
  int port=targetHost.getPort();
  if (port < 0) {
    port=conn.getRemotePort();
  }
  CookieOrigin cookieOrigin=new CookieOrigin(hostName,port,requestURI.getPath(),conn.isSecure());
  CookieSpec cookieSpec=registry.getCookieSpec(policy,request.getParams());
  List<Cookie> cookies=new ArrayList<Cookie>(cookieStore.getCookies());
  List<Cookie> matchedCookies=new ArrayList<Cookie>();
  for (  Cookie cookie : cookies) {
    if (cookieSpec.match(cookie,cookieOrigin)) {
      if (this.log.isDebugEnabled()) {
        this.log.debug("Cookie " + cookie + " match "+ cookieOrigin);
      }
      matchedCookies.add(cookie);
    }
  }
  if (!matchedCookies.isEmpty()) {
    List<Header> headers=cookieSpec.formatCookies(matchedCookies);
    for (    Header header : headers) {
      request.addHeader(header);
    }
  }
  int ver=cookieSpec.getVersion();
  if (ver > 0) {
    boolean needVersionHeader=false;
    for (    Cookie cookie : matchedCookies) {
      if (ver != cookie.getVersion()) {
        needVersionHeader=true;
      }
    }
    if (needVersionHeader) {
      Header header=cookieSpec.getVersionHeader();
      if (header != null) {
        request.addHeader(header);
      }
    }
  }
  context.setAttribute(ClientContext.COOKIE_SPEC,cookieSpec);
  context.setAttribute(ClientContext.COOKIE_ORIGIN,cookieOrigin);
}

import os
if (__name__ == '__main__'):
    output = open('debugger_message.proto', 'w')
    output.write('/*\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// do not edit; auto generated by generate_debugger_message_proto.py\n\npackage com.android.glesv2debugger;\n\noption optimize_for = LITE_RUNTIME;\n\nmessage Message\n{\n    required int32 context_id = 1; // GL context id\n    enum Function\n    {\n')
    i = 0
    lines = open('gl2_api_annotated.in').readlines()
    i = generate_gl_entries(output, lines, i)
    output.write('        // end of GL functions\n')
    lines = open('../EGL/egl_entries.in').readlines()
    i = generate_egl_entries(output, lines, i)
    output.write('        // end of GL EXT functions\n')
    output.write(('        ACK = %d;\n' % i))
    i += 1
    output.write(('        NEG = %d;\n' % i))
    i += 1
    output.write(('        CONTINUE = %d;\n' % i))
    i += 1
    output.write(('        SKIP = %d;\n' % i))
    i += 1
    output.write(('        SETPROP = %d;\n' % i))
    i += 1
    output.write('    }\n    required Function function = 2 [default = NEG]; // type/function of message\n    enum Type\n    {\n        BeforeCall = 0;\n        AfterCall = 1;\n        AfterGeneratedCall = 2;\n        Response = 3; // currently used for misc messages\n        CompleteCall = 4; // BeforeCall and AfterCall merged\n    }\n    required Type type = 3;\n    required bool expect_response = 4;\n    optional int32 ret = 5; // return value from previous GL call\n    optional int32 arg0 = 6; // args to GL call\n    optional int32 arg1 = 7;\n    optional int32 arg2 = 8;\n    optional int32 arg3 = 9;\n    optional int32 arg4 = 16;\n    optional int32 arg5 = 17;\n    optional int32 arg6 = 18;\n    optional int32 arg7 = 19; // glDrawArrays/Elements sets this to active number of attributes\n    optional int32 arg8 = 20;\n\n    optional bytes data = 10; // variable length data used for GL call\n    enum DataType\n    {\n        ReferencedImage = 0; // for image sourced from ReadPixels\n        NonreferencedImage = 1; // for image sourced from ReadPixels\n    };\n    // most data types can be inferred from function\n    optional DataType data_type = 23;\n    // these are used for image data when they cannot be determined from args\n    optional int32 pixel_format = 24;\n    optional int32 pixel_type = 25;\n    optional int32 image_width = 26;\n    optional int32 image_height = 27;\n\n    optional float time = 11; // duration of previous GL call (ms)\n    enum Prop\n    {\n        CaptureDraw = 0; // arg0 = number of glDrawArrays/Elements to glReadPixels\n        TimeMode = 1; // arg0 = SYSTEM_TIME_* in utils/Timers.h\n        ExpectResponse = 2; // arg0 = enum Function, arg1 = true/false\n        CaptureSwap = 3; // arg0 = number of eglSwapBuffers to glReadPixels\n        GLConstant = 4; // arg0 = GLenum, arg1 = constant; send GL impl. constants\n    };\n    optional Prop prop = 21; // used with SETPROP, value in arg0\n    optional float clock = 22; // wall clock in seconds\n}\n')
    output.close()
    os.system('aprotoc --cpp_out=src --java_out=../../../../../development/tools/glesv2debugger/src debugger_message.proto')
    os.system('mv -f "src/debugger_message.pb.cc" "src/debugger_message.pb.cpp"')

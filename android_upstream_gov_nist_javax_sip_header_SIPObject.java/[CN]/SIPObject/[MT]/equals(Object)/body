{
  if (!this.getClass().equals(other.getClass()))   return false;
  SIPObject that=(SIPObject)other;
  Class myclass=this.getClass();
  Class hisclass=other.getClass();
  while (true) {
    Field[] fields=myclass.getDeclaredFields();
    if (!hisclass.equals(myclass))     return false;
    Field[] hisfields=hisclass.getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      Field f=fields[i];
      Field g=hisfields[i];
      int modifier=f.getModifiers();
      if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)       continue;
      Class fieldType=f.getType();
      String fieldName=f.getName();
      if (fieldName.compareTo("stringRepresentation") == 0) {
        continue;
      }
      if (fieldName.compareTo("indentation") == 0) {
        continue;
      }
      try {
        if (fieldType.isPrimitive()) {
          String fname=fieldType.toString();
          if (fname.compareTo("int") == 0) {
            if (f.getInt(this) != g.getInt(that))             return false;
          }
 else           if (fname.compareTo("short") == 0) {
            if (f.getShort(this) != g.getShort(that))             return false;
          }
 else           if (fname.compareTo("char") == 0) {
            if (f.getChar(this) != g.getChar(that))             return false;
          }
 else           if (fname.compareTo("long") == 0) {
            if (f.getLong(this) != g.getLong(that))             return false;
          }
 else           if (fname.compareTo("boolean") == 0) {
            if (f.getBoolean(this) != g.getBoolean(that))             return false;
          }
 else           if (fname.compareTo("double") == 0) {
            if (f.getDouble(this) != g.getDouble(that))             return false;
          }
 else           if (fname.compareTo("float") == 0) {
            if (f.getFloat(this) != g.getFloat(that))             return false;
          }
        }
 else         if (g.get(that) == f.get(this))         continue;
 else         if (f.get(this) == null && g.get(that) != null)         return false;
 else         if (g.get(that) == null && f.get(this) != null)         return false;
 else         if (!f.get(this).equals(g.get(that)))         return false;
      }
 catch (      IllegalAccessException ex1) {
        System.out.println("accessed field " + fieldName);
        System.out.println("modifier  " + modifier);
        System.out.println("modifier.private  " + Modifier.PRIVATE);
        InternalErrorHandler.handleException(ex1);
      }
    }
    if (myclass.equals(SIPObject.class))     break;
 else {
      myclass=myclass.getSuperclass();
      hisclass=hisclass.getSuperclass();
    }
  }
  return true;
}

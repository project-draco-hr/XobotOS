def output_xhtml(lines, oldest_revision, newest_revision, regressions, requested_width, requested_height, title):
    'Outputs an svg/xhtml view of the data.'
    print '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"',
    print '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
    print '<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">'
    print '<head>'
    print ('<title>%s</title>' % title)
    print '</head>'
    print '<body>'
    output_svg(lines, regressions, requested_width, requested_height)
    print '\n<script type="text/javascript">//<![CDATA[\n    function getElementsByClass(node, searchClass, tag) {\n        var classElements = new Array();\n        var elements = node.getElementsByTagName(tag);\n        var pattern = new RegExp("^|\\s"+searchClass+"\\s|$");\n        for (var i = 0, elementsFound = 0; i < elements.length; ++i) {\n            if (pattern.test(elements[i].className)) {\n                classElements[elementsFound] = elements[i];\n                ++elementsFound;\n            }\n        }\n        return classElements;\n    }\n    function getAllLines() {\n        var selectElem = document.getElementById(\'benchSelect\');\n        var linesObj = {};\n        for (var i = 0; i < selectElem.options.length; ++i) {\n            var lines = JSON.parse(selectElem.options[i].value);\n            for (var j = 0; j < lines.length; ++j) {\n                linesObj[lines[j]] = true;\n            }\n        }\n        return linesObj;\n    }\n    function getOptions(selectElem) {\n        var linesSelectedObj = {};\n        for (var i = 0; i < selectElem.options.length; ++i) {\n            if (!selectElem.options[i].selected) continue;\n            \n            var linesSelected = JSON.parse(selectElem.options[i].value);\n            for (var j = 0; j < linesSelected.length; ++j) {\n                linesSelectedObj[linesSelected[j]] = true;\n            }\n        }\n        return linesSelectedObj;\n    }\n    function objectEmpty(obj) {\n        for (var p in obj) {\n            return false;\n        }\n        return true;\n    }\n    function markSelectedLines(selectElem, allLines) {\n        var linesSelected = getOptions(selectElem);\n        if (!objectEmpty(linesSelected)) {\n            for (var line in allLines) {\n                allLines[line] &= (linesSelected[line] == true);\n            }\n        }\n    }\n    function updateSvg() {\n        var allLines = getAllLines();\n        \n        var selects = getElementsByClass(document, \'lines\', \'select\');\n        for (var i = 0; i < selects.length; ++i) {\n            markSelectedLines(selects[i], allLines);\n        }\n        \n        for (var line in allLines) {\n            var svgLine = document.getElementById(line);\n            var display = (allLines[line] ? \'inline\' : \'none\');\n            svgLine.setAttributeNS(null,\'display\', display);\n        }\n    }\n    \n    function mark(markerId) {\n        for (var line in getAllLines()) {\n            var svgLineGroup = document.getElementById(line);\n            var display = svgLineGroup.getAttributeNS(null,\'display\');\n            if (display == null || display == "" || display != "none") {\n                var svgLine = document.getElementById(line+\'_line\');\n                if (markerId == null) {\n                    svgLine.removeAttributeNS(null,\'marker-mid\');\n                } else {\n                    svgLine.setAttributeNS(null,\'marker-mid\', markerId);\n                }\n            }\n        }\n    }\n//]]></script>'
    print ('<table border="0" width="%s">' % requested_width)
    print '\n<form>\n<tr valign="bottom" align="center">\n<td width="1">Bench&nbsp;Type</td>\n<td width="1">Bitmap Config</td>\n<td width="1">Timer&nbsp;Type (Cpu/Gpu/wall)</td>\n<td width="1"><!--buttons--></td>\n<td width="10%"><!--spacing--></td>'
    print ('<td>%s<br></br>revisions r%s - r%s</td>' % (title, bench_util.CreateRevisionLink(oldest_revision), bench_util.CreateRevisionLink(newest_revision)))
    print '</tr><tr valign="top" align="center">'
    print '<td width="1">'
    create_select((lambda l: l.bench), lines, 'benchSelect')
    print '</td><td width="1">'
    create_select((lambda l: l.config), lines)
    print '</td><td width="1">'
    create_select((lambda l: l.time_type), lines)
    all_settings = {}
    variant_settings = set()
    for label in lines.keys():
        for (key, value) in label.settings.items():
            if (key not in all_settings):
                all_settings[key] = value
            elif (all_settings[key] != value):
                variant_settings.add(key)
    for k in variant_settings:
        create_select((lambda l: l.settings[k]), lines)
    print '</td><td width="1"><button type="button"',
    print ('onclick=%s' % qa("mark('url(#circleMark)'); return false;")),
    print '>Mark Points</button>'
    print '<button type="button" onclick="mark(null);">Clear Points</button>'
    print '\n</td>\n<td width="10%"></td>\n<td align="left">\n<p>Brighter red indicates tests that have gotten worse; brighter green\nindicates tests that have gotten better.</p>\n<p>To highlight individual tests, hold down CONTROL and mouse over\ngraph lines.</p>\n<p>To highlight revision numbers, hold down SHIFT and mouse over\nthe graph area.</p>\n<p>To only show certain tests on the graph, select any combination of\ntests in the selectors at left.  (To show all, select all.)</p>\n<p>Use buttons at left to mark/clear points on the lines for selected\nbenchmarks.</p>\n</td>\n</tr>\n</form>\n</table>\n</body>\n</html>'

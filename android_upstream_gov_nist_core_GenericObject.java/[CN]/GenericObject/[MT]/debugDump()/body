{
  stringRepresentation="";
  Class<?> myclass=getClass();
  sprint(myclass.getName());
  sprint("{");
  Field[] fields=myclass.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field f=fields[i];
    int modifier=f.getModifiers();
    if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)     continue;
    Class<?> fieldType=f.getType();
    String fieldName=f.getName();
    if (fieldName.compareTo("stringRepresentation") == 0) {
      continue;
    }
    if (fieldName.compareTo("indentation") == 0) {
      continue;
    }
    sprint(fieldName + ":");
    try {
      if (fieldType.isPrimitive()) {
        String fname=fieldType.toString();
        sprint(fname + ":");
        if (fname.compareTo("int") == 0) {
          int intfield=f.getInt(this);
          sprint(intfield);
        }
 else         if (fname.compareTo("short") == 0) {
          short shortField=f.getShort(this);
          sprint(shortField);
        }
 else         if (fname.compareTo("char") == 0) {
          char charField=f.getChar(this);
          sprint(charField);
        }
 else         if (fname.compareTo("long") == 0) {
          long longField=f.getLong(this);
          sprint(longField);
        }
 else         if (fname.compareTo("boolean") == 0) {
          boolean booleanField=f.getBoolean(this);
          sprint(booleanField);
        }
 else         if (fname.compareTo("double") == 0) {
          double doubleField=f.getDouble(this);
          sprint(doubleField);
        }
 else         if (fname.compareTo("float") == 0) {
          float floatField=f.getFloat(this);
          sprint(floatField);
        }
      }
 else       if (GenericObject.class.isAssignableFrom(fieldType)) {
        if (f.get(this) != null) {
          sprint(((GenericObject)f.get(this)).debugDump(indentation + 1));
        }
 else {
          sprint("<null>");
        }
      }
 else       if (GenericObjectList.class.isAssignableFrom(fieldType)) {
        if (f.get(this) != null) {
          sprint(((GenericObjectList)f.get(this)).debugDump(indentation + 1));
        }
 else {
          sprint("<null>");
        }
      }
 else {
        if (f.get(this) != null) {
          sprint(f.get(this).getClass().getName() + ":");
        }
 else {
          sprint(fieldType.getName() + ":");
        }
        sprint("{");
        if (f.get(this) != null) {
          sprint(f.get(this).toString());
        }
 else {
          sprint("<null>");
        }
        sprint("}");
      }
    }
 catch (    IllegalAccessException ex1) {
      continue;
    }
catch (    Exception ex) {
      InternalErrorHandler.handleException(ex);
    }
  }
  sprint("}");
  return stringRepresentation;
}

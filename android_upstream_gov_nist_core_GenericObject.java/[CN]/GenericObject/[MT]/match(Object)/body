{
  if (other == null)   return true;
  if (!this.getClass().equals(other.getClass()))   return false;
  GenericObject that=(GenericObject)other;
  Class<?> myclass=this.getClass();
  Field[] fields=myclass.getDeclaredFields();
  Class<?> hisclass=other.getClass();
  Field[] hisfields=hisclass.getDeclaredFields();
  for (int i=0; i < fields.length; i++) {
    Field f=fields[i];
    Field g=hisfields[i];
    int modifier=f.getModifiers();
    if ((modifier & Modifier.PRIVATE) == Modifier.PRIVATE)     continue;
    Class<?> fieldType=f.getType();
    String fieldName=f.getName();
    if (fieldName.compareTo("stringRepresentation") == 0) {
      continue;
    }
    if (fieldName.compareTo("indentation") == 0) {
      continue;
    }
    try {
      if (fieldType.isPrimitive()) {
        String fname=fieldType.toString();
        if (fname.compareTo("int") == 0) {
          if (f.getInt(this) != g.getInt(that))           return false;
        }
 else         if (fname.compareTo("short") == 0) {
          if (f.getShort(this) != g.getShort(that))           return false;
        }
 else         if (fname.compareTo("char") == 0) {
          if (f.getChar(this) != g.getChar(that))           return false;
        }
 else         if (fname.compareTo("long") == 0) {
          if (f.getLong(this) != g.getLong(that))           return false;
        }
 else         if (fname.compareTo("boolean") == 0) {
          if (f.getBoolean(this) != g.getBoolean(that))           return false;
        }
 else         if (fname.compareTo("double") == 0) {
          if (f.getDouble(this) != g.getDouble(that))           return false;
        }
 else         if (fname.compareTo("float") == 0) {
          if (f.getFloat(this) != g.getFloat(that))           return false;
        }
      }
 else {
        Object myObj=f.get(this);
        Object hisObj=g.get(that);
        if (hisObj != null && myObj == null)         return false;
 else         if (hisObj == null && myObj != null)         continue;
 else         if (hisObj == null && myObj == null)         continue;
 else         if (hisObj instanceof java.lang.String && myObj instanceof java.lang.String) {
          if ((((String)hisObj).trim()).equals(""))           continue;
          if (((String)myObj).compareToIgnoreCase((String)hisObj) != 0)           return false;
        }
 else         if (GenericObject.isMySubclass(myObj.getClass()) && !((GenericObject)myObj).match(hisObj))         return false;
 else         if (GenericObjectList.isMySubclass(myObj.getClass()) && !((GenericObjectList)myObj).match(hisObj))         return false;
      }
    }
 catch (    IllegalAccessException ex1) {
      InternalErrorHandler.handleException(ex1);
    }
  }
  return true;
}

{
  Date deadline=null;
  if (timeout > 0) {
    deadline=new Date(System.currentTimeMillis() + tunit.toMillis(timeout));
  }
  BasicPoolEntry entry=null;
  poolLock.lock();
  try {
    RouteSpecificPool rospl=getRoutePool(route,true);
    WaitingThread waitingThread=null;
    while (entry == null) {
      if (isShutDown) {
        throw new IllegalStateException("Connection pool shut down.");
      }
      if (log.isDebugEnabled()) {
        log.debug("Total connections kept alive: " + freeConnections.size());
        log.debug("Total issued connections: " + issuedConnections.size());
        log.debug("Total allocated connection: " + numConnections + " out of "+ maxTotalConnections);
      }
      entry=getFreeEntry(rospl,state);
      if (entry != null) {
        break;
      }
      boolean hasCapacity=rospl.getCapacity() > 0;
      if (log.isDebugEnabled()) {
        log.debug("Available capacity: " + rospl.getCapacity() + " out of "+ rospl.getMaxEntries()+ " ["+ route+ "]["+ state+ "]");
      }
      if (hasCapacity && numConnections < maxTotalConnections) {
        entry=createEntry(rospl,operator);
      }
 else       if (hasCapacity && !freeConnections.isEmpty()) {
        deleteLeastUsedEntry();
        entry=createEntry(rospl,operator);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug("Need to wait for connection" + " [" + route + "]["+ state+ "]");
        }
        if (waitingThread == null) {
          waitingThread=newWaitingThread(poolLock.newCondition(),rospl);
          aborter.setWaitingThread(waitingThread);
        }
        boolean success=false;
        try {
          rospl.queueThread(waitingThread);
          waitingThreads.add(waitingThread);
          success=waitingThread.await(deadline);
        }
  finally {
          rospl.removeThread(waitingThread);
          waitingThreads.remove(waitingThread);
        }
        if (!success && (deadline != null) && (deadline.getTime() <= System.currentTimeMillis())) {
          throw new ConnectionPoolTimeoutException("Timeout waiting for connection");
        }
      }
    }
  }
  finally {
    poolLock.unlock();
  }
  return entry;
}

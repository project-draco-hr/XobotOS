{
  checkRange(fromIndex,toIndex);
  int last=64 * longCount;
  if (fromIndex >= last || fromIndex == toIndex) {
    return new BitSet(0);
  }
  if (toIndex > last) {
    toIndex=last;
  }
  int firstArrayIndex=fromIndex / 64;
  int lastArrayIndex=(toIndex - 1) / 64;
  long lowMask=ALL_ONES << fromIndex;
  long highMask=ALL_ONES >>> -toIndex;
  if (firstArrayIndex == lastArrayIndex) {
    long result=(bits[firstArrayIndex] & (lowMask & highMask)) >>> fromIndex;
    if (result == 0) {
      return new BitSet(0);
    }
    return new BitSet(new long[]{result});
  }
  long[] newBits=new long[lastArrayIndex - firstArrayIndex + 1];
  newBits[0]=bits[firstArrayIndex] & lowMask;
  newBits[newBits.length - 1]=bits[lastArrayIndex] & highMask;
  for (int i=1; i < lastArrayIndex - firstArrayIndex; i++) {
    newBits[i]=bits[firstArrayIndex + i];
  }
  int numBitsToShift=fromIndex % 64;
  int actualLen=newBits.length;
  if (numBitsToShift != 0) {
    for (int i=0; i < newBits.length; i++) {
      newBits[i]=newBits[i] >>> (numBitsToShift);
      if (i != newBits.length - 1) {
        newBits[i]|=newBits[i + 1] << -numBitsToShift;
      }
      if (newBits[i] != 0) {
        actualLen=i + 1;
      }
    }
  }
  return new BitSet(newBits);
}

'\nSCons generator.\n\nThis contains class definitions and supporting functions for generating\npieces of SCons files for the different types of GYP targets.\n'
import os
compilable_sources_template = "\n_result = []\nfor infile in input_files:\n  if env.compilable(infile):\n    if (type(infile) == type('')\n        and (infile.startswith(%(src_dir)r)\n             or not os.path.isabs(env.subst(infile)))):\n      # Force files below the build directory by replacing all '..'\n      # elements in the path with '__':\n      base, ext = os.path.splitext(os.path.normpath(infile))\n      base = [d == '..' and '__' or d for d in base.split('/')]\n      base = os.path.join(*base)\n      object = '${OBJ_DIR}/${COMPONENT_NAME}/${TARGET_NAME}/' + base\n      if not infile.startswith(%(src_dir)r):\n        infile = %(src_dir)r + infile\n      infile = env.%(name)s(object, infile)[0]\n    else:\n      infile = env.%(name)s(infile)[0]\n  _result.append(infile)\ninput_files = _result\n"
TargetMap = {None: NoneTarget, 'none': NoneTarget, 'settings': SettingsTarget, 'executable': ProgramTarget, 'static_library': StaticLibraryTarget, 'shared_library': SharedLibraryTarget, 'loadable_module': LoadableModuleTarget, }

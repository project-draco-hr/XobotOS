{
  return new Iterable<T>(){
    public Iterator<T> iterator(){
      return new Iterator<T>(){
        private final Iterator<? extends Reference<T>> delegate=iterable.iterator();
        private boolean removeIsOkay;
        private T next;
        private void computeNext(){
          removeIsOkay=false;
          while (next == null && delegate.hasNext()) {
            next=delegate.next().get();
            if (trim && next == null) {
              delegate.remove();
            }
          }
        }
        @Override public boolean hasNext(){
          computeNext();
          return next != null;
        }
        @Override public T next(){
          if (!hasNext()) {
            throw new IllegalStateException();
          }
          T result=next;
          removeIsOkay=true;
          next=null;
          return result;
        }
        public void remove(){
          if (!removeIsOkay) {
            throw new IllegalStateException();
          }
          delegate.remove();
        }
      }
;
    }
  }
;
}

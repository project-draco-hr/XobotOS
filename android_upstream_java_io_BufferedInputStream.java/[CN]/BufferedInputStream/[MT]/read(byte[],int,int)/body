{
  byte[] localBuf=buf;
  if (localBuf == null) {
    throw streamClosed();
  }
  Arrays.checkOffsetAndCount(buffer.length,offset,byteCount);
  if (byteCount == 0) {
    return 0;
  }
  InputStream localIn=in;
  if (localIn == null) {
    throw streamClosed();
  }
  int required;
  if (pos < count) {
    int copylength=count - pos >= byteCount ? byteCount : count - pos;
    System.arraycopy(localBuf,pos,buffer,offset,copylength);
    pos+=copylength;
    if (copylength == byteCount || localIn.available() == 0) {
      return copylength;
    }
    offset+=copylength;
    required=byteCount - copylength;
  }
 else {
    required=byteCount;
  }
  while (true) {
    int read;
    if (markpos == -1 && required >= localBuf.length) {
      read=localIn.read(buffer,offset,required);
      if (read == -1) {
        return required == byteCount ? -1 : byteCount - required;
      }
    }
 else {
      if (fillbuf(localIn,localBuf) == -1) {
        return required == byteCount ? -1 : byteCount - required;
      }
      if (localBuf != buf) {
        localBuf=buf;
        if (localBuf == null) {
          throw streamClosed();
        }
      }
      read=count - pos >= required ? required : count - pos;
      System.arraycopy(localBuf,pos,buffer,offset,read);
      pos+=read;
    }
    required-=read;
    if (required == 0) {
      return byteCount;
    }
    if (localIn.available() == 0) {
      return byteCount - required;
    }
    offset+=read;
  }
}

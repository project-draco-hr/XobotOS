{
  if (!isConnected) {
    throw new IOException("Pipe not connected");
  }
  if (this.buffer == null) {
    throw new IOException("Pipe is closed");
  }
  Arrays.checkOffsetAndCount(buffer.length,offset,count);
  if (count == 0) {
    return 0;
  }
  lastReader=Thread.currentThread();
  try {
    boolean first=true;
    while (in == -1) {
      if (isClosed) {
        return -1;
      }
      if (!first && lastWriter != null && !lastWriter.isAlive()) {
        throw new IOException("Pipe broken");
      }
      first=false;
      notifyAll();
      wait(1000);
    }
  }
 catch (  InterruptedException e) {
    throw new InterruptedIOException();
  }
  int copyLength=0;
  if (out >= in) {
    copyLength=count > this.buffer.length - out ? this.buffer.length - out : count;
    System.arraycopy(this.buffer,out,buffer,offset,copyLength);
    out+=copyLength;
    if (out == this.buffer.length) {
      out=0;
    }
    if (out == in) {
      in=-1;
      out=0;
    }
  }
  if (copyLength == count || in == -1) {
    return copyLength;
  }
  int charsCopied=copyLength;
  copyLength=in - out > count - copyLength ? count - copyLength : in - out;
  System.arraycopy(this.buffer,out,buffer,offset + charsCopied,copyLength);
  out+=copyLength;
  if (out == in) {
    in=-1;
    out=0;
  }
  return charsCopied + copyLength;
}

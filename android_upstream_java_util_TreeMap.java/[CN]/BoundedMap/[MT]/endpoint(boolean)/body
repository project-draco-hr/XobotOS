{
  Node<K,V> node;
  if (ascending == first) {
switch (fromBound) {
case NO_BOUND:
      node=root == null ? null : root.first();
    break;
case INCLUSIVE:
  node=find(from,CEILING);
break;
case EXCLUSIVE:
node=find(from,HIGHER);
break;
default :
throw new AssertionError();
}
return bound(node,NO_BOUND,toBound);
}
 else {
switch (toBound) {
case NO_BOUND:
node=root == null ? null : root.last();
break;
case INCLUSIVE:
node=find(to,FLOOR);
break;
case EXCLUSIVE:
node=find(to,LOWER);
break;
default :
throw new AssertionError();
}
return bound(node,fromBound,NO_BOUND);
}
}

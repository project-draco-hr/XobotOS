{
  CSBlock block=new CSBlock();
  final CSExpression lengthRef=new CSMemberReferenceExpression(arg.getReference(),"Length");
  final CSExpression zero=new CSNumberLiteralExpression("0");
  final CSExpression baseSize=NATIVE_SIZE.expr();
  final CSExpression elementSize=getNativeElementSizeExpr();
  block.addStatement(new CSInfixExpression("=",getReference(obj),new CSInfixExpression("+",ptr.getReference(),baseSize)));
  if (isBlittable()) {
    CSExpression copyRef=new CSReferenceExpression("Marshal.Copy");
    block.addStatement(new CSMethodInvocationExpression(copyRef,arg.getReference(),zero,getReference(obj),lengthRef));
    return block;
  }
  ManagedVariable i=new ManagedVariable("i",new CSTypeReference("int"));
  i.getDeclaration().initializer(zero);
  CSExpression check=new CSInfixExpression("<",i.getReference(),lengthRef);
  CSForStatement forStm=new CSForStatement(-1,check);
  forStm.addInitializer(new CSDeclarationExpression(i.getDeclaration()));
  forStm.addUpdater(new CSPostfixExpression("++",i.getReference()));
  final CSExpression expr=new CSIndexedExpression(arg.getReference(),i.getReference());
  final CSTypeReference intPtrType=new CSTypeReference("System.IntPtr");
  if (isByRef()) {
    ManagedVariable vector=new ManagedVariable("vector",new CSArrayTypeReference(intPtrType,1),new CSArrayCreationExpression(intPtrType,lengthRef));
    block.addStatement(vector.getDeclarationStatement());
    block.addStatement(forStm);
    CSExpression idx=new CSIndexedExpression(vector.getReference(),i.getReference());
    forStm.body().addStatement(new CSInfixExpression("=",idx,new CSMethodInvocationExpression(getHelper().MANAGED_TO_NATIVE.expr(),expr)));
    CSExpression copyRef=new CSReferenceExpression("Marshal.Copy");
    block.addStatement(new CSMethodInvocationExpression(copyRef,vector.getReference(),zero,getReference(obj),lengthRef));
  }
 else {
    ManagedVariable addr=new ManagedVariable("addr",intPtrType,getReference(obj));
    block.addStatement(addr.getDeclarationStatement());
    block.addStatement(forStm);
    forStm.addUpdater(new CSInfixExpression("+=",addr.getReference(),elementSize));
    forStm.body().addStatement(marshalIn(addr.getReference(),expr));
  }
  return block;
}

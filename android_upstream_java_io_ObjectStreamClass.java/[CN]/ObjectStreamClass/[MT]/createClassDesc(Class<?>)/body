{
  ObjectStreamClass result=new ObjectStreamClass();
  boolean isArray=cl.isArray();
  boolean serializable=isSerializable(cl);
  boolean externalizable=isExternalizable(cl);
  result.isSerializable=serializable;
  result.isExternalizable=externalizable;
  result.setName(cl.getName());
  result.setClass(cl);
  Class<?> superclass=cl.getSuperclass();
  if (superclass != null) {
    result.setSuperclass(lookup(superclass));
  }
  Field[] declaredFields=null;
  if (serializable || externalizable) {
    if (result.isEnum() || result.isProxy()) {
      result.setSerialVersionUID(0L);
    }
 else {
      declaredFields=cl.getDeclaredFields();
      result.setSerialVersionUID(computeSerialVersionUID(cl,declaredFields));
    }
  }
  if (serializable && !isArray) {
    if (declaredFields == null) {
      declaredFields=cl.getDeclaredFields();
    }
    result.buildFieldDescriptors(declaredFields);
  }
 else {
    result.setFields(NO_FIELDS);
  }
  ObjectStreamField[] fields=result.getFields();
  if (fields != null) {
    ObjectStreamField[] loadFields=new ObjectStreamField[fields.length];
    for (int i=0; i < fields.length; ++i) {
      loadFields[i]=new ObjectStreamField(fields[i].getName(),fields[i].getType(),fields[i].isUnshared());
      loadFields[i].getTypeString();
    }
    result.setLoadFields(loadFields);
  }
  byte flags=0;
  if (externalizable) {
    flags|=ObjectStreamConstants.SC_EXTERNALIZABLE;
    flags|=ObjectStreamConstants.SC_BLOCK_DATA;
  }
 else   if (serializable) {
    flags|=ObjectStreamConstants.SC_SERIALIZABLE;
  }
  result.methodWriteReplace=findMethod(cl,"writeReplace");
  result.methodReadResolve=findMethod(cl,"readResolve");
  result.methodWriteObject=findPrivateMethod(cl,"writeObject",WRITE_PARAM_TYPES);
  result.methodReadObject=findPrivateMethod(cl,"readObject",READ_PARAM_TYPES);
  result.methodReadObjectNoData=findPrivateMethod(cl,"readObjectNoData",EmptyArray.CLASS);
  if (result.hasMethodWriteObject()) {
    flags|=ObjectStreamConstants.SC_WRITE_METHOD;
  }
  result.setFlags(flags);
  return result;
}

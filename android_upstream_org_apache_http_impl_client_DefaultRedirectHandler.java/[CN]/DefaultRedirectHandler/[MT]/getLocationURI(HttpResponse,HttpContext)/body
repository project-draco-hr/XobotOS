{
  if (response == null) {
    throw new IllegalArgumentException("HTTP response may not be null");
  }
  Header locationHeader=response.getFirstHeader("location");
  if (locationHeader == null) {
    throw new ProtocolException("Received redirect response " + response.getStatusLine() + " but no location header");
  }
  String location=locationHeader.getValue();
  if (this.log.isDebugEnabled()) {
    this.log.debug("Redirect requested to location '" + location + "'");
  }
  URI uri;
  try {
    uri=new URI(location);
  }
 catch (  URISyntaxException ex) {
    throw new ProtocolException("Invalid redirect URI: " + location,ex);
  }
  HttpParams params=response.getParams();
  if (!uri.isAbsolute()) {
    if (params.isParameterTrue(ClientPNames.REJECT_RELATIVE_REDIRECT)) {
      throw new ProtocolException("Relative redirect location '" + uri + "' not allowed");
    }
    HttpHost target=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);
    if (target == null) {
      throw new IllegalStateException("Target host not available " + "in the HTTP context");
    }
    HttpRequest request=(HttpRequest)context.getAttribute(ExecutionContext.HTTP_REQUEST);
    try {
      URI requestURI=new URI(request.getRequestLine().getUri());
      URI absoluteRequestURI=URIUtils.rewriteURI(requestURI,target,true);
      uri=URIUtils.resolve(absoluteRequestURI,uri);
    }
 catch (    URISyntaxException ex) {
      throw new ProtocolException(ex.getMessage(),ex);
    }
  }
  if (params.isParameterFalse(ClientPNames.ALLOW_CIRCULAR_REDIRECTS)) {
    RedirectLocations redirectLocations=(RedirectLocations)context.getAttribute(REDIRECT_LOCATIONS);
    if (redirectLocations == null) {
      redirectLocations=new RedirectLocations();
      context.setAttribute(REDIRECT_LOCATIONS,redirectLocations);
    }
    URI redirectURI;
    if (uri.getFragment() != null) {
      try {
        HttpHost target=new HttpHost(uri.getHost(),uri.getPort(),uri.getScheme());
        redirectURI=URIUtils.rewriteURI(uri,target,true);
      }
 catch (      URISyntaxException ex) {
        throw new ProtocolException(ex.getMessage(),ex);
      }
    }
 else {
      redirectURI=uri;
    }
    if (redirectLocations.contains(redirectURI)) {
      throw new CircularRedirectException("Circular redirect to '" + redirectURI + "'");
    }
 else {
      redirectLocations.add(redirectURI);
    }
  }
  return uri;
}

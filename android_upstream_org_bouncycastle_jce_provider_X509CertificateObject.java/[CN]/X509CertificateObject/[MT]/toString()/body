{
  StringBuffer buf=new StringBuffer();
  String nl=System.getProperty("line.separator");
  buf.append("  [0]         Version: ").append(this.getVersion()).append(nl);
  buf.append("         SerialNumber: ").append(this.getSerialNumber()).append(nl);
  buf.append("             IssuerDN: ").append(this.getIssuerDN()).append(nl);
  buf.append("           Start Date: ").append(this.getNotBefore()).append(nl);
  buf.append("           Final Date: ").append(this.getNotAfter()).append(nl);
  buf.append("            SubjectDN: ").append(this.getSubjectDN()).append(nl);
  buf.append("           Public Key: ").append(this.getPublicKey()).append(nl);
  buf.append("  Signature Algorithm: ").append(this.getSigAlgName()).append(nl);
  byte[] sig=this.getSignature();
  buf.append("            Signature: ").append(new String(Hex.encode(sig,0,20))).append(nl);
  for (int i=20; i < sig.length; i+=20) {
    if (i < sig.length - 20) {
      buf.append("                       ").append(new String(Hex.encode(sig,i,20))).append(nl);
    }
 else {
      buf.append("                       ").append(new String(Hex.encode(sig,i,sig.length - i))).append(nl);
    }
  }
  X509Extensions extensions=c.getTBSCertificate().getExtensions();
  if (extensions != null) {
    Enumeration e=extensions.oids();
    if (e.hasMoreElements()) {
      buf.append("       Extensions: \n");
    }
    while (e.hasMoreElements()) {
      DERObjectIdentifier oid=(DERObjectIdentifier)e.nextElement();
      X509Extension ext=extensions.getExtension(oid);
      if (ext.getValue() != null) {
        byte[] octs=ext.getValue().getOctets();
        ASN1InputStream dIn=new ASN1InputStream(octs);
        buf.append("                       critical(").append(ext.isCritical()).append(") ");
        try {
          if (oid.equals(X509Extensions.BasicConstraints)) {
            buf.append(new BasicConstraints((ASN1Sequence)dIn.readObject())).append(nl);
          }
 else           if (oid.equals(X509Extensions.KeyUsage)) {
            buf.append(new KeyUsage((DERBitString)dIn.readObject())).append(nl);
          }
 else           if (oid.equals(MiscObjectIdentifiers.netscapeCertType)) {
            buf.append(new NetscapeCertType((DERBitString)dIn.readObject())).append(nl);
          }
 else           if (oid.equals(MiscObjectIdentifiers.netscapeRevocationURL)) {
            buf.append(new NetscapeRevocationURL((DERIA5String)dIn.readObject())).append(nl);
          }
 else           if (oid.equals(MiscObjectIdentifiers.verisignCzagExtension)) {
            buf.append(new VerisignCzagExtension((DERIA5String)dIn.readObject())).append(nl);
          }
 else {
            buf.append(oid.getId());
            buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);
          }
        }
 catch (        Exception ex) {
          buf.append(oid.getId());
          buf.append(" value = ").append("*****").append(nl);
        }
      }
 else {
        buf.append(nl);
      }
    }
  }
  return buf.toString();
}

{
  int x2=BytesTo32Bits(src,srcIndex) ^ gSubKeys[OUTPUT_WHITEN];
  int x3=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[OUTPUT_WHITEN + 1];
  int x0=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[OUTPUT_WHITEN + 2];
  int x1=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[OUTPUT_WHITEN + 3];
  int k=ROUND_SUBKEYS + 2 * ROUNDS - 1;
  int t0, t1;
  for (int r=0; r < ROUNDS; r+=2) {
    t0=Fe32_0(x2);
    t1=Fe32_3(x3);
    x1^=t0 + 2 * t1 + gSubKeys[k--];
    x0=(x0 << 1 | x0 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);
    x1=x1 >>> 1 | x1 << 31;
    t0=Fe32_0(x0);
    t1=Fe32_3(x1);
    x3^=t0 + 2 * t1 + gSubKeys[k--];
    x2=(x2 << 1 | x2 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);
    x3=x3 >>> 1 | x3 << 31;
  }
  Bits32ToBytes(x0 ^ gSubKeys[INPUT_WHITEN],dst,dstIndex);
  Bits32ToBytes(x1 ^ gSubKeys[INPUT_WHITEN + 1],dst,dstIndex + 4);
  Bits32ToBytes(x2 ^ gSubKeys[INPUT_WHITEN + 2],dst,dstIndex + 8);
  Bits32ToBytes(x3 ^ gSubKeys[INPUT_WHITEN + 3],dst,dstIndex + 12);
}

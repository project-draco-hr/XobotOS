{
  if (in.readUint8() != 1) {
    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello");
  }
  client_version=new byte[2];
  client_version[0]=(byte)in.readUint8();
  client_version[1]=(byte)in.readUint8();
  int cipher_spec_length=in.readUint16();
  if (in.readUint16() != 0) {
    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, cannot be used for resuming");
  }
  int challenge_length=in.readUint16();
  if (challenge_length < 16) {
    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, short challenge data");
  }
  session_id=EmptyArray.BYTE;
  cipher_suites=new CipherSuite[cipher_spec_length / 3];
  for (int i=0; i < cipher_suites.length; i++) {
    byte b0=(byte)in.read();
    byte b1=(byte)in.read();
    byte b2=(byte)in.read();
    cipher_suites[i]=CipherSuite.getByCode(b0,b1,b2);
  }
  compression_methods=new byte[]{0};
  if (challenge_length < 32) {
    Arrays.fill(random,0,32 - challenge_length,(byte)0);
    System.arraycopy(in.read(challenge_length),0,random,32 - challenge_length,challenge_length);
  }
 else   if (challenge_length == 32) {
    System.arraycopy(in.read(32),0,random,0,32);
  }
 else {
    System.arraycopy(in.read(challenge_length),challenge_length - 32,random,0,32);
  }
  if (in.available() > 0) {
    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, extra data");
  }
  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;
}

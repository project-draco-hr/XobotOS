{
switch (node.getNodeType()) {
case Node.ATTRIBUTE_NODE:
    AttrImpl attr=(AttrImpl)node;
  AttrImpl attrCopy;
if (attr.namespaceAware) {
  attrCopy=createAttributeNS(attr.getNamespaceURI(),attr.getLocalName());
  attrCopy.setPrefix(attr.getPrefix());
}
 else {
  attrCopy=createAttribute(attr.getName());
}
attrCopy.setNodeValue(attr.getValue());
return attrCopy;
case Node.CDATA_SECTION_NODE:
return createCDATASection(((CharacterData)node).getData());
case Node.COMMENT_NODE:
return createComment(((Comment)node).getData());
case Node.DOCUMENT_FRAGMENT_NODE:
return createDocumentFragment();
case Node.DOCUMENT_NODE:
case Node.DOCUMENT_TYPE_NODE:
throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Cannot copy node of type " + node.getNodeType());
case Node.ELEMENT_NODE:
ElementImpl element=(ElementImpl)node;
ElementImpl elementCopy;
if (element.namespaceAware) {
elementCopy=createElementNS(element.getNamespaceURI(),element.getLocalName());
elementCopy.setPrefix(element.getPrefix());
}
 else {
elementCopy=createElement(element.getTagName());
}
NamedNodeMap attributes=element.getAttributes();
for (int i=0; i < attributes.getLength(); i++) {
AttrImpl elementAttr=(AttrImpl)attributes.item(i);
AttrImpl elementAttrCopy=(AttrImpl)shallowCopy(operation,elementAttr);
notifyUserDataHandlers(operation,elementAttr,elementAttrCopy);
if (elementAttr.namespaceAware) {
elementCopy.setAttributeNodeNS(elementAttrCopy);
}
 else {
elementCopy.setAttributeNode(elementAttrCopy);
}
}
return elementCopy;
case Node.ENTITY_NODE:
case Node.NOTATION_NODE:
throw new UnsupportedOperationException();
case Node.ENTITY_REFERENCE_NODE:
return createEntityReference(node.getNodeName());
case Node.PROCESSING_INSTRUCTION_NODE:
ProcessingInstruction pi=(ProcessingInstruction)node;
return createProcessingInstruction(pi.getTarget(),pi.getData());
case Node.TEXT_NODE:
return createTextNode(((Text)node).getData());
default :
throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());
}
}

{
switch (option) {
case SocketOptions.IP_MULTICAST_IF:
    throw new UnsupportedOperationException("Use IP_MULTICAST_IF2 on Android");
case SocketOptions.IP_MULTICAST_IF2:
  Libcore.os.setsockoptIpMreqn(fd,IPPROTO_IP,IP_MULTICAST_IF,(Integer)value);
Libcore.os.setsockoptInt(fd,IPPROTO_IPV6,IPV6_MULTICAST_IF,(Integer)value);
return;
case SocketOptions.IP_MULTICAST_LOOP:
Libcore.os.setsockoptByte(fd,IPPROTO_IP,IP_MULTICAST_LOOP,booleanToInt((Boolean)value));
Libcore.os.setsockoptInt(fd,IPPROTO_IPV6,IPV6_MULTICAST_LOOP,booleanToInt((Boolean)value));
return;
case IoBridge.JAVA_IP_MULTICAST_TTL:
Libcore.os.setsockoptByte(fd,IPPROTO_IP,IP_MULTICAST_TTL,(Integer)value);
Libcore.os.setsockoptInt(fd,IPPROTO_IPV6,IPV6_MULTICAST_HOPS,(Integer)value);
return;
case SocketOptions.IP_TOS:
Libcore.os.setsockoptInt(fd,IPPROTO_IP,IP_TOS,(Integer)value);
Libcore.os.setsockoptInt(fd,IPPROTO_IPV6,IPV6_TCLASS,(Integer)value);
return;
case SocketOptions.SO_BROADCAST:
Libcore.os.setsockoptInt(fd,SOL_SOCKET,SO_BROADCAST,booleanToInt((Boolean)value));
return;
case SocketOptions.SO_KEEPALIVE:
Libcore.os.setsockoptInt(fd,SOL_SOCKET,SO_KEEPALIVE,booleanToInt((Boolean)value));
return;
case SocketOptions.SO_LINGER:
boolean on=false;
int seconds=0;
if (value instanceof Integer) {
on=true;
seconds=Math.min((Integer)value,65535);
}
StructLinger linger=new StructLinger(booleanToInt(on),seconds);
Libcore.os.setsockoptLinger(fd,SOL_SOCKET,SO_LINGER,linger);
return;
case SocketOptions.SO_OOBINLINE:
Libcore.os.setsockoptInt(fd,SOL_SOCKET,SO_OOBINLINE,booleanToInt((Boolean)value));
return;
case SocketOptions.SO_RCVBUF:
Libcore.os.setsockoptInt(fd,SOL_SOCKET,SO_RCVBUF,(Integer)value);
return;
case SocketOptions.SO_REUSEADDR:
Libcore.os.setsockoptInt(fd,SOL_SOCKET,SO_REUSEADDR,booleanToInt((Boolean)value));
return;
case SocketOptions.SO_SNDBUF:
Libcore.os.setsockoptInt(fd,SOL_SOCKET,SO_SNDBUF,(Integer)value);
return;
case SocketOptions.SO_TIMEOUT:
int millis=(Integer)value;
StructTimeval tv=StructTimeval.fromMillis(millis);
Libcore.os.setsockoptTimeval(fd,SOL_SOCKET,SO_RCVTIMEO,tv);
return;
case SocketOptions.TCP_NODELAY:
Libcore.os.setsockoptInt(fd,IPPROTO_TCP,TCP_NODELAY,booleanToInt((Boolean)value));
return;
case IoBridge.JAVA_MCAST_JOIN_GROUP:
case IoBridge.JAVA_MCAST_LEAVE_GROUP:
StructGroupReq groupReq=(StructGroupReq)value;
int level=(groupReq.gr_group instanceof Inet4Address) ? IPPROTO_IP : IPPROTO_IPV6;
int op=(option == JAVA_MCAST_JOIN_GROUP) ? MCAST_JOIN_GROUP : MCAST_LEAVE_GROUP;
Libcore.os.setsockoptGroupReq(fd,level,op,groupReq);
return;
default :
throw new SocketException("Unknown socket option: " + option);
}
}

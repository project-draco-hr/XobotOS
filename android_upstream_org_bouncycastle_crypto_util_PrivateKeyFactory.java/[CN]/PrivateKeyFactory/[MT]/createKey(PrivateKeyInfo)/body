{
  AlgorithmIdentifier algId=keyInfo.getAlgorithmId();
  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption)) {
    RSAPrivateKeyStructure keyStructure=new RSAPrivateKeyStructure((ASN1Sequence)keyInfo.getPrivateKey());
    return new RSAPrivateCrtKeyParameters(keyStructure.getModulus(),keyStructure.getPublicExponent(),keyStructure.getPrivateExponent(),keyStructure.getPrime1(),keyStructure.getPrime2(),keyStructure.getExponent1(),keyStructure.getExponent2(),keyStructure.getCoefficient());
  }
 else   if (algId.getObjectId().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {
    DHParameter params=new DHParameter((ASN1Sequence)keyInfo.getAlgorithmId().getParameters());
    DERInteger derX=(DERInteger)keyInfo.getPrivateKey();
    BigInteger lVal=params.getL();
    int l=lVal == null ? 0 : lVal.intValue();
    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);
    return new DHPrivateKeyParameters(derX.getValue(),dhParams);
  }
 else   if (algId.getObjectId().equals(X9ObjectIdentifiers.id_dsa)) {
    DERInteger derX=(DERInteger)keyInfo.getPrivateKey();
    DEREncodable de=keyInfo.getAlgorithmId().getParameters();
    DSAParameters parameters=null;
    if (de != null) {
      DSAParameter params=DSAParameter.getInstance(de.getDERObject());
      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());
    }
    return new DSAPrivateKeyParameters(derX.getValue(),parameters);
  }
 else   if (algId.getObjectId().equals(X9ObjectIdentifiers.id_ecPublicKey)) {
    X962Parameters params=new X962Parameters((DERObject)keyInfo.getAlgorithmId().getParameters());
    ECDomainParameters dParams=null;
    if (params.isNamedCurve()) {
      DERObjectIdentifier oid=(DERObjectIdentifier)params.getParameters();
      X9ECParameters ecP=X962NamedCurves.getByOID(oid);
      if (ecP == null) {
        ecP=SECNamedCurves.getByOID(oid);
        if (ecP == null) {
          ecP=NISTNamedCurves.getByOID(oid);
        }
      }
      dParams=new ECDomainParameters(ecP.getCurve(),ecP.getG(),ecP.getN(),ecP.getH(),ecP.getSeed());
    }
 else {
      X9ECParameters ecP=new X9ECParameters((ASN1Sequence)params.getParameters());
      dParams=new ECDomainParameters(ecP.getCurve(),ecP.getG(),ecP.getN(),ecP.getH(),ecP.getSeed());
    }
    ECPrivateKeyStructure ec=new ECPrivateKeyStructure((ASN1Sequence)keyInfo.getPrivateKey());
    return new ECPrivateKeyParameters(ec.getKey(),dParams);
  }
 else {
    throw new RuntimeException("algorithm identifier in key not recognised");
  }
}

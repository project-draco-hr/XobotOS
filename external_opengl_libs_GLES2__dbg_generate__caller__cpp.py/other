import os
import sys
externs = []
if (__name__ == '__main__'):
    lines = open('gl2_api_annotated.in').readlines()
    output = generate_caller(lines)
    out = open('src/caller.cpp', 'w')
    out.write('/*\n ** Copyright 2011, The Android Open Source Project\n **\n ** Licensed under the Apache License, Version 2.0 (the "License");\n ** you may not use this file except in compliance with the License.\n ** You may obtain a copy of the License at\n **\n **     http://www.apache.org/licenses/LICENSE-2.0\n **\n ** Unless required by applicable law or agreed to in writing, software\n ** distributed under the License is distributed on an "AS IS" BASIS,\n ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n ** See the License for the specific language governing permissions and\n ** limitations under the License.\n */\n\n// auto generated by generate_caller_cpp.py\n// implement declarations in caller.h\n\n#include "header.h"\n\nnamespace android {\n\n')
    for extern in externs:
        out.write(('static const int * GenerateCall_%s(DbgContext * const dbg,\n    const glesv2debugger::Message & cmd, glesv2debugger::Message & msg, const int * const prevRet);\n' % extern))
        print ('static const int * GenerateCall_%s(DbgContext * const dbg,\n                            const glesv2debugger::Message & cmd,\n                            glesv2debugger::Message & msg, const int * const prevRet)\n{ assert(0); return prevRet; }\n' % extern)
    out.write('\n#include "caller.h"\n\nconst int * GenerateCall(DbgContext * const dbg, const glesv2debugger::Message & cmd,\n                  glesv2debugger::Message & msg, const int * const prevRet)\n{\n    LOGD("GenerateCall function=%u", cmd.function());\n    const int * ret = prevRet; // only some functions have return value\n    nsecs_t c0 = systemTime(timeMode);\n    switch (cmd.function()) {')
    out.write(output)
    out.write('    default:\n        assert(0);\n    }\n    msg.set_time((systemTime(timeMode) - c0) * 1e-6f);\n    msg.set_context_id(reinterpret_cast<int>(dbg));\n    msg.set_function(cmd.function());\n    msg.set_type(glesv2debugger::Message_Type_AfterCall);\n    return ret;\n}\n\n}; // name space android {\n')

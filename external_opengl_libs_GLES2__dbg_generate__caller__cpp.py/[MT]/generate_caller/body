def generate_caller(lines):
    i = 0
    output = ''
    skipFunctions = []
    for line in lines:
        if (line.find('API_ENTRY(') >= 0):
            returnType = line[0:line.find(' API_ENTRY(')]
            functionName = line[(line.find('(') + 1):line.find(')')]
            parameterList = line[(line.find(')(') + 2):line.find(') {')]
            if (functionName in skipFunctions):
                sys.stderr.write(("!\n! skipping function '%s'\n!\n" % functionName))
                continue
            output += ('    case glesv2debugger::Message_Function_%s:\n' % functionName)
            parameters = parameterList.split(',')
            paramIndex = 0
            if ((line.find('*') >= 0) and ((line.find('*') < line.find(':')) or (line.find('*') > line.rfind(':')))):
                externs.append(functionName)
                output += ('        ret = GenerateCall_%s(dbg, cmd, msg, prevRet);\n        break;\n' % functionName)
                continue
            elif ((line.find(':out') >= 0) or (line.find(':inout') >= 0)):
                externs.append(functionName)
                output += ('        ret = GenerateCall_%s(dbg, cmd, msg, prevRet);\n        break; // annotated output pointers\n' % functionName)
                continue
            if (parameterList == 'void'):
                parameters = []
            arguments = ''
            paramNames = []
            inout = ''
            getData = ''
            callerMembers = ''
            for parameter in parameters:
                const = parameter.find('const')
                parameter = parameter.replace('const', '')
                parameter = parameter.strip()
                paramType = parameter.split(' ')[0]
                paramName = parameter.split(' ')[1]
                annotation = ''
                if (parameter.find(':') >= 0):
                    assert (inout == '')
                    sys.stderr.write(('%s is annotated: %s \n' % (functionName, paramType)))
                    inout = paramType.split(':')[2]
                    annotation = paramType.split(':')[1]
                    paramType = paramType.split(':')[0]
                    count = 1
                    countArg = ''
                    if (annotation.find('*') >= 0):
                        count = int(annotation.split('*')[0])
                        countArg = annotation.split('*')[1]
                        assert (countArg in paramNames)
                    elif (annotation in paramNames):
                        count = 1
                        countArg = annotation
                    elif (annotation == 'GLstring'):
                        annotation = ('strlen(%s)' % paramName)
                    else:
                        count = int(annotation)
                    paramType += '*'
                    arguments += ('reinterpret_cast<%s>(const_cast<char *>(cmd.data().data()))' % paramType)
                elif (paramType == 'GLboolean'):
                    arguments += ('GLboolean(cmd.arg%d())' % paramIndex)
                else:
                    arguments += ('static_cast<%s>(cmd.arg%d())' % (paramType, paramIndex))
                if (paramIndex < (len(parameters) - 1)):
                    arguments += ', '
                if ((len(arguments) - arguments.rfind('\n')) > 60):
                    arguments += '\n            '
                if (const >= 0):
                    paramType = ('const ' + paramType)
                paramNames.append(paramName)
                paramIndex += 1
            if (returnType == 'void'):
                output += ('        dbg->hooks->gl.%s(\n            %s);\n        break;\n' % (functionName, arguments))
            else:
                output += ('        msg.set_ret(static_cast<int>(dbg->hooks->gl.%s(\n            %s)));\n        if (cmd.has_ret())\n            ret = reinterpret_cast<int *>(msg.ret());\n        break;\n' % (functionName, arguments))
    return output

{
  if (this != url.streamHandler) {
    throw new SecurityException("Only a URL's stream handler is permitted to mutate it");
  }
  if (end < start) {
    throw new StringIndexOutOfBoundsException(spec,start,end - start);
  }
  int fileStart;
  String authority;
  String userInfo;
  String host;
  int port=-1;
  String path;
  String query;
  String ref;
  if (spec.regionMatches(start,"//",0,2)) {
    int authorityStart=start + 2;
    fileStart=UrlUtils.findFirstOf(spec,"/?#",authorityStart,end);
    authority=spec.substring(authorityStart,fileStart);
    int userInfoEnd=UrlUtils.findFirstOf(spec,"@",authorityStart,fileStart);
    int hostStart;
    if (userInfoEnd != fileStart) {
      userInfo=spec.substring(authorityStart,userInfoEnd);
      hostStart=userInfoEnd + 1;
    }
 else {
      userInfo=null;
      hostStart=authorityStart;
    }
    int colonSearchFrom=hostStart;
    int ipv6End=UrlUtils.findFirstOf(spec,"]",hostStart,fileStart);
    if (ipv6End != fileStart) {
      if (UrlUtils.findFirstOf(spec,":",hostStart,ipv6End) == ipv6End) {
        throw new IllegalArgumentException("Expected an IPv6 address: " + spec.substring(hostStart,ipv6End + 1));
      }
      colonSearchFrom=ipv6End;
    }
    int hostEnd=UrlUtils.findFirstOf(spec,":",colonSearchFrom,fileStart);
    host=spec.substring(hostStart,hostEnd);
    int portStart=hostEnd + 1;
    if (portStart < fileStart) {
      port=Integer.parseInt(spec.substring(portStart,fileStart));
      if (port < 0) {
        throw new IllegalArgumentException("port < 0: " + port);
      }
    }
    path=null;
    query=null;
    ref=null;
  }
 else {
    fileStart=start;
    authority=url.getAuthority();
    userInfo=url.getUserInfo();
    host=url.getHost();
    if (host == null) {
      host="";
    }
    port=url.getPort();
    path=url.getPath();
    query=url.getQuery();
    ref=url.getRef();
  }
  int pos=fileStart;
  while (pos < end) {
    int nextPos;
switch (spec.charAt(pos)) {
case '#':
      nextPos=end;
    ref=spec.substring(pos + 1,nextPos);
  break;
case '?':
nextPos=UrlUtils.findFirstOf(spec,"#",pos,end);
query=spec.substring(pos + 1,nextPos);
ref=null;
break;
default :
nextPos=UrlUtils.findFirstOf(spec,"?#",pos,end);
path=relativePath(path,spec.substring(pos,nextPos));
query=null;
ref=null;
break;
}
pos=nextPos;
}
if (path == null) {
path="";
}
path=UrlUtils.authoritySafePath(authority,path);
setURL(url,url.getProtocol(),host,port,authority,userInfo,path,query,ref);
}

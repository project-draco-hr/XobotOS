def MergeLists(to, fro, to_file, fro_file, is_paths=False, append=True):

    def is_hashable(x):
        try:
            hash(x)
        except TypeError:
            return False
        return True

    def is_in_set_or_list(x, s, l):
        if is_hashable(x):
            return (x in s)
        return (x in l)
    prepend_index = 0
    hashable_to_set = set([x for x in to if is_hashable(x)])
    for item in fro:
        singleton = False
        if (isinstance(item, str) or isinstance(item, int)):
            if is_paths:
                to_item = MakePathRelative(to_file, fro_file, item)
            else:
                to_item = item
            if ((not isinstance(item, str)) or (not item.startswith('-'))):
                singleton = True
        elif isinstance(item, dict):
            to_item = {}
            MergeDicts(to_item, item, to_file, fro_file)
        elif isinstance(item, list):
            to_item = []
            MergeLists(to_item, item, to_file, fro_file)
        else:
            raise TypeError, ('Attempt to merge list item of unsupported type ' + item.__class__.__name__)
        if append:
            if ((not singleton) or (not is_in_set_or_list(to_item, hashable_to_set, to))):
                to.append(to_item)
                if is_hashable(to_item):
                    hashable_to_set.add(to_item)
        else:
            while (singleton and (to_item in to)):
                to.remove(to_item)
            to.insert(prepend_index, to_item)
            if is_hashable(to_item):
                hashable_to_set.add(to_item)
            prepend_index = (prepend_index + 1)

def VerifyNoGYPFileCircularDependencies(targets):
    dependency_nodes = {}
    for target in targets.iterkeys():
        build_file = gyp.common.BuildFile(target)
        if (not (build_file in dependency_nodes)):
            dependency_nodes[build_file] = DependencyGraphNode(build_file)
    for (target, spec) in targets.iteritems():
        build_file = gyp.common.BuildFile(target)
        build_file_node = dependency_nodes[build_file]
        target_dependencies = spec.get('dependencies', [])
        for dependency in target_dependencies:
            try:
                dependency_build_file = gyp.common.BuildFile(dependency)
                if (dependency_build_file == build_file):
                    continue
                dependency_node = dependency_nodes[dependency_build_file]
                if (dependency_node not in build_file_node.dependencies):
                    build_file_node.dependencies.append(dependency_node)
                    dependency_node.dependents.append(build_file_node)
            except KeyError as e:
                gyp.common.ExceptionAppend(e, ('while computing dependencies of .gyp file %s' % build_file))
                raise
    root_node = DependencyGraphNode(None)
    for build_file_node in dependency_nodes.itervalues():
        if (len(build_file_node.dependencies) == 0):
            build_file_node.dependencies.append(root_node)
            root_node.dependents.append(build_file_node)
    flat_list = root_node.FlattenToList()
    if (len(flat_list) != len(dependency_nodes)):
        bad_files = []
        for file in dependency_nodes.iterkeys():
            if (not (file in flat_list)):
                bad_files.append(file)
        raise DependencyGraphNode.CircularException, (('Some files not reachable, cycle in .gyp file dependency graph ' + 'detected involving some or all of: ') + ' '.join(bad_files))

def ProcessVariablesAndConditionsInDict(the_dict, is_late, variables_in, build_file, the_dict_key=None):
    'Handle all variable and command expansion and conditional evaluation.\n\n  This function is the public entry point for all variable expansions and\n  conditional evaluations.  The variables_in dictionary will not be modified\n  by this function.\n  '
    variables = variables_in.copy()
    LoadAutomaticVariablesFromDict(variables, the_dict)
    if ('variables' in the_dict):
        for (key, value) in the_dict['variables'].iteritems():
            variables[key] = value
        ProcessVariablesAndConditionsInDict(the_dict['variables'], is_late, variables, build_file, 'variables')
    LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key)
    for (key, value) in the_dict.iteritems():
        if ((key != 'variables') and isinstance(value, str)):
            expanded = ExpandVariables(value, is_late, variables, build_file)
            if ((not isinstance(expanded, str)) and (not isinstance(expanded, int))):
                raise ValueError, (((('Variable expansion in this context permits str and int ' + 'only, found ') + expanded.__class__.__name__) + ' for ') + key)
            the_dict[key] = expanded
    variables = variables_in.copy()
    LoadAutomaticVariablesFromDict(variables, the_dict)
    LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key)
    ProcessConditionsInDict(the_dict, is_late, variables, build_file)
    variables = variables_in.copy()
    LoadAutomaticVariablesFromDict(variables, the_dict)
    LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key)
    for (key, value) in the_dict.iteritems():
        if ((key == 'variables') or isinstance(value, str)):
            continue
        if isinstance(value, dict):
            ProcessVariablesAndConditionsInDict(value, is_late, variables, build_file, key)
        elif isinstance(value, list):
            ProcessVariablesAndConditionsInList(value, is_late, variables, build_file)
        elif (not isinstance(value, int)):
            raise TypeError, ((('Unknown type ' + value.__class__.__name__) + ' for ') + key)

def LoadTargetBuildFile(build_file_path, data, aux_data, variables, includes, depth, check):
    global absolute_build_file_paths
    if depth:
        d = gyp.common.RelativePath(depth, os.path.dirname(build_file_path))
        if (d == ''):
            variables['DEPTH'] = '.'
        else:
            variables['DEPTH'] = d.replace('\\', '/')
    if absolute_build_file_paths:
        build_file_path = os.path.abspath(build_file_path)
    if (build_file_path in data['target_build_files']):
        return
    data['target_build_files'].add(build_file_path)
    gyp.DebugOutput(gyp.DEBUG_INCLUDES, ("Loading Target Build File '%s'" % build_file_path))
    build_file_data = LoadOneBuildFile(build_file_path, data, aux_data, variables, includes, True, check)
    build_file_data['_DEPTH'] = depth
    if ('included_files' in build_file_data):
        raise KeyError, (build_file_path + ' must not contain included_files key')
    included = GetIncludedBuildFiles(build_file_path, aux_data)
    build_file_data['included_files'] = []
    for included_file in included:
        included_relative = gyp.common.RelativePath(included_file, os.path.dirname(build_file_path))
        build_file_data['included_files'].append(included_relative)
    ProcessToolsetsInDict(build_file_data)
    ProcessVariablesAndConditionsInDict(build_file_data, False, variables, build_file_path)
    ProcessToolsetsInDict(build_file_data)
    if ('target_defaults' in build_file_data):
        index = 0
        if ('targets' in build_file_data):
            while (index < len(build_file_data['targets'])):
                old_target_dict = build_file_data['targets'][index]
                new_target_dict = copy.deepcopy(build_file_data['target_defaults'])
                MergeDicts(new_target_dict, old_target_dict, build_file_path, build_file_path)
                build_file_data['targets'][index] = new_target_dict
                index = (index + 1)
        else:
            raise Exception, ('Unable to find targets in build file %s' % build_file_path)
        del build_file_data['target_defaults']
    if ('targets' in build_file_data):
        for target_dict in build_file_data['targets']:
            if ('dependencies' not in target_dict):
                continue
            for dependency in target_dict['dependencies']:
                other_build_file = gyp.common.ResolveTarget(build_file_path, dependency, None)[0]
                try:
                    LoadTargetBuildFile(other_build_file, data, aux_data, variables, includes, depth, check)
                except Exception as e:
                    gyp.common.ExceptionAppend(e, ('while loading dependencies of %s' % build_file_path))
                    raise
    return data

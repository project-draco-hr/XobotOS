def ProcessListFiltersInDict(name, the_dict):
    'Process regular expression and exclusion-based filters on lists.\n\n  An exclusion list is in a dict key named with a trailing "!", like\n  "sources!".  Every item in such a list is removed from the associated\n  main list, which in this example, would be "sources".  Removed items are\n  placed into a "sources_excluded" list in the dict.\n\n  Regular expression (regex) filters are contained in dict keys named with a\n  trailing "/", such as "sources/" to operate on the "sources" list.  Regex\n  filters in a dict take the form:\n    \'sources/\': [ [\'exclude\', \'_(linux|mac|win)\\.cc$\'],\n                  [\'include\', \'_mac\\.cc$\'] ],\n  The first filter says to exclude all files ending in _linux.cc, _mac.cc, and\n  _win.cc.  The second filter then includes all files ending in _mac.cc that\n  are now or were once in the "sources" list.  Items matching an "exclude"\n  filter are subject to the same processing as would occur if they were listed\n  by name in an exclusion list (ending in "!").  Items matching an "include"\n  filter are brought back into the main list if previously excluded by an\n  exclusion list or exclusion regex filter.  Subsequent matching "exclude"\n  patterns can still cause items to be excluded after matching an "include".\n  '
    lists = []
    del_lists = []
    for (key, value) in the_dict.iteritems():
        operation = key[(-1)]
        if ((operation != '!') and (operation != '/')):
            continue
        if (not isinstance(value, list)):
            raise ValueError, ((((name + ' key ') + key) + ' must be list, not ') + value.__class__.__name__)
        list_key = key[:(-1)]
        if (list_key not in the_dict):
            del_lists.append(key)
            continue
        if (not isinstance(the_dict[list_key], list)):
            raise ValueError, ((((((name + ' key ') + list_key) + ' must be list, not ') + value.__class__.__name__) + ' when applying ') + {'!': 'exclusion', '/': 'regex', }[operation])
        if (not (list_key in lists)):
            lists.append(list_key)
    for del_list in del_lists:
        del the_dict[del_list]
    for list_key in lists:
        the_list = the_dict[list_key]
        list_actions = list((((-1),) * len(the_list)))
        exclude_key = (list_key + '!')
        if (exclude_key in the_dict):
            for exclude_item in the_dict[exclude_key]:
                for index in xrange(0, len(the_list)):
                    if (exclude_item == the_list[index]):
                        list_actions[index] = 0
            del the_dict[exclude_key]
        regex_key = (list_key + '/')
        if (regex_key in the_dict):
            for regex_item in the_dict[regex_key]:
                [action, pattern] = regex_item
                pattern_re = re.compile(pattern)
                if (action == 'exclude'):
                    action_value = 0
                elif (action == 'include'):
                    action_value = 1
                else:
                    raise ValueError, ((((('Unrecognized action ' + action) + ' in ') + name) + ' key ') + key)
                for index in xrange(0, len(the_list)):
                    list_item = the_list[index]
                    if (list_actions[index] == action_value):
                        continue
                    if pattern_re.search(list_item):
                        list_actions[index] = action_value
            del the_dict[regex_key]
        excluded_key = (list_key + '_excluded')
        if (excluded_key in the_dict):
            raise KeyError, (((((name + ' key ') + excluded_key) + ' must not be present prior ') + ' to applying exclusion/regex filters for ') + list_key)
        excluded_list = []
        for index in xrange((len(list_actions) - 1), (-1), (-1)):
            if (list_actions[index] == 0):
                excluded_list.insert(0, the_list[index])
                del the_list[index]
        if (len(excluded_list) > 0):
            the_dict[excluded_key] = excluded_list
    for (key, value) in the_dict.iteritems():
        if isinstance(value, dict):
            ProcessListFiltersInDict(key, value)
        elif isinstance(value, list):
            ProcessListFiltersInList(key, value)

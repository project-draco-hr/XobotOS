def SetUpConfigurations(target, target_dict):
    global non_configuration_keys
    key_suffixes = ['=', '+', '?', '!', '/']
    build_file = gyp.common.BuildFile(target)
    if (not ('configurations' in target_dict)):
        target_dict['configurations'] = {'Default': {}, }
    if (not ('default_configuration' in target_dict)):
        concrete = [i for i in target_dict['configurations'].keys() if (not target_dict['configurations'][i].get('abstract'))]
        target_dict['default_configuration'] = sorted(concrete)[0]
    for configuration in target_dict['configurations'].keys():
        old_configuration_dict = target_dict['configurations'][configuration]
        if old_configuration_dict.get('abstract'):
            continue
        new_configuration_dict = copy.deepcopy(target_dict)
        delete_keys = []
        for key in new_configuration_dict:
            key_ext = key[(-1):]
            if (key_ext in key_suffixes):
                key_base = key[:(-1)]
            else:
                key_base = key
            if (key_base in non_configuration_keys):
                delete_keys.append(key)
        for key in delete_keys:
            del new_configuration_dict[key]
        MergeConfigWithInheritance(new_configuration_dict, build_file, target_dict, configuration, [])
        target_dict['configurations'][configuration] = new_configuration_dict
    for configuration in target_dict['configurations'].keys():
        old_configuration_dict = target_dict['configurations'][configuration]
        if old_configuration_dict.get('abstract'):
            del target_dict['configurations'][configuration]
    delete_keys = []
    for key in target_dict:
        key_ext = key[(-1):]
        if (key_ext in key_suffixes):
            key_base = key[:(-1)]
        else:
            key_base = key
        if (not (key_base in non_configuration_keys)):
            delete_keys.append(key)
    for key in delete_keys:
        del target_dict[key]
    for configuration in target_dict['configurations'].keys():
        configuration_dict = target_dict['configurations'][configuration]
        for key in configuration_dict.keys():
            if (key in invalid_configuration_keys):
                raise KeyError, ('%s not allowed in the %s configuration, found in target %s' % (key, configuration, target))

def ProcessConditionsInDict(the_dict, is_late, variables, build_file):
    if (not is_late):
        conditions_key = 'conditions'
    else:
        conditions_key = 'target_conditions'
    if (not (conditions_key in the_dict)):
        return
    conditions_list = the_dict[conditions_key]
    del the_dict[conditions_key]
    for condition in conditions_list:
        if (not isinstance(condition, list)):
            raise TypeError, (conditions_key + ' must be a list')
        if ((len(condition) != 2) and (len(condition) != 3)):
            raise IndexError, ((((conditions_key + ' ') + condition[0]) + ' must be length 2 or 3, not ') + str(len(condition)))
        [cond_expr, true_dict] = condition[0:2]
        false_dict = None
        if (len(condition) == 3):
            false_dict = condition[2]
        cond_expr_expanded = ExpandVariables(cond_expr, is_late, variables, build_file)
        if ((not isinstance(cond_expr_expanded, str)) and (not isinstance(cond_expr_expanded, int))):
            raise ValueError, (('Variable expansion in this context permits str and int ' + 'only, found ') + expanded.__class__.__name__)
        try:
            ast_code = compile(cond_expr_expanded, '<string>', 'eval')
            if eval(ast_code, {'__builtins__': None, }, variables):
                merge_dict = true_dict
            else:
                merge_dict = false_dict
        except SyntaxError as e:
            syntax_error = SyntaxError(("%s while evaluating condition '%s' in %s at character %d." % (str(e.args[0]), e.text, build_file, e.offset)), e.filename, e.lineno, e.offset, e.text)
            raise syntax_error
        except NameError as e:
            gyp.common.ExceptionAppend(e, ("while evaluating condition '%s' in %s" % (cond_expr_expanded, build_file)))
            raise
        if (merge_dict != None):
            ProcessVariablesAndConditionsInDict(merge_dict, is_late, variables, build_file)
            MergeDicts(the_dict, merge_dict, build_file, build_file)

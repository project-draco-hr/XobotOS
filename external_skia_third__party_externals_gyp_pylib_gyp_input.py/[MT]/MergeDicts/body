def MergeDicts(to, fro, to_file, fro_file):
    for (k, v) in fro.iteritems():
        if (k in to):
            bad_merge = False
            if (isinstance(v, str) or isinstance(v, int)):
                if (not (isinstance(to[k], str) or isinstance(to[k], int))):
                    bad_merge = True
            elif (v.__class__ != to[k].__class__):
                bad_merge = True
            if bad_merge:
                raise TypeError, ((((('Attempt to merge dict value of type ' + v.__class__.__name__) + ' into incompatible type ') + to[k].__class__.__name__) + ' for key ') + k)
        if (isinstance(v, str) or isinstance(v, int)):
            is_path = IsPathSection(k)
            if is_path:
                to[k] = MakePathRelative(to_file, fro_file, v)
            else:
                to[k] = v
        elif isinstance(v, dict):
            if (not (k in to)):
                to[k] = {}
            MergeDicts(to[k], v, to_file, fro_file)
        elif isinstance(v, list):
            ext = k[(-1)]
            append = True
            if (ext == '='):
                list_base = k[:(-1)]
                lists_incompatible = [list_base, (list_base + '?')]
                to[list_base] = []
            elif (ext == '+'):
                list_base = k[:(-1)]
                lists_incompatible = [(list_base + '='), (list_base + '?')]
                append = False
            elif (ext == '?'):
                list_base = k[:(-1)]
                lists_incompatible = [list_base, (list_base + '='), (list_base + '+')]
            else:
                list_base = k
                lists_incompatible = [(list_base + '='), (list_base + '?')]
            for list_incompatible in lists_incompatible:
                if (list_incompatible in fro):
                    raise KeyError, ((('Incompatible list policies ' + k) + ' and ') + list_incompatible)
            if (list_base in to):
                if (ext == '?'):
                    continue
                if (not isinstance(to[list_base], list)):
                    raise TypeError, (((((((('Attempt to merge dict value of type ' + v.__class__.__name__) + ' into incompatible type ') + to[list_base].__class__.__name__) + ' for key ') + list_base) + '(') + k) + ')')
            else:
                to[list_base] = []
            is_paths = IsPathSection(list_base)
            MergeLists(to[list_base], v, to_file, fro_file, is_paths, append)
        else:
            raise TypeError, ((('Attempt to merge dict value of unsupported type ' + v.__class__.__name__) + ' for key ') + k)

def QualifyDependencies(targets):
    'Make dependency links fully-qualified relative to the current directory.\n\n  |targets| is a dict mapping fully-qualified target names to their target\n  dicts.  For each target in this dict, keys known to contain dependency\n  links are examined, and any dependencies referenced will be rewritten\n  so that they are fully-qualified and relative to the current directory.\n  All rewritten dependencies are suitable for use as keys to |targets| or a\n  similar dict.\n  '
    all_dependency_sections = [(dep + op) for dep in dependency_sections for op in ('', '!', '/')]
    for (target, target_dict) in targets.iteritems():
        target_build_file = gyp.common.BuildFile(target)
        toolset = target_dict['toolset']
        for dependency_key in all_dependency_sections:
            dependencies = target_dict.get(dependency_key, [])
            for index in xrange(0, len(dependencies)):
                (dep_file, dep_target, dep_toolset) = gyp.common.ResolveTarget(target_build_file, dependencies[index], toolset)
                global multiple_toolsets
                if (not multiple_toolsets):
                    dep_toolset = toolset
                dependency = gyp.common.QualifiedTarget(dep_file, dep_target, dep_toolset)
                dependencies[index] = dependency
                if ((dependency_key != 'dependencies') and (dependency not in target_dict['dependencies'])):
                    raise KeyError, (((((('Found ' + dependency) + ' in ') + dependency_key) + ' of ') + target) + ', but not in dependencies')

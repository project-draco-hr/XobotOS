{
  context.setAttribute(ExecutionContext.HTTP_CONNECTION,conn);
  HttpResponse response=null;
  try {
    HttpRequest request=conn.receiveRequestHeader();
    request.setParams(new DefaultedHttpParams(request.getParams(),this.params));
    ProtocolVersion ver=request.getRequestLine().getProtocolVersion();
    if (!ver.lessEquals(HttpVersion.HTTP_1_1)) {
      ver=HttpVersion.HTTP_1_1;
    }
    if (request instanceof HttpEntityEnclosingRequest) {
      if (((HttpEntityEnclosingRequest)request).expectContinue()) {
        response=this.responseFactory.newHttpResponse(ver,HttpStatus.SC_CONTINUE,context);
        response.setParams(new DefaultedHttpParams(response.getParams(),this.params));
        if (this.expectationVerifier != null) {
          try {
            this.expectationVerifier.verify(request,response,context);
          }
 catch (          HttpException ex) {
            response=this.responseFactory.newHttpResponse(HttpVersion.HTTP_1_0,HttpStatus.SC_INTERNAL_SERVER_ERROR,context);
            response.setParams(new DefaultedHttpParams(response.getParams(),this.params));
            handleException(ex,response);
          }
        }
        if (response.getStatusLine().getStatusCode() < 200) {
          conn.sendResponseHeader(response);
          conn.flush();
          response=null;
          conn.receiveRequestEntity((HttpEntityEnclosingRequest)request);
        }
      }
 else {
        conn.receiveRequestEntity((HttpEntityEnclosingRequest)request);
      }
    }
    if (response == null) {
      response=this.responseFactory.newHttpResponse(ver,HttpStatus.SC_OK,context);
      response.setParams(new DefaultedHttpParams(response.getParams(),this.params));
      context.setAttribute(ExecutionContext.HTTP_REQUEST,request);
      context.setAttribute(ExecutionContext.HTTP_RESPONSE,response);
      this.processor.process(request,context);
      doService(request,response,context);
    }
    if (request instanceof HttpEntityEnclosingRequest) {
      HttpEntity entity=((HttpEntityEnclosingRequest)request).getEntity();
      if (entity != null) {
        entity.consumeContent();
      }
    }
  }
 catch (  HttpException ex) {
    response=this.responseFactory.newHttpResponse(HttpVersion.HTTP_1_0,HttpStatus.SC_INTERNAL_SERVER_ERROR,context);
    response.setParams(new DefaultedHttpParams(response.getParams(),this.params));
    handleException(ex,response);
  }
  this.processor.process(response,context);
  conn.sendResponseHeader(response);
  conn.sendResponseEntity(response);
  conn.flush();
  if (!this.connStrategy.keepAlive(response,context)) {
    conn.close();
  }
}

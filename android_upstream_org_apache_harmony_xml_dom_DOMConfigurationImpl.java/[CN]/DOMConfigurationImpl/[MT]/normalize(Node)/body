{
switch (node.getNodeType()) {
case Node.CDATA_SECTION_NODE:
    CDATASectionImpl cdata=(CDATASectionImpl)node;
  if (cdataSections) {
    if (cdata.needsSplitting()) {
      if (splitCdataSections) {
        cdata.split();
        report(DOMError.SEVERITY_WARNING,"cdata-sections-splitted");
      }
 else {
        report(DOMError.SEVERITY_ERROR,"wf-invalid-character");
      }
    }
    checkTextValidity(cdata.buffer);
    break;
  }
node=cdata.replaceWithText();
case Node.TEXT_NODE:
TextImpl text=(TextImpl)node;
text=text.minimize();
if (text != null) {
checkTextValidity(text.buffer);
}
break;
case Node.COMMENT_NODE:
CommentImpl comment=(CommentImpl)node;
if (!comments) {
comment.getParentNode().removeChild(comment);
break;
}
if (comment.containsDashDash()) {
report(DOMError.SEVERITY_ERROR,"wf-invalid-character");
}
checkTextValidity(comment.buffer);
break;
case Node.PROCESSING_INSTRUCTION_NODE:
checkTextValidity(((ProcessingInstructionImpl)node).getData());
break;
case Node.ATTRIBUTE_NODE:
checkTextValidity(((AttrImpl)node).getValue());
break;
case Node.ELEMENT_NODE:
ElementImpl element=(ElementImpl)node;
NamedNodeMap attributes=element.getAttributes();
for (int i=0; i < attributes.getLength(); i++) {
normalize(attributes.item(i));
}
case Node.DOCUMENT_NODE:
case Node.DOCUMENT_FRAGMENT_NODE:
Node next;
for (Node child=node.getFirstChild(); child != null; child=next) {
next=child.getNextSibling();
normalize(child);
}
break;
case Node.NOTATION_NODE:
case Node.DOCUMENT_TYPE_NODE:
case Node.ENTITY_NODE:
case Node.ENTITY_REFERENCE_NODE:
break;
default :
throw new DOMException(DOMException.NOT_SUPPORTED_ERR,"Unsupported node type " + node.getNodeType());
}
}

{
  if (currentEntry != null) {
    closeEntry();
  }
  if (ze.getMethod() == STORED || (compressMethod == STORED && ze.getMethod() == -1)) {
    if (ze.crc == -1) {
      throw new ZipException("CRC mismatch");
    }
    if (ze.size == -1 && ze.compressedSize == -1) {
      throw new ZipException("Size mismatch");
    }
    if (ze.size != ze.compressedSize && ze.compressedSize != -1 && ze.size != -1) {
      throw new ZipException("Size mismatch");
    }
  }
  checkClosed();
  if (entries.contains(ze.name)) {
    throw new ZipException("Entry already exists: " + ze.name);
  }
  nameBytes=ze.name.getBytes(Charsets.UTF_8);
  nameLength=nameBytes.length;
  if (nameLength > 0xffff) {
    throw new IllegalArgumentException("Name too long: " + nameLength + " UTF-8 bytes");
  }
  def.setLevel(compressLevel);
  currentEntry=ze;
  entries.add(currentEntry.name);
  if (currentEntry.getMethod() == -1) {
    currentEntry.setMethod(compressMethod);
  }
  int flags=currentEntry.getMethod() == STORED ? 0 : ZipFile.GPBF_DATA_DESCRIPTOR_FLAG;
  flags|=ZipFile.GPBF_UTF8_FLAG;
  writeLong(out,LOCSIG);
  writeShort(out,ZIPLocalHeaderVersionNeeded);
  writeShort(out,flags);
  writeShort(out,currentEntry.getMethod());
  if (currentEntry.getTime() == -1) {
    currentEntry.setTime(System.currentTimeMillis());
  }
  writeShort(out,currentEntry.time);
  writeShort(out,currentEntry.modDate);
  if (currentEntry.getMethod() == STORED) {
    if (currentEntry.size == -1) {
      currentEntry.size=currentEntry.compressedSize;
    }
 else     if (currentEntry.compressedSize == -1) {
      currentEntry.compressedSize=currentEntry.size;
    }
    writeLong(out,currentEntry.crc);
    writeLong(out,currentEntry.size);
    writeLong(out,currentEntry.size);
  }
 else {
    writeLong(out,0);
    writeLong(out,0);
    writeLong(out,0);
  }
  writeShort(out,nameLength);
  if (currentEntry.extra != null) {
    writeShort(out,currentEntry.extra.length);
  }
 else {
    writeShort(out,0);
  }
  out.write(nameBytes);
  if (currentEntry.extra != null) {
    out.write(currentEntry.extra);
  }
}

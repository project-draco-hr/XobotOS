{
  if (header == null) {
    throw new IllegalArgumentException("Header may not be null");
  }
  String authheader=header.getName();
  if (authheader.equalsIgnoreCase(AUTH.WWW_AUTH)) {
    this.proxy=false;
  }
 else   if (authheader.equalsIgnoreCase(AUTH.PROXY_AUTH)) {
    this.proxy=true;
  }
 else {
    throw new MalformedChallengeException("Unexpected header name: " + authheader);
  }
  CharArrayBuffer buffer;
  int pos;
  if (header instanceof FormattedHeader) {
    buffer=((FormattedHeader)header).getBuffer();
    pos=((FormattedHeader)header).getValuePos();
  }
 else {
    String s=header.getValue();
    if (s == null) {
      throw new MalformedChallengeException("Header value is null");
    }
    buffer=new CharArrayBuffer(s.length());
    buffer.append(s);
    pos=0;
  }
  while (pos < buffer.length() && HTTP.isWhitespace(buffer.charAt(pos))) {
    pos++;
  }
  int beginIndex=pos;
  while (pos < buffer.length() && !HTTP.isWhitespace(buffer.charAt(pos))) {
    pos++;
  }
  int endIndex=pos;
  String s=buffer.substring(beginIndex,endIndex);
  if (!s.equalsIgnoreCase(getSchemeName())) {
    throw new MalformedChallengeException("Invalid scheme identifier: " + s);
  }
  parseChallenge(buffer,pos,buffer.length());
}

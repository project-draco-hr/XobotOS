def WriteActions(self, actions, extra_sources, extra_outputs, extra_mac_bundle_resources, part_of_all, spec):
    "Write Makefile code for any 'actions' from the gyp input.\n\n    extra_sources: a list that will be filled in with newly generated source\n                   files, if any\n    extra_outputs: a list that will be filled in with any outputs of these\n                   actions (used to make other pieces dependent on these\n                   actions)\n    part_of_all: flag indicating this target is part of 'all'\n    "
    for action in actions:
        name = ((self.target + '_') + StringToMakefileVariable(action['action_name']))
        self.WriteLn(('### Rules for action "%s":' % action['action_name']))
        inputs = action['inputs']
        outputs = action['outputs']
        dirs = set()
        for out in outputs:
            dir = os.path.split(out)[0]
            if dir:
                dirs.add(dir)
        if int(action.get('process_outputs_as_sources', False)):
            extra_sources += outputs
        if int(action.get('process_outputs_as_mac_bundle_resources', False)):
            extra_mac_bundle_resources += outputs
        command = gyp.common.EncodePOSIXShellList(action['action'])
        if ('message' in action):
            self.WriteLn(('quiet_cmd_%s = ACTION %s $@' % (name, action['message'])))
        else:
            self.WriteLn(('quiet_cmd_%s = ACTION %s $@' % (name, name)))
        if (len(dirs) > 0):
            command = ((('mkdir -p %s' % ' '.join(dirs)) + '; ') + command)
        cd_action = ('cd %s; ' % Sourceify((self.path or '.')))
        self.WriteLn(('cmd_%s = export LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; %s%s' % (name, cd_action, command)))
        self.WriteLn()
        outputs = map(self.Absolutify, outputs)
        self.WriteMakeRule(outputs[:1], ['obj := $(abs_obj)'])
        self.WriteXcodeEnv(outputs[0], spec, target_relative_path=True)
        self.WriteMakeRule(outputs[:1], ['builddir := $(abs_builddir)'])
        for input in inputs:
            assert (' ' not in input), ('Spaces in action input filenames not supported (%s)' % input)
        for output in outputs:
            assert (' ' not in output), ('Spaces in action output filenames not supported (%s)' % output)
        self.WriteDoCmd(outputs, map(Sourceify, map(self.Absolutify, inputs)), part_of_all=part_of_all, command=name)
        outputs_variable = ('action_%s_outputs' % name)
        self.WriteLn(('%s := %s' % (outputs_variable, ' '.join(outputs))))
        extra_outputs.append(('$(%s)' % outputs_variable))
        self.WriteLn()
    self.WriteLn()

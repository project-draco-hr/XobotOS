{
  currentObject=object;
  currentClass=classDesc;
  boolean hadWriteMethod=(classDesc.getFlags() & SC_WRITE_METHOD) != 0;
  Class<?> targetClass=classDesc.forClass();
  final Method readMethod;
  if (targetClass == null || !mustResolve) {
    readMethod=null;
  }
 else {
    readMethod=classDesc.getMethodReadObject();
  }
  try {
    if (readMethod != null) {
      readMethod.setAccessible(true);
      try {
        readMethod.invoke(object,this);
      }
 catch (      InvocationTargetException e) {
        Throwable ex=e.getTargetException();
        if (ex instanceof ClassNotFoundException) {
          throw (ClassNotFoundException)ex;
        }
 else         if (ex instanceof RuntimeException) {
          throw (RuntimeException)ex;
        }
 else         if (ex instanceof Error) {
          throw (Error)ex;
        }
        throw (IOException)ex;
      }
catch (      IllegalAccessException e) {
        throw new RuntimeException(e.toString());
      }
    }
 else {
      defaultReadObject();
    }
    if (hadWriteMethod) {
      discardData();
    }
  }
  finally {
    currentObject=null;
    currentClass=null;
  }
}

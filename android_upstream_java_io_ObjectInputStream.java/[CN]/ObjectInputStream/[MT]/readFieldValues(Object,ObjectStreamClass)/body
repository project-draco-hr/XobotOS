{
  ObjectStreamField[] fields=classDesc.getLoadFields();
  fields=(fields == null) ? ObjectStreamClass.NO_FIELDS : fields;
  Class<?> declaringClass=classDesc.forClass();
  if (declaringClass == null && mustResolve) {
    throw new ClassNotFoundException(classDesc.getName());
  }
  for (  ObjectStreamField fieldDesc : fields) {
    Field field=classDesc.getReflectionField(fieldDesc);
    try {
      Class<?> type=fieldDesc.getTypeInternal();
      if (type == byte.class) {
        byte b=input.readByte();
        if (field != null) {
          field.setByte(obj,b);
        }
      }
 else       if (type == char.class) {
        char c=input.readChar();
        if (field != null) {
          field.setChar(obj,c);
        }
      }
 else       if (type == double.class) {
        double d=input.readDouble();
        if (field != null) {
          field.setDouble(obj,d);
        }
      }
 else       if (type == float.class) {
        float f=input.readFloat();
        if (field != null) {
          field.setFloat(obj,f);
        }
      }
 else       if (type == int.class) {
        int i=input.readInt();
        if (field != null) {
          field.setInt(obj,i);
        }
      }
 else       if (type == long.class) {
        long j=input.readLong();
        if (field != null) {
          field.setLong(obj,j);
        }
      }
 else       if (type == short.class) {
        short s=input.readShort();
        if (field != null) {
          field.setShort(obj,s);
        }
      }
 else       if (type == boolean.class) {
        boolean z=input.readBoolean();
        if (field != null) {
          field.setBoolean(obj,z);
        }
      }
 else {
        Object toSet=fieldDesc.isUnshared() ? readUnshared() : readObject();
        if (toSet != null) {
          String fieldName=fieldDesc.getName();
          ObjectStreamField localFieldDesc=classDesc.getField(fieldName);
          Class<?> fieldType=localFieldDesc.getTypeInternal();
          Class<?> valueType=toSet.getClass();
          if (!fieldType.isAssignableFrom(valueType)) {
            throw new ClassCastException(classDesc.getName() + "." + fieldName+ " - "+ fieldType+ " not compatible with "+ valueType);
          }
          if (field != null) {
            field.set(obj,toSet);
          }
        }
      }
    }
 catch (    IllegalAccessException iae) {
      throw new AssertionError(iae);
    }
catch (    NoSuchFieldError ignored) {
    }
  }
}

{
  if (object == null && mustResolve) {
    throw new NotActiveException();
  }
  List<ObjectStreamClass> streamClassList=classDesc.getHierarchy();
  if (object == null) {
    for (    ObjectStreamClass objectStreamClass : streamClassList) {
      readObjectForClass(null,objectStreamClass);
    }
  }
 else {
    List<Class<?>> superclasses=cachedSuperclasses.get(object.getClass());
    if (superclasses == null) {
      superclasses=cacheSuperclassesFor(object.getClass());
    }
    int lastIndex=0;
    for (int i=0, end=superclasses.size(); i < end; ++i) {
      Class<?> superclass=superclasses.get(i);
      int index=findStreamSuperclass(superclass,streamClassList,lastIndex);
      if (index == -1) {
        readObjectNoData(object,superclass,ObjectStreamClass.lookupStreamClass(superclass));
      }
 else {
        for (int j=lastIndex; j <= index; j++) {
          readObjectForClass(object,streamClassList.get(j));
        }
        lastIndex=index + 1;
      }
    }
  }
}

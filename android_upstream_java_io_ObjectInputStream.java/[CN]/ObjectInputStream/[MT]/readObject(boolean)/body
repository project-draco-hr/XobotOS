{
  boolean restoreInput=(primitiveData == input);
  if (restoreInput) {
    primitiveData=emptyStream;
  }
  if (subclassOverridingImplementation && !unshared) {
    return readObjectOverride();
  }
  Object result;
  try {
    if (++nestedLevels == 1) {
      callerClassLoader=getClosestUserClassLoader();
    }
    result=readNonPrimitiveContent(unshared);
    if (restoreInput) {
      primitiveData=input;
    }
  }
  finally {
    if (--nestedLevels == 0) {
      callerClassLoader=null;
    }
  }
  if (nestedLevels == 0 && validations != null) {
    try {
      for (      InputValidationDesc element : validations) {
        element.validator.validateObject();
      }
    }
  finally {
      validations=null;
    }
  }
  return result;
}

{
  if (engine_was_shutteddown) {
    return new SSLEngineResult(SSLEngineResult.Status.CLOSED,SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING,0,0);
  }
  if ((src == null) || (dsts == null)) {
    throw new IllegalStateException("Some of the input parameters are null");
  }
  if (!handshake_started) {
    beginHandshake();
  }
  SSLEngineResult.HandshakeStatus handshakeStatus=getHandshakeStatus();
  if ((session == null || engine_was_closed) && (handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_WRAP) || handshakeStatus.equals(SSLEngineResult.HandshakeStatus.NEED_TASK))) {
    return new SSLEngineResult(getEngineStatus(),handshakeStatus,0,0);
  }
  if (src.remaining() < recordProtocol.getMinRecordSize()) {
    return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);
  }
  try {
    src.mark();
    int capacity=0;
    for (int i=offset; i < offset + length; i++) {
      if (dsts[i] == null) {
        throw new IllegalStateException("Some of the input parameters are null");
      }
      if (dsts[i].isReadOnly()) {
        throw new ReadOnlyBufferException();
      }
      capacity+=dsts[i].remaining();
    }
    if (capacity < recordProtocol.getDataSize(src.remaining())) {
      return new SSLEngineResult(SSLEngineResult.Status.BUFFER_OVERFLOW,getHandshakeStatus(),0,0);
    }
    recProtIS.setSourceBuffer(src);
    int type=recordProtocol.unwrap();
switch (type) {
case ContentType.HANDSHAKE:
case ContentType.CHANGE_CIPHER_SPEC:
      if (handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.FINISHED)) {
        session=recordProtocol.getSession();
      }
    break;
case ContentType.APPLICATION_DATA:
  break;
case ContentType.ALERT:
if (alertProtocol.isFatalAlert()) {
  alertProtocol.setProcessed();
  if (session != null) {
    session.invalidate();
  }
  String description="Fatal alert received " + alertProtocol.getAlertDescription();
  shutdown();
  throw new SSLException(description);
}
 else {
  if (logger != null) {
    logger.println("Warning allert has been received: " + alertProtocol.getAlertDescription());
  }
switch (alertProtocol.getDescriptionCode()) {
case AlertProtocol.CLOSE_NOTIFY:
    alertProtocol.setProcessed();
  close_notify_was_received=true;
if (!close_notify_was_sent) {
  closeOutbound();
  closeInbound();
}
 else {
  closeInbound();
  shutdown();
}
break;
case AlertProtocol.NO_RENEGOTIATION:
alertProtocol.setProcessed();
if (session == null) {
throw new AlertException(AlertProtocol.HANDSHAKE_FAILURE,new SSLHandshakeException("Received no_renegotiation " + "during the initial handshake"));
}
 else {
handshakeProtocol.stop();
}
break;
default :
alertProtocol.setProcessed();
}
}
break;
}
return new SSLEngineResult(getEngineStatus(),getHandshakeStatus(),recProtIS.consumed(),appData.placeTo(dsts,offset,length));
}
 catch (BufferUnderflowException e) {
src.reset();
return new SSLEngineResult(SSLEngineResult.Status.BUFFER_UNDERFLOW,getHandshakeStatus(),0,0);
}
catch (AlertException e) {
alertProtocol.alert(AlertProtocol.FATAL,e.getDescriptionCode());
engine_was_closed=true;
src.reset();
if (session != null) {
session.invalidate();
}
throw e.getReason();
}
catch (SSLException e) {
throw e;
}
catch (IOException e) {
alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);
engine_was_closed=true;
throw new SSLException(e.getMessage());
}
}

{
  mapField("java.lang.Short.MAX_VALUE","short.MaxValue");
  mapField("java.lang.Short.MIN_VALUE","short.MinValue");
  mapField("java.lang.Integer.MAX_VALUE","int.MaxValue");
  mapField("java.lang.Integer.MIN_VALUE","int.MinValue");
  mapField("java.lang.Long.MAX_VALUE","long.MaxValue");
  mapField("java.lang.Long.MIN_VALUE","long.MinValue");
  mapField("java.lang.Float.MAX_VALUE","float.MaxValue");
  mapField("java.lang.Float.MIN_VALUE","float.MinValue");
  mapField("java.lang.Float.POSITIVE_INFINITY","float.PositiveInfinity");
  mapField("java.lang.Float.NEGATIVE_INFINITY","float.NegativeInfinity");
  mapField("java.lang.Double.MAX_VALUE","double.MaxValue");
  mapField("java.lang.Double.MIN_VALUE","double.MinValue");
  mapField("java.lang.Double.NEGATIVE_INFINITY","double.NegativeInfinity");
  mapField("java.lang.Double.POSITIVE_INFINITY","double.PositiveInfinity");
  mapField("java.lang.Boolean.TRUE","true");
  mapField("java.lang.Boolean.FALSE","false");
  mapField("java.lang.Byte.MAX_VALUE","byte.MaxValue");
  mapField("java.lang.Byte.MIN_VALUE","byte.MinValue");
  mapField("java.lang.Character.MAX_VALUE","char.MaxValue");
  mapField("java.lang.Character.MIN_VALUE","char.MinValue");
  mapMethod("java.lang.Character.isWhitespace","char.IsWhiteSpace");
  mapWrapperConstructor("java.lang.Boolean.Boolean","System.Convert.ToBoolean","boolean");
  mapWrapperConstructor("java.lang.Byte.Byte","System.Convert.ToByte","byte");
  mapWrapperConstructor("java.lang.Character.Character","System.Convert.ToChar","char");
  mapWrapperConstructor("java.lang.Short.Short","System.Convert.ToInt16","short");
  mapWrapperConstructor("java.lang.Integer.Integer","System.Convert.ToInt32","int");
  mapWrapperConstructor("java.lang.Long.Long","System.Convert.ToInt64","long");
  mapWrapperConstructor("java.lang.Float.Float","System.Convert.ToSingle","float");
  mapWrapperConstructor("java.lang.Double.Double","System.Convert.ToDouble","double");
  mapMethod("java.lang.Long.toString","System.Convert.ToString");
  mapMethod("java.lang.Long.parseLong","long.Parse");
  mapMethod("java.lang.Long.parseLong(java.lang.String,int)",sharpenUtilMethod("ParseLong"));
  mapMethod("java.lang.Long.bitCount",sharpenUtilMethod("Long_GetBitCount"));
  mapMethod("java.lang.Long.longValue","");
  mapMethod("java.lang.Long.valueOf","long.Parse");
  mapMethod("java.lang.Integer.toString","System.Convert.ToString");
  mapMethod("java.lang.Integer.valueOf","int.Parse");
  mapMethod("java.lang.Integer.valueOf(int)",sharpenUtilMethod("IntValueOf"));
  mapMethod("java.lang.Integer.parseInt","System.Convert.ToInt32");
  mapMethod("java.lang.Integer.toHexString",sharpenUtilMethod("IntToHexString"));
  mapMethod("java.lang.Integer.bitCount",sharpenUtilMethod("IntGetBitCount"));
  mapMethod("java.lang.Integer.intValue","");
  mapMethod("java.lang.Number.shortValue","");
  mapMethod("java.lang.Number.intValue","");
  mapMethod("java.lang.Number.longValue","");
  mapMethod("java.lang.Number.byteValue","");
  mapMethod("java.lang.Number.floatValue","");
  mapMethod("java.lang.Number.doubleValue","");
  mapMethod("java.lang.Character.charValue","");
  mapMethod("java.lang.Boolean.booleanValue","");
  mapMethod("java.lang.Boolean.valueOf","bool.Parse");
  mapMethod("java.lang.Byte.toHexString",sharpenUtilMethod("ByteToHexString"));
  mapMethod("java.lang.Float.toString","System.Convert.ToString");
  mapMethod("java.lang.Float.floatToIntBits",sharpenUtilMethod("FloatToIntBits"));
  mapMethod("java.lang.Float.floatToRawIntBits",sharpenUtilMethod("FloatToRawIntBits"));
  mapMethod("java.lang.Float.intBitsToFloat",sharpenUtilMethod("IntBitsToFloat"));
  mapMethod("java.lang.Float.parseFloat","float.Parse");
  mapMethod("java.lang.Double.toString","System.Convert.ToString");
  mapMethod("java.lang.Double.doubleToLongBits",sharpenUtilMethod("DoubleToLongBits"));
  mapMethod("java.lang.Double.longBitsToDouble",sharpenUtilMethod("LongBitsToDouble"));
  mapMethod("java.lang.Double.doubleToRawLongBits",sharpenUtilMethod("DoubleToRawLongBits"));
}

{
  mapMethod("java.lang.String.intern","string.Intern");
  mapMethod("java.lang.String.indexOf","IndexOf");
  mapMethod("java.lang.String.lastIndexOf","LastIndexOf");
  mapMethod("java.lang.String.trim","Trim");
  mapMethod("java.lang.String.toUpperCase","ToUpper");
  mapMethod("java.lang.String.toLowerCase","ToLower");
  mapMethod("java.lang.String.compareTo","CompareTo");
  mapMethod("java.lang.String.compareToIgnoreCase",sharpenStringMethod("CompareToIgnoreCase"));
  mapMethod("java.lang.Comparable.compareTo(java.lang.String)","string.CompareOrdinal");
  mapMethod("java.lang.String.toCharArray","ToCharArray");
  mapMethod("java.lang.String.replace","Replace");
  mapMethod("java.lang.String.startsWith(java.lang.String,int)",sharpenStringMethod("StartsWith"));
  mapMethod("java.lang.String.startsWith","StartsWith");
  mapMethod("java.lang.String.endsWith","EndsWith");
  mapMethod("java.lang.String.substring",sharpenStringMethod("Substring"));
  mapIndexer("java.lang.String.charAt");
  mapMethod("java.lang.String.getChars",sharpenStringMethod("GetCharsForString"));
  mapMethod("java.lang.String._getChars",sharpenStringMethod("GetCharsForString"));
  mapMethod("java.lang.String.getBytes(java.nio.charset.Charset)",miscRuntimeMethod("GetBytesForString"));
  mapMethod("java.lang.String.getBytes",sharpenStringMethod("GetBytesForString"));
  mapMethod("java.lang.String.equalsIgnoreCase",sharpenStringMethod("EqualsIgnoreCase"));
  mapMethod("java.lang.String.valueOf(java.lang.Object)",sharpenStringMethod("GetValueOf"));
  mapMethod("java.lang.String.valueOf","ToString");
  mapMethod("java.lang.String.String(byte[])",sharpenStringMethod("GetStringForBytes"));
  mapMethod("java.lang.String.String(byte[],int,int)",sharpenStringMethod("GetStringForBytes"));
  mapMethod("java.lang.String.String(byte[],int,int,java.lang.String)",sharpenStringMethod("GetStringForBytes"));
  mapMethod("java.lang.String.String(byte[],java.lang.String)",sharpenStringMethod("GetStringForBytes"));
  mapMethod("java.lang.String.String(int,int,char[])",sharpenStringMethod("GetString"));
  mapMethod("java.lang.String.String(byte[],java.nio.charset.Charset)",miscRuntimeMethod("GetStringForBytes"));
  mapMethod("java.lang.String.String(byte[],int,int,java.nio.charset.Charset)",miscRuntimeMethod("GetStringForBytes"));
  mapProperty("java.lang.String.length","Length");
  mapMethod("java.lang.String.format","string.Format");
  mapMethod("java.lang.String.contains","Contains");
  mapMethod("java.lang.String.codePointAt",sharpenCharMethod("CodePointAt"));
  mapMethod("java.lang.String.codePointBefore",sharpenCharMethod("CodePointBefore"));
  mapMethod("java.lang.String.split(java.lang.String,int)",miscRuntimeMethod("SplitStringRegex"));
  mapMethod("java.lang.String.split(java.lang.String)",miscRuntimeMethod("SplitStringRegex"));
  mapMethod("java.lang.String.split","Split");
  mapMethod("java.lang.String.copyValueOf",sharpenStringMethod("CopyValueOf"));
  mapMethod("java.lang.String.isEmpty","string.IsNullOrEmpty");
  mapMethod("java.lang.String.regionMatches",sharpenStringMethod("RegionMatches"));
  mapIndexer("java.lang.CharSequence.charAt");
  mapProperty("java.lang.CharSequence.length","Length");
  mapMethod("java.lang.CharSequence.subSequence","SubSequence");
  mapIndexer("java.lang.AbstractStringBuilder.charAt");
  mapProperty("java.lang.AbstractStringBuilder.length","Length");
  mapMethod("java.lang.AbstractStringBuilder.subSequence","SubSequence");
  mapMethod("java.lang.Character.isLowerCase(int)",sharpenCharMethod("IsLower"));
  mapMethod("java.lang.Character.isLowerCase","System.Char.IsLower");
  mapMethod("java.lang.Character.isUpperCase(int)",sharpenCharMethod("IsUpper"));
  mapMethod("java.lang.Character.isUpperCase","System.Char.IsUpper");
  mapMethod("java.lang.Character.isHighSurrogate","System.Char.IsHighSurrogate");
  mapMethod("java.lang.Character.isSpaceChar","System.Char.IsWhiteSpace");
  mapMethod("java.lang.Character.isLetter","System.Char.IsLetter");
  mapMethod("java.lang.Character.isDigit(int)",sharpenCharMethod("IsDigit"));
  mapMethod("java.lang.Character.isDigit","System.Char.IsDigit");
  mapMethod("java.lang.Character.isISOControl",sharpenCharMethod("IsISOControl"));
  mapMethod("java.lang.Character.digit",sharpenCharMethod("Digit"));
  mapMethod("java.lang.Character.isLetterOrDigit","System.Char.IsLetterOrDigit");
  mapMethod("java.lang.Character.isLetterOrDigit(int)",sharpenCharMethod("IsLetterOrDigit"));
  mapMethod("java.lang.Character.getType",sharpenCharMethod("GetType"));
  mapMethod("java.lang.Character.toLowerCase(int)",sharpenCharMethod("ToLower"));
  mapMethod("java.lang.Character.toLowerCase","System.Char.ToLower");
  mapMethod("java.lang.Character.toUpperCase(int)",sharpenCharMethod("ToUpper"));
  mapMethod("java.lang.Character.toUpperCase","System.Char.ToUpper");
  mapMethod("java.lang.Character.isSurrogatePair","System.Char.IsSurrogatePair");
  mapMethod("java.lang.Character.codePointAt",sharpenCharMethod("CodePointAt"));
  mapMethod("java.lang.Character.codePointBefore",sharpenCharMethod("CodePointBefore"));
  mapMethod("java.lang.Character.codePointCount",sharpenCharMethod("CodePointCount"));
  mapMethod("java.lang.Character.offsetByCodePoints",sharpenCharMethod("OffsetByCodePoints"));
  mapMethod("java.lang.Character.getDirectionality",sharpenCharMethod("GetDirectionality"));
  mapMethod("java.lang.Character.getNumericValue",sharpenCharMethod("GetNumericValue"));
  for (  final String name : charConstants) {
    mapField("java.lang.Character." + name,sharpenCharMethod(name));
  }
  mapType("java.util.Locale","System.Globalization.CultureInfo");
  mapProperty("java.util.Locale.getDefault","System.Globalization.CultureInfo.CurrentCulture");
  mapMethod("java.util.Locale.setDefault",sharpenUtilMethod("SetCurrentCulture"));
  mapProperty("java.util.Locale.US","System.Globalization.CultureInfo.InvariantCulture");
  mapMethod("java.util.Locale.getLanguage",sharpenUtilMethod("GetLanguage"));
  mapMethod("java.util.Locale.getCountry",sharpenUtilMethod("GetCountry"));
  mapMethod("java.util.Locale.getVariant",sharpenUtilMethod("GetVariant"));
  mapMethod("java.util.Locale.clone","Clone");
  mapType("libcore.icu.LocaleData",sharpenUtilType("LocaleData"));
  mapMethod("libcore.icu.LocaleData.get(java.util.Locale)",sharpenUtilMethod("GetLocaleData"));
}

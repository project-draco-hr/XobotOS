{
  mapType("java.lang.reflect.InvocationTargetException","System.Reflection.TargetInvocationException");
  mapProperty("java.lang.reflect.InvocationTargetException.getTargetException","InnerException");
  mapType("java.lang.IllegalAccessException","System.MemberAccessException");
  mapMethod("java.lang.reflect.Array.getLength",collectionRuntimeMethod("GetArrayLength"));
  mapMethod("java.lang.reflect.Array.get",collectionRuntimeMethod("GetArrayValue"));
  mapMethod("java.lang.reflect.Array.set",collectionRuntimeMethod("SetArrayValue"));
  mapMethod("java.lang.reflect.Array.newInstance","System.Array.CreateInstance");
  mapMethod("java.lang.Object.getClass","GetType");
  mapType("java.lang.Class","System.Type");
  mapType("java.lang.Class<>","System.Type");
  mapJavaLangClassProperty("getName","FullName");
  mapJavaLangClassProperty("getSimpleName","Name");
  mapJavaLangClassProperty("getSuperclass","BaseType");
  mapJavaLangClassProperty("isArray","IsArray");
  mapJavaLangClassProperty("isPrimitive","IsPrimitive");
  mapJavaLangClassProperty("isInterface","IsInterface");
  mapJavaLangClassMethod("isInstance","IsInstanceOfType");
  mapJavaLangClassMethod("newInstance","System.Activator.CreateInstance");
  mapJavaLangClassMethod("forName",reflectionRuntimeMethod("GetType"));
  mapJavaLangClassMethod("getComponentType","GetElementType");
  mapJavaLangClassMethod("getField","GetField");
  mapJavaLangClassMethod("getFields","GetFields");
  mapJavaLangClassMethod("getDeclaredField",reflectionRuntimeMethod("GetDeclaredField"));
  mapJavaLangClassMethod("getDeclaredFields",reflectionRuntimeMethod("GetDeclaredFields"));
  mapJavaLangClassMethod("getDeclaredMethod",reflectionRuntimeMethod("GetDeclaredMethod"));
  mapJavaLangClassMethod("getDeclaredMethods",reflectionRuntimeMethod("GetDeclaredMethods"));
  mapJavaLangClassMethod("getMethod",reflectionRuntimeMethod("GetMethod"));
  mapJavaLangClassMethod("getConstructor",reflectionRuntimeMethod("GetConstructor"));
  mapJavaLangClassMethod("isAssignableFrom","IsAssignableFrom");
  mapJavaLangClassMethod("getCanonicalName",reflectionRuntimeMethod("GetCanonicalName"));
  mapJavaLangClassMethod("asSubclass",reflectionRuntimeMethod("AsSubclass"));
  mapJavaLangClassMethod("getClassLoader",reflectionRuntimeMethod("GetClassLoader"));
  mapProperty("java.lang.reflect.Member.getName","Name");
  mapProperty("java.lang.reflect.Member.getDeclaringClass","DeclaringType");
  mapType("java.lang.reflect.Field","System.Reflection.FieldInfo");
  mapProperty("java.lang.reflect.Field.getName","Name");
  mapMethod("java.lang.reflect.Field.get","GetValue");
  mapMethod("java.lang.reflect.Field.set","SetValue");
  mapType("java.lang.reflect.Method","System.Reflection.MethodInfo");
  mapProperty("java.lang.reflect.Method.getName","Name");
  mapProperty("java.lang.reflect.Method.getReturnType","ReturnType");
  mapMethod("java.lang.reflect.Method.getParameterTypes",reflectionRuntimeMethod("GetParameterTypes"));
  removeMethod("java.lang.reflect.AccessibleObject.setAccessible");
  mapMethod("java.lang.reflect.Method.invoke",reflectionRuntimeMethod("InvokeMethod"));
  mapType("java.lang.reflect.Constructor<>","System.Reflection.ConstructorInfo");
  mapMember("java.lang.reflect.Constructor.newInstance",new MemberMapping("Invoke",MemberKind.Method,MappingFlags.CastResult));
}

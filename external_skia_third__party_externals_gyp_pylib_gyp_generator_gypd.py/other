'gypd output module\n\nThis module produces gyp input as its output.  Output files are given the\n.gypd extension to avoid overwriting the .gyp files that they are generated\nfrom.  Internal references to .gyp files (such as those found in\n"dependencies" sections) are not adjusted to point to .gypd files instead;\nunlike other paths, which are relative to the .gyp or .gypd file, such paths\nare relative to the directory from which gyp was run to create the .gypd file.\n\nThis generator module is intended to be a sample and a debugging aid, hence\nthe "d" for "debug" in .gypd.  It is useful to inspect the results of the\nvarious merges, expansions, and conditional evaluations performed by gyp\nand to see a representation of what would be fed to a generator module.\n\nIt\'s not advisable to rename .gypd files produced by this module to .gyp,\nbecause they will have all merges, expansions, and evaluations already\nperformed and the relevant constructs not present in the output; paths to\ndependencies may be wrong; and various sections that do not belong in .gyp\nfiles such as such as "included_files" and "*_excluded" will be present.\nOutput will also be stripped of comments.  This is not intended to be a\ngeneral-purpose gyp pretty-printer; for that, you probably just want to\nrun "pprint.pprint(eval(open(\'source.gyp\').read()))", which will still strip\ncomments but won\'t do all of the other things done to this module\'s output.\n\nThe specific formatting of the output generated by this module is subject\nto change.\n'
import gyp.common
import errno
import os
import pprint
_generator_identity_variables = ['EXECUTABLE_PREFIX', 'EXECUTABLE_SUFFIX', 'INTERMEDIATE_DIR', 'PRODUCT_DIR', 'RULE_INPUT_ROOT', 'RULE_INPUT_EXT', 'RULE_INPUT_NAME', 'RULE_INPUT_PATH', 'SHARED_INTERMEDIATE_DIR']
generator_default_variables = {}
generator_supports_multiple_toolsets = True
for v in _generator_identity_variables:
    generator_default_variables[v] = ('<(%s)' % v)

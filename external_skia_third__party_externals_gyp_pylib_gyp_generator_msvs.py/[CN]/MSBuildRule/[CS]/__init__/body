def __init__(self, rule, spec):
    self.display_name = rule['rule_name']
    self.rule_name = re.sub('\\W', '_', self.display_name)
    self.target_name = ('_' + self.rule_name)
    self.after_targets = (self.rule_name + 'AfterTargets')
    self.before_targets = (self.rule_name + 'BeforeTargets')
    self.depends_on = (self.rule_name + 'DependsOn')
    self.compute_output = ('Compute%sOutput' % self.rule_name)
    self.dirs_to_make = (self.rule_name + 'DirsToMake')
    self.tlog = (self.rule_name + '_tlog')
    self.extension = rule['extension']
    if (not self.extension.startswith('.')):
        self.extension = ('.' + self.extension)
    self.description = MSVSSettings.ConvertVCMacrosToMSBuild(rule.get('message', self.rule_name))
    old_additional_dependencies = _FixPaths(rule.get('inputs', []))
    self.additional_dependencies = ';'.join([MSVSSettings.ConvertVCMacrosToMSBuild(i) for i in old_additional_dependencies])
    old_outputs = _FixPaths(rule.get('outputs', []))
    self.outputs = ';'.join([MSVSSettings.ConvertVCMacrosToMSBuild(i) for i in old_outputs])
    old_command = _BuildCommandLineForRule(spec, rule, has_input_path=True)
    self.command = MSVSSettings.ConvertVCMacrosToMSBuild(old_command)

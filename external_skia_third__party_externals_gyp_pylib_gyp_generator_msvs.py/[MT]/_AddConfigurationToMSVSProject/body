def _AddConfigurationToMSVSProject(p, spec, config_type, config_name, config):
    "Adds a configuration to the MSVS project.\n\n  Many settings in a vcproj file are specific to a configuration.  This\n  function the main part of the vcproj file that's configuration specific.\n\n  Arguments:\n    p: The target project being generated.\n    spec: The target dictionary containing the properties of the target.\n    config_type: The configuration type, a number as defined by Microsoft.\n    config_name: The name of the configuration.\n    config: The dictionnary that defines the special processing to be done\n            for this configuration.\n  "
    (include_dirs, resource_include_dirs) = _GetIncludeDirs(config)
    libraries = _GetLibraries(spec)
    (out_file, vc_tool, _) = _GetOutputFilePathAndTool(spec)
    defines = _GetDefines(config)
    defines = [_EscapeCppDefineForMSVS(d) for d in defines]
    disabled_warnings = _GetDisabledWarnings(config)
    prebuild = config.get('msvs_prebuild')
    postbuild = config.get('msvs_postbuild')
    def_file = _GetModuleDefinition(spec)
    precompiled_header = config.get('msvs_precompiled_header')
    tools = dict()
    msvs_settings = config.get('msvs_settings', {})
    MSVSSettings.ValidateMSVSSettings(msvs_settings)
    for tool in msvs_settings:
        settings = config['msvs_settings'][tool]
        for setting in settings:
            _ToolAppend(tools, tool, setting, settings[setting])
    _ToolAppend(tools, 'VCCLCompilerTool', 'AdditionalIncludeDirectories', include_dirs)
    _ToolAppend(tools, 'VCResourceCompilerTool', 'AdditionalIncludeDirectories', resource_include_dirs)
    _ToolAppend(tools, 'VCLinkerTool', 'AdditionalDependencies', libraries)
    if out_file:
        _ToolAppend(tools, vc_tool, 'OutputFile', out_file, only_if_unset=True)
    _ToolAppend(tools, 'VCCLCompilerTool', 'PreprocessorDefinitions', defines)
    _ToolAppend(tools, 'VCResourceCompilerTool', 'PreprocessorDefinitions', defines)
    _ToolAppend(tools, 'VCCLCompilerTool', 'ProgramDataBaseFileName', '$(IntDir)\\$(ProjectName)\\vc80.pdb', only_if_unset=True)
    _ToolAppend(tools, 'VCCLCompilerTool', 'DisableSpecificWarnings', disabled_warnings)
    _ToolAppend(tools, 'VCPreBuildEventTool', 'CommandLine', prebuild)
    _ToolAppend(tools, 'VCPostBuildEventTool', 'CommandLine', postbuild)
    if precompiled_header:
        precompiled_header = os.path.split(precompiled_header)[1]
        _ToolAppend(tools, 'VCCLCompilerTool', 'UsePrecompiledHeader', '2')
        _ToolAppend(tools, 'VCCLCompilerTool', 'PrecompiledHeaderThrough', precompiled_header)
        _ToolAppend(tools, 'VCCLCompilerTool', 'ForcedIncludeFiles', precompiled_header)
    if (spec['type'] == 'loadable_module'):
        _ToolAppend(tools, 'VCLinkerTool', 'IgnoreImportLibrary', 'true')
    if def_file:
        _ToolAppend(tools, 'VCLinkerTool', 'ModuleDefinitionFile', def_file)
    _AddConfigurationToMSVS(p, spec, tools, config, config_type, config_name)

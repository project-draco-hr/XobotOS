def _AddSources2(spec, sources, exclusions, grouped_sources, extension_to_rule_name, sources_handled_by_action):
    extensions_excluded_from_precompile = []
    for source in sources:
        if isinstance(source, MSVSProject.Filter):
            _AddSources2(spec, source.contents, exclusions, grouped_sources, extension_to_rule_name, sources_handled_by_action)
        elif (not (source in sources_handled_by_action)):
            detail = []
            excluded_configurations = exclusions.get(source, [])
            if (len(excluded_configurations) == len(spec['configurations'])):
                detail.append(['ExcludedFromBuild', 'true'])
            else:
                for (config_name, configuration) in sorted(excluded_configurations):
                    condition = _GetConfigurationCondition(config_name, configuration)
                    detail.append(['ExcludedFromBuild', {'Condition': condition, }, 'true'])
            for (config_name, configuration) in spec['configurations'].iteritems():
                precompiled_source = configuration.get('msvs_precompiled_source', '')
                if (precompiled_source != ''):
                    precompiled_source = _FixPath(precompiled_source)
                    if (not extensions_excluded_from_precompile):
                        (basename, extension) = os.path.splitext(precompiled_source)
                        if (extension == '.c'):
                            extensions_excluded_from_precompile = ['.cc', '.cpp', '.cxx']
                        else:
                            extensions_excluded_from_precompile = ['.c']
                if (precompiled_source == source):
                    condition = _GetConfigurationCondition(config_name, configuration)
                    detail.append(['PrecompiledHeader', {'Condition': condition, }, 'Create'])
                else:
                    for extension in extensions_excluded_from_precompile:
                        if source.endswith(extension):
                            detail.append(['PrecompiledHeader', ''])
                            detail.append(['ForcedIncludeFiles', ''])
            (group, element) = _MapFileToMsBuildSourceType(source, extension_to_rule_name)
            grouped_sources[group].append(([element, {'Include': source, }] + detail))

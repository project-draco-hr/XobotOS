def _AdjustSourcesAndConvertToFilterHierarchy(spec, options, gyp_dir, sources, excluded_sources):
    'Adjusts the list of sources and excluded sources.\n\n  Also converts the sets to lists.\n\n  Arguments:\n    spec: The target dictionary containing the properties of the target.\n    options: Global generator options.\n    gyp_dir: The path to the gyp file being processed.\n    sources: A set of sources to be included for this project.\n    excluded_sources: A set of sources to be excluded for this project.\n  Returns:\n    A trio of (list of sources, list of excluded sources,\n               path of excluded IDL file)\n  '
    excluded_sources.update(set(spec.get('sources_excluded', [])))
    sources.update(excluded_sources)
    sources = _FixPaths(sources)
    excluded_sources = _FixPaths(excluded_sources)
    excluded_idl = _IdlFilesHandledNonNatively(spec, sources)
    precompiled_related = _GetPrecompileRelatedFiles(spec)
    fully_excluded = [i for i in excluded_sources if (i not in precompiled_related)]
    sources = [i.split('\\') for i in sources]
    sources = _ConvertSourcesToFilterHierarchy(sources, excluded=fully_excluded)
    if (spec['type'] == 'dummy_executable'):
        dummy_relpath = gyp.common.RelativePath((options.depth + '\\tools\\gyp\\gyp_dummy.c'), gyp_dir)
        sources.append(dummy_relpath)
    return (sources, excluded_sources, excluded_idl)

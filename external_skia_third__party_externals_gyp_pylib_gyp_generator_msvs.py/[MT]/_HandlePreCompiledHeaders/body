def _HandlePreCompiledHeaders(p, sources, spec):
    extensions_excluded_from_precompile = []
    for (config_name, config) in spec['configurations'].iteritems():
        source = config.get('msvs_precompiled_source')
        if source:
            source = _FixPath(source)
            tool = MSVSProject.Tool('VCCLCompilerTool', {'UsePrecompiledHeader': '1', })
            p.AddFileConfig(source, _ConfigFullName(config_name, config), {}, tools=[tool])
            (basename, extension) = os.path.splitext(source)
            if (extension == '.c'):
                extensions_excluded_from_precompile = ['.cc', '.cpp', '.cxx']
            else:
                extensions_excluded_from_precompile = ['.c']

    def DisableForSourceTree(source_tree):
        for source in source_tree:
            if isinstance(source, MSVSProject.Filter):
                DisableForSourceTree(source.contents)
            else:
                (basename, extension) = os.path.splitext(source)
                if (extension in extensions_excluded_from_precompile):
                    for (config_name, config) in spec['configurations'].iteritems():
                        tool = MSVSProject.Tool('VCCLCompilerTool', {'UsePrecompiledHeader': '0', 'ForcedIncludeFiles': '$(NOINHERIT)', })
                        p.AddFileConfig(_FixPath(source), _ConfigFullName(config_name, config), {}, tools=[tool])
    if extensions_excluded_from_precompile:
        DisableForSourceTree(sources)

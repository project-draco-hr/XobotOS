def _GenerateRulesForMSBuild(output_dir, options, spec, sources, excluded_sources, props_files_of_rules, targets_files_of_rules, actions_to_add, extension_to_rule_name):
    rules = spec.get('rules', [])
    rules_native = [r for r in rules if (not int(r.get('msvs_external_rule', 0)))]
    rules_external = [r for r in rules if int(r.get('msvs_external_rule', 0))]
    msbuild_rules = []
    for rule in rules_native:
        msbuild_rule = MSBuildRule(rule, spec)
        msbuild_rules.append(msbuild_rule)
        extension_to_rule_name[msbuild_rule.extension] = msbuild_rule.rule_name
    if msbuild_rules:
        base = (spec['target_name'] + options.suffix)
        props_name = (base + '.props')
        targets_name = (base + '.targets')
        xml_name = (base + '.xml')
        props_files_of_rules.add(props_name)
        targets_files_of_rules.add(targets_name)
        props_path = os.path.join(output_dir, props_name)
        targets_path = os.path.join(output_dir, targets_name)
        xml_path = os.path.join(output_dir, xml_name)
        _GenerateMSBuildRulePropsFile(props_path, msbuild_rules)
        _GenerateMSBuildRuleTargetsFile(targets_path, msbuild_rules)
        _GenerateMSBuildRuleXmlFile(xml_path, msbuild_rules)
    if rules_external:
        _GenerateExternalRules(rules_external, output_dir, spec, sources, options, actions_to_add)
    _AdjustSourcesForRules(rules, sources, excluded_sources)

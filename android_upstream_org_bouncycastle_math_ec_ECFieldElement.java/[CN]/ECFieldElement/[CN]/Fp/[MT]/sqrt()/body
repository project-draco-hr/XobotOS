{
  if (!q.testBit(0)) {
    throw new RuntimeException("not done yet");
  }
  if (q.testBit(1)) {
    ECFieldElement z=new Fp(q,x.modPow(q.shiftRight(2).add(ECConstants.ONE),q));
    return z.square().equals(this) ? z : null;
  }
  BigInteger qMinusOne=q.subtract(ECConstants.ONE);
  BigInteger legendreExponent=qMinusOne.shiftRight(1);
  if (!(x.modPow(legendreExponent,q).equals(ECConstants.ONE))) {
    return null;
  }
  BigInteger u=qMinusOne.shiftRight(2);
  BigInteger k=u.shiftLeft(1).add(ECConstants.ONE);
  BigInteger Q=this.x;
  BigInteger fourQ=Q.shiftLeft(2).mod(q);
  BigInteger U, V;
  Random rand=new Random();
  do {
    BigInteger P;
    do {
      P=new BigInteger(q.bitLength(),rand);
    }
 while (P.compareTo(q) >= 0 || !(P.multiply(P).subtract(fourQ).modPow(legendreExponent,q).equals(qMinusOne)));
    BigInteger[] result=lucasSequence(q,P,Q,k);
    U=result[0];
    V=result[1];
    if (V.multiply(V).mod(q).equals(fourQ)) {
      if (V.testBit(0)) {
        V=V.add(q);
      }
      V=V.shiftRight(1);
      return new ECFieldElement.Fp(q,V);
    }
  }
 while (U.equals(ECConstants.ONE) || U.equals(qMinusOne));
  return null;
}

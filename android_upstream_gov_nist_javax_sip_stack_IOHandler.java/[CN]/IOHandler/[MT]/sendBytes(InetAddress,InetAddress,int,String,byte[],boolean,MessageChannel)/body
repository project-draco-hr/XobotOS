{
  int retry_count=0;
  int max_retry=retry ? 2 : 1;
  int length=bytes.length;
  if (sipStack.isLoggingEnabled()) {
    sipStack.getStackLogger().logDebug("sendBytes " + transport + " inAddr "+ receiverAddress.getHostAddress()+ " port = "+ contactPort+ " length = "+ length);
  }
  if (sipStack.isLoggingEnabled() && sipStack.isLogStackTraceOnMessageSend()) {
    sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);
  }
  if (transport.compareToIgnoreCase(TCP) == 0) {
    String key=makeKey(receiverAddress,contactPort);
    try {
      boolean retval=this.ioSemaphore.tryAcquire(10000,TimeUnit.MILLISECONDS);
      if (!retval) {
        throw new IOException("Could not acquire IO Semaphore after 10 seconds -- giving up ");
      }
    }
 catch (    InterruptedException ex) {
      throw new IOException("exception in acquiring sem");
    }
    Socket clientSock=getSocket(key);
    try {
      while (retry_count < max_retry) {
        if (clientSock == null) {
          if (sipStack.isLoggingEnabled()) {
            sipStack.getStackLogger().logDebug("inaddr = " + receiverAddress);
            sipStack.getStackLogger().logDebug("port = " + contactPort);
          }
          clientSock=sipStack.getNetworkLayer().createSocket(receiverAddress,contactPort,senderAddress);
          OutputStream outputStream=clientSock.getOutputStream();
          writeChunks(outputStream,bytes,length);
          putSocket(key,clientSock);
          break;
        }
 else {
          try {
            OutputStream outputStream=clientSock.getOutputStream();
            writeChunks(outputStream,bytes,length);
            break;
          }
 catch (          IOException ex) {
            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logDebug("IOException occured retryCount " + retry_count);
            removeSocket(key);
            try {
              clientSock.close();
            }
 catch (            Exception e) {
            }
            clientSock=null;
            retry_count++;
          }
        }
      }
    }
  finally {
      ioSemaphore.release();
    }
    if (clientSock == null) {
      if (sipStack.isLoggingEnabled()) {
        sipStack.getStackLogger().logDebug(this.socketTable.toString());
        sipStack.getStackLogger().logError("Could not connect to " + receiverAddress + ":"+ contactPort);
      }
      throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);
    }
 else     return clientSock;
  }
 else   if (transport.compareToIgnoreCase(TLS) == 0) {
    String key=makeKey(receiverAddress,contactPort);
    try {
      boolean retval=this.ioSemaphore.tryAcquire(10000,TimeUnit.MILLISECONDS);
      if (!retval)       throw new IOException("Timeout acquiring IO SEM");
    }
 catch (    InterruptedException ex) {
      throw new IOException("exception in acquiring sem");
    }
    Socket clientSock=getSocket(key);
    try {
      while (retry_count < max_retry) {
        if (clientSock == null) {
          if (sipStack.isLoggingEnabled()) {
            sipStack.getStackLogger().logDebug("inaddr = " + receiverAddress);
            sipStack.getStackLogger().logDebug("port = " + contactPort);
          }
          clientSock=sipStack.getNetworkLayer().createSSLSocket(receiverAddress,contactPort,senderAddress);
          SSLSocket sslsock=(SSLSocket)clientSock;
          HandshakeCompletedListener listner=new HandshakeCompletedListenerImpl((TLSMessageChannel)messageChannel);
          ((TLSMessageChannel)messageChannel).setHandshakeCompletedListener(listner);
          sslsock.addHandshakeCompletedListener(listner);
          sslsock.setEnabledProtocols(sipStack.getEnabledProtocols());
          sslsock.startHandshake();
          OutputStream outputStream=clientSock.getOutputStream();
          writeChunks(outputStream,bytes,length);
          putSocket(key,clientSock);
          break;
        }
 else {
          try {
            OutputStream outputStream=clientSock.getOutputStream();
            writeChunks(outputStream,bytes,length);
            break;
          }
 catch (          IOException ex) {
            if (sipStack.isLoggingEnabled())             sipStack.getStackLogger().logException(ex);
            removeSocket(key);
            try {
              clientSock.close();
            }
 catch (            Exception e) {
            }
            clientSock=null;
            retry_count++;
          }
        }
      }
    }
  finally {
      ioSemaphore.release();
    }
    if (clientSock == null) {
      throw new IOException("Could not connect to " + receiverAddress + ":"+ contactPort);
    }
 else     return clientSock;
  }
 else {
    DatagramSocket datagramSock=sipStack.getNetworkLayer().createDatagramSocket();
    datagramSock.connect(receiverAddress,contactPort);
    DatagramPacket dgPacket=new DatagramPacket(bytes,0,length,receiverAddress,contactPort);
    datagramSock.send(dgPacket);
    datagramSock.close();
    return null;
  }
}

{
  if ((offset | byteCount) < 0 || byteCount > data.length - offset) {
    throw failedBoundsCheck(data.length,offset,byteCount);
  }
  String canonicalCharsetName=charset.name();
  if (canonicalCharsetName.equals("UTF-8")) {
    byte[] d=data;
    char[] v=new char[byteCount];
    int idx=offset;
    int last=offset + byteCount;
    int s=0;
    outer:     while (idx < last) {
      byte b0=d[idx++];
      if ((b0 & 0x80) == 0) {
        int val=b0 & 0xff;
        v[s++]=(char)val;
      }
 else       if (((b0 & 0xe0) == 0xc0) || ((b0 & 0xf0) == 0xe0) || ((b0 & 0xf8) == 0xf0)|| ((b0 & 0xfc) == 0xf8)|| ((b0 & 0xfe) == 0xfc)) {
        int utfCount=1;
        if ((b0 & 0xf0) == 0xe0)         utfCount=2;
 else         if ((b0 & 0xf8) == 0xf0)         utfCount=3;
 else         if ((b0 & 0xfc) == 0xf8)         utfCount=4;
 else         if ((b0 & 0xfe) == 0xfc)         utfCount=5;
        if (idx + utfCount > last) {
          v[s++]=REPLACEMENT_CHAR;
          break;
        }
        int val=b0 & (0x1f >> (utfCount - 1));
        for (int i=0; i < utfCount; i++) {
          byte b=d[idx++];
          if ((b & 0xC0) != 0x80) {
            v[s++]=REPLACEMENT_CHAR;
            idx--;
            continue outer;
          }
          val<<=6;
          val|=b & 0x3f;
        }
        if ((utfCount != 2) && (val >= 0xD800) && (val <= 0xDFFF)) {
          v[s++]=REPLACEMENT_CHAR;
          continue;
        }
        if (val > 0x10FFFF) {
          v[s++]=REPLACEMENT_CHAR;
          continue;
        }
        if (val < 0x10000) {
          v[s++]=(char)val;
        }
 else {
          int x=val & 0xffff;
          int u=(val >> 16) & 0x1f;
          int w=(u - 1) & 0xffff;
          int hi=0xd800 | (w << 6) | (x >> 10);
          int lo=0xdc00 | (x & 0x3ff);
          v[s++]=(char)hi;
          v[s++]=(char)lo;
        }
      }
 else {
        v[s++]=REPLACEMENT_CHAR;
      }
    }
    if (s == byteCount) {
      this.offset=0;
      this.value=v;
      this.count=s;
    }
 else {
      this.offset=0;
      this.value=new char[s];
      this.count=s;
      System.arraycopy(v,0,value,0,s);
    }
  }
 else   if (canonicalCharsetName.equals("ISO-8859-1")) {
    this.offset=0;
    this.value=new char[byteCount];
    this.count=byteCount;
    Charsets.isoLatin1BytesToChars(data,offset,byteCount,value);
  }
 else   if (canonicalCharsetName.equals("US-ASCII")) {
    this.offset=0;
    this.value=new char[byteCount];
    this.count=byteCount;
    Charsets.asciiBytesToChars(data,offset,byteCount,value);
  }
 else {
    CharBuffer cb=charset.decode(ByteBuffer.wrap(data,offset,byteCount));
    this.offset=0;
    this.count=cb.length();
    if (count > 0) {
      this.value=new char[count];
      System.arraycopy(cb.array(),0,value,0,count);
    }
 else {
      this.value=EmptyArray.CHAR;
    }
  }
}

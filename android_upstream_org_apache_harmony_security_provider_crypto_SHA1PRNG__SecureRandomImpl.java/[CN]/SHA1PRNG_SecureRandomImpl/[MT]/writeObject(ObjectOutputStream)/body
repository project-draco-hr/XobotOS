{
  int[] intData=null;
  final int only_hash=EXTRAFRAME_OFFSET;
  final int hashes_and_frame=EXTRAFRAME_OFFSET * 2 + FRAME_LENGTH;
  final int hashes_and_frame_extra=EXTRAFRAME_OFFSET * 2 + FRAME_LENGTH * 2;
  oos.writeLong(seedLength);
  oos.writeLong(counter);
  oos.writeInt(state);
  oos.writeInt(seed[BYTES_OFFSET]);
  int nRemaining=(seed[BYTES_OFFSET] + 3) >> 2;
  if (state != NEXT_BYTES) {
    intData=new int[only_hash + nRemaining];
    System.arraycopy(seed,0,intData,0,nRemaining);
    System.arraycopy(seed,HASH_OFFSET,intData,nRemaining,EXTRAFRAME_OFFSET);
  }
 else {
    int offset=0;
    if (seed[BYTES_OFFSET] < MAX_BYTES) {
      intData=new int[hashes_and_frame + nRemaining];
    }
 else {
      intData=new int[hashes_and_frame_extra + nRemaining];
      intData[offset]=seed[FRAME_LENGTH];
      intData[offset + 1]=seed[FRAME_LENGTH + 1];
      intData[offset + 2]=seed[FRAME_LENGTH + 14];
      intData[offset + 3]=seed[FRAME_LENGTH + 15];
      offset+=4;
    }
    System.arraycopy(seed,0,intData,offset,FRAME_LENGTH);
    offset+=FRAME_LENGTH;
    System.arraycopy(copies,FRAME_LENGTH + EXTRAFRAME_OFFSET,intData,offset,nRemaining);
    offset+=nRemaining;
    System.arraycopy(copies,0,intData,offset,EXTRAFRAME_OFFSET);
    offset+=EXTRAFRAME_OFFSET;
    System.arraycopy(seed,HASH_OFFSET,intData,offset,EXTRAFRAME_OFFSET);
  }
  for (int i=0; i < intData.length; i++) {
    oos.writeInt(intData[i]);
  }
  oos.writeInt(nextBIndex);
  oos.write(nextBytes,nextBIndex,HASHBYTES_TO_USE - nextBIndex);
}

{
  X509CertStoreSelector selector=new X509CertStoreSelector();
  try {
    byte[] issuerPrincipal=CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded();
    selector.setSubject(issuerPrincipal);
  }
 catch (  IOException e) {
    throw new AnnotatedException("Subject criteria for certificate selector to find issuer certificate for CRL could not be set.",e);
  }
  Collection coll;
  try {
    coll=CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getStores());
    coll.addAll(CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getAdditionalStores()));
    coll.addAll(CertPathValidatorUtilities.findCertificates(selector,paramsPKIX.getCertStores()));
  }
 catch (  AnnotatedException e) {
    throw new AnnotatedException("Issuer certificate for CRL cannot be searched.",e);
  }
  coll.add(defaultCRLSignCert);
  Iterator cert_it=coll.iterator();
  List validCerts=new ArrayList();
  List validKeys=new ArrayList();
  while (cert_it.hasNext()) {
    X509Certificate signingCert=(X509Certificate)cert_it.next();
    if (signingCert.equals(defaultCRLSignCert)) {
      validCerts.add(signingCert);
      validKeys.add(defaultCRLSignKey);
      continue;
    }
    try {
      CertPathBuilder builder=CertPathBuilder.getInstance("PKIX",BouncyCastleProvider.PROVIDER_NAME);
      selector=new X509CertStoreSelector();
      selector.setCertificate(signingCert);
      ExtendedPKIXParameters temp=(ExtendedPKIXParameters)paramsPKIX.clone();
      temp.setTargetCertConstraints(selector);
      ExtendedPKIXBuilderParameters params=(ExtendedPKIXBuilderParameters)ExtendedPKIXBuilderParameters.getInstance(temp);
      if (certPathCerts.contains(signingCert)) {
        params.setRevocationEnabled(false);
      }
 else {
        params.setRevocationEnabled(true);
      }
      List certs=builder.build(params).getCertPath().getCertificates();
      validCerts.add(signingCert);
      validKeys.add(CertPathValidatorUtilities.getNextWorkingKey(certs,0));
    }
 catch (    CertPathBuilderException e) {
      throw new AnnotatedException("Internal error.",e);
    }
catch (    CertPathValidatorException e) {
      throw new AnnotatedException("Public key of issuer certificate of CRL could not be retrieved.",e);
    }
catch (    Exception e) {
      throw new RuntimeException(e.getMessage());
    }
  }
  Set checkKeys=new HashSet();
  AnnotatedException lastException=null;
  for (int i=0; i < validCerts.size(); i++) {
    X509Certificate signCert=(X509Certificate)validCerts.get(i);
    boolean[] keyusage=signCert.getKeyUsage();
    if (keyusage != null && (keyusage.length < 7 || !keyusage[CRL_SIGN])) {
      lastException=new AnnotatedException("Issuer certificate key usage extension does not permit CRL signing.");
    }
 else {
      checkKeys.add(validKeys.get(i));
    }
  }
  if (checkKeys.isEmpty() && lastException == null) {
    throw new AnnotatedException("Cannot find a valid issuer certificate.");
  }
  if (checkKeys.isEmpty() && lastException != null) {
    throw lastException;
  }
  return checkKeys;
}

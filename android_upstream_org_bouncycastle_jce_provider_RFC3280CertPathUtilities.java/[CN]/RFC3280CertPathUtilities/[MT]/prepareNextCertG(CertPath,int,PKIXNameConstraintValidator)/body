{
  List certs=certPath.getCertificates();
  X509Certificate cert=(X509Certificate)certs.get(index);
  NameConstraints nc=null;
  try {
    ASN1Sequence ncSeq=DERSequence.getInstance(CertPathValidatorUtilities.getExtensionValue(cert,RFC3280CertPathUtilities.NAME_CONSTRAINTS));
    if (ncSeq != null) {
      nc=new NameConstraints(ncSeq);
    }
  }
 catch (  Exception e) {
    throw new ExtCertPathValidatorException("Name constraints extension could not be decoded.",e,certPath,index);
  }
  if (nc != null) {
    ASN1Sequence permitted=nc.getPermittedSubtrees();
    if (permitted != null) {
      try {
        nameConstraintValidator.intersectPermittedSubtree(permitted);
      }
 catch (      Exception ex) {
        throw new ExtCertPathValidatorException("Permitted subtrees cannot be build from name constraints extension.",ex,certPath,index);
      }
    }
    ASN1Sequence excluded=nc.getExcludedSubtrees();
    if (excluded != null) {
      Enumeration e=excluded.getObjects();
      try {
        while (e.hasMoreElements()) {
          GeneralSubtree subtree=GeneralSubtree.getInstance(e.nextElement());
          nameConstraintValidator.addExcludedSubtree(subtree);
        }
      }
 catch (      Exception ex) {
        throw new ExtCertPathValidatorException("Excluded subtrees cannot be build from name constraints extension.",ex,certPath,index);
      }
    }
  }
}

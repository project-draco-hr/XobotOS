def GenerateOutput(target_list, target_dicts, data, params):
    options = params['options']
    generator_flags = params.get('generator_flags', {})
    if options.generator_output:
        raise NotImplementedError, '--generator_output not implemented for ninja'
    config_name = generator_flags.get('config', None)
    if (config_name is None):
        config_name = target_dicts[target_list[0]]['default_configuration']
    builddir = os.path.join(generator_flags.get('output_dir', 'out'), config_name)
    master_ninja = ninja_syntax.Writer(OpenOutput(os.path.join(options.toplevel_dir, builddir, 'build.ninja')), width=120)
    master_ninja.variable('cc', os.environ.get('CC', 'gcc'))
    master_ninja.variable('cxx', os.environ.get('CXX', 'g++'))
    master_ninja.variable('ld', '$cxx -Wl,--threads -Wl,--thread-count=4')
    master_ninja.variable('cc_host', '$cc')
    master_ninja.variable('cxx_host', '$cxx')
    master_ninja.newline()
    master_ninja.rule('cc', description='CC $out', command='$cc -MMD -MF $out.d $defines $includes $cflags $cflags_c -c $in -o $out', depfile='$out.d')
    master_ninja.rule('cxx', description='CXX $out', command='$cxx -MMD -MF $out.d $defines $includes $cflags $cflags_cc -c $in -o $out', depfile='$out.d')
    master_ninja.rule('alink', description='AR $out', command='rm -f $out && ar rcsT $out $in')
    master_ninja.rule('solink', description='SOLINK $out', command='$ld -shared $ldflags -o $out -Wl,-soname=$soname -Wl,--whole-archive $in -Wl,--no-whole-archive $libs')
    master_ninja.rule('solink_module', description='SOLINK(module) $out', command='$ld -shared $ldflags -o $out -Wl,-soname=$soname -Wl,--start-group $in -Wl,--end-group $libs')
    master_ninja.rule('link', description='LINK $out', command='$ld $ldflags -o $out -Wl,-rpath=\\$$ORIGIN/lib -Wl,--start-group $in -Wl,--end-group $libs')
    master_ninja.rule('stamp', description='STAMP $out', command='touch $out')
    master_ninja.rule('copy', description='COPY $in $out', command='ln -f $in $out 2>/dev/null || cp -af $in $out')
    master_ninja.newline()
    all_targets = set()
    for build_file in params['build_files']:
        for target in gyp.common.AllTargets(target_list, target_dicts, build_file):
            all_targets.add(target)
    all_outputs = set()
    target_outputs = {}
    for qualified_target in target_list:
        (build_file, name, toolset) = gyp.common.ParseQualifiedTarget(qualified_target)
        build_file = gyp.common.RelativePath(build_file, options.depth)
        base_path = os.path.dirname(build_file)
        obj = 'obj'
        if (toolset != 'target'):
            obj += ('.' + toolset)
        output_file = os.path.join(obj, base_path, (name + '.ninja'))
        spec = target_dicts[qualified_target]
        config = spec['configurations'][config_name]
        writer = NinjaWriter(target_outputs, base_path, builddir, OpenOutput(os.path.join(options.toplevel_dir, builddir, output_file)))
        master_ninja.subninja(output_file)
        output = writer.WriteSpec(spec, config)
        if output:
            linkable = (spec['type'] in ('static_library', 'shared_library'))
            target_outputs[qualified_target] = (output, linkable)
            if (qualified_target in all_targets):
                all_outputs.add(output)
    if all_outputs:
        master_ninja.build('all', 'phony', list(all_outputs))

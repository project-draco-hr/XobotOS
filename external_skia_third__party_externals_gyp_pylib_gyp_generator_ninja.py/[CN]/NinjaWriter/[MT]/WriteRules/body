def WriteRules(self, rules, extra_sources, prebuild):
    all_outputs = []
    for rule in rules:
        name = rule['rule_name']
        args = rule['action']
        description = self.GenerateDescription('RULE', rule.get('message', None), (('%s ' + generator_default_variables['RULE_INPUT_PATH']) % name))
        rule_name = self.WriteNewNinjaRule(name, args, description)
        special_locals = ('source', 'root', 'ext', 'name')
        needed_variables = set(['source'])
        for argument in args:
            for var in special_locals:
                if (('${%s}' % var) in argument):
                    needed_variables.add(var)
        for source in rule.get('rule_sources', []):
            basename = os.path.basename(source)
            (root, ext) = os.path.splitext(basename)
            outputs = []
            for output in rule['outputs']:
                outputs.append(output.replace(generator_default_variables['RULE_INPUT_ROOT'], root))
            if int(rule.get('process_outputs_as_sources', False)):
                extra_sources += outputs
            extra_bindings = []
            for var in needed_variables:
                if (var == 'root'):
                    extra_bindings.append(('root', root))
                elif (var == 'source'):
                    source_expanded = self.ExpandSpecial(source, self.base_to_build)
                    extra_bindings.append(('source', source_expanded))
                elif (var == 'ext'):
                    extra_bindings.append(('ext', ext))
                elif (var == 'name'):
                    extra_bindings.append(('name', basename))
                else:
                    assert (var == None), repr(var)
            inputs = map(self.GypPathToNinja, rule.get('inputs', []))
            outputs = map(self.GypPathToNinja, outputs)
            self.ninja.build(outputs, rule_name, self.GypPathToNinja(source), implicit=inputs, order_only=prebuild, variables=extra_bindings)
            all_outputs.extend(outputs)
    return all_outputs

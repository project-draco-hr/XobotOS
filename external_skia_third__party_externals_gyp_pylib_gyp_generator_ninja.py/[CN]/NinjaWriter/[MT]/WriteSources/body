def WriteSources(self, config, sources, predepends):
    'Write build rules to compile all of |sources|.'
    if (self.toolset == 'host'):
        self.ninja.variable('cc', '$cc_host')
        self.ninja.variable('cxx', '$cxx_host')
    self.WriteVariableList('defines', [('-D' + MaybeQuoteShellArgument(ninja_syntax.escape(d))) for d in config.get('defines', [])])
    self.WriteVariableList('includes', [('-I' + self.GypPathToNinja(i)) for i in config.get('include_dirs', [])])
    self.WriteVariableList('cflags', config.get('cflags'))
    self.WriteVariableList('cflags_c', config.get('cflags_c'))
    self.WriteVariableList('cflags_cc', config.get('cflags_cc'))
    self.ninja.newline()
    outputs = []
    for source in sources:
        (filename, ext) = os.path.splitext(source)
        ext = ext[1:]
        if (ext in ('cc', 'cpp', 'cxx')):
            command = 'cxx'
        elif (ext in ('c', 's', 'S')):
            command = 'cc'
        else:
            continue
        input = self.GypPathToNinja(source)
        output = self.GypPathToUniqueOutput((filename + '.o'))
        self.ninja.build(output, command, input, order_only=predepends)
        outputs.append(output)
    self.ninja.newline()
    return outputs

{
  CipherSuite cipher_suite;
  checkCompression: {
    for (int i=0; i < clientHello.compression_methods.length; i++) {
      if (clientHello.compression_methods[i] == 0) {
        break checkCompression;
      }
    }
    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");
  }
  if (!ProtocolVersion.isSupported(clientHello.client_version)) {
    fatalAlert(AlertProtocol.PROTOCOL_VERSION,"PROTOCOL VERSION. Unsupported client version " + clientHello.client_version[0] + clientHello.client_version[1]);
  }
  isResuming=false;
  FIND:   if (clientHello.session_id.length != 0) {
    SSLSessionImpl sessionToResume;
    boolean reuseCurrent=false;
    if (session != null && Arrays.equals(session.id,clientHello.session_id)) {
      if (session.isValid()) {
        isResuming=true;
        break FIND;
      }
      reuseCurrent=true;
    }
    sessionToResume=findSessionToResume(clientHello.session_id);
    if (sessionToResume == null || !sessionToResume.isValid()) {
      if (!parameters.getEnableSessionCreation()) {
        if (reuseCurrent) {
          sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);
          status=NOT_HANDSHAKING;
          clearMessages();
          return;
        }
        fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");
      }
      session=null;
    }
 else {
      session=(SSLSessionImpl)sessionToResume.clone();
      isResuming=true;
    }
  }
  if (isResuming) {
    cipher_suite=session.cipherSuite;
    checkCipherSuite: {
      for (int i=0; i < clientHello.cipher_suites.length; i++) {
        if (cipher_suite.equals(clientHello.cipher_suites[i])) {
          break checkCipherSuite;
        }
      }
      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");
    }
  }
 else {
    cipher_suite=selectSuite(clientHello.cipher_suites);
    if (cipher_suite == null) {
      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. NO COMMON SUITE");
    }
    if (!parameters.getEnableSessionCreation()) {
      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");
    }
    session=new SSLSessionImpl(cipher_suite,parameters.getSecureRandom());
    if (engineOwner != null) {
      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());
    }
 else {
      session.setPeer(socketOwner.getInetAddress().getHostName(),socketOwner.getPort());
    }
  }
  recordProtocol.setVersion(clientHello.client_version);
  session.protocol=ProtocolVersion.getByVersion(clientHello.client_version);
  session.clientRandom=clientHello.random;
  serverHello=new ServerHello(parameters.getSecureRandom(),clientHello.client_version,session.getId(),cipher_suite,(byte)0);
  session.serverRandom=serverHello.random;
  send(serverHello);
  if (isResuming) {
    sendChangeCipherSpec();
    return;
  }
  if (!cipher_suite.isAnonymous()) {
    X509Certificate[] certs=null;
    String certType=cipher_suite.getServerKeyType();
    if (certType == null) {
      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO CERT TYPE FOR " + cipher_suite.getName());
    }
    String alias=null;
    X509KeyManager km=parameters.getKeyManager();
    if (km instanceof X509ExtendedKeyManager) {
      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;
      if (this.socketOwner != null) {
        alias=ekm.chooseServerAlias(certType,null,this.socketOwner);
      }
 else {
        alias=ekm.chooseEngineServerAlias(certType,null,this.engineOwner);
      }
      if (alias != null) {
        certs=ekm.getCertificateChain(alias);
      }
    }
 else {
      alias=km.chooseServerAlias(certType,null,this.socketOwner);
      if (alias != null) {
        certs=km.getCertificateChain(alias);
      }
    }
    if (certs == null) {
      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO SERVER CERTIFICATE FOUND");
      return;
    }
    session.localCertificates=certs;
    serverCert=new CertificateMessage(certs);
    privKey=km.getPrivateKey(alias);
    send(serverCert);
  }
  RSAPublicKey rsakey=null;
  DHPublicKeySpec dhkeySpec=null;
  byte[] hash=null;
  BigInteger p=null;
  BigInteger g=null;
  KeyPairGenerator kpg=null;
  try {
    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {
      PublicKey pk=serverCert.certs[0].getPublicKey();
      if (getRSAKeyLength(pk) > 512) {
        kpg=KeyPairGenerator.getInstance("RSA");
        kpg.initialize(512);
      }
    }
 else     if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT) {
      kpg=KeyPairGenerator.getInstance("DH");
      p=new BigInteger(1,DHParameters.getPrime());
      g=new BigInteger("2");
      DHParameterSpec spec=new DHParameterSpec(p,g);
      kpg.initialize(spec);
    }
  }
 catch (  Exception e) {
    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);
  }
  if (kpg != null) {
    DigitalSignature ds=new DigitalSignature(cipher_suite.authType);
    KeyPair kp=null;
    try {
      kp=kpg.genKeyPair();
      if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {
        rsakey=(RSAPublicKey)kp.getPublic();
      }
 else {
        DHPublicKey dhkey=(DHPublicKey)kp.getPublic();
        KeyFactory kf=KeyFactory.getInstance("DH");
        dhkeySpec=kf.getKeySpec(dhkey,DHPublicKeySpec.class);
      }
      if (!cipher_suite.isAnonymous()) {
        ds.init(privKey);
        privKey=kp.getPrivate();
        ds.update(clientHello.getRandom());
        ds.update(serverHello.getRandom());
        byte[] tmp;
        byte[] tmpLength=new byte[2];
        if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {
          tmp=ServerKeyExchange.toUnsignedByteArray(rsakey.getModulus());
          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);
          tmpLength[1]=(byte)(tmp.length & 0xFF);
          ds.update(tmpLength);
          ds.update(tmp);
          tmp=ServerKeyExchange.toUnsignedByteArray(rsakey.getPublicExponent());
          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);
          tmpLength[1]=(byte)(tmp.length & 0xFF);
          ds.update(tmpLength);
          ds.update(tmp);
        }
 else {
          tmp=ServerKeyExchange.toUnsignedByteArray(dhkeySpec.getP());
          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);
          tmpLength[1]=(byte)(tmp.length & 0xFF);
          ds.update(tmpLength);
          ds.update(tmp);
          tmp=ServerKeyExchange.toUnsignedByteArray(dhkeySpec.getG());
          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);
          tmpLength[1]=(byte)(tmp.length & 0xFF);
          ds.update(tmpLength);
          ds.update(tmp);
          tmp=ServerKeyExchange.toUnsignedByteArray(dhkeySpec.getY());
          tmpLength[0]=(byte)((tmp.length & 0xFF00) >>> 8);
          tmpLength[1]=(byte)(tmp.length & 0xFF);
          ds.update(tmpLength);
          ds.update(tmp);
        }
        hash=ds.sign();
      }
 else {
        privKey=kp.getPrivate();
      }
    }
 catch (    Exception e) {
      fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);
    }
    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {
      serverKeyExchange=new ServerKeyExchange(rsakey.getModulus(),rsakey.getPublicExponent(),null,hash);
    }
 else {
      serverKeyExchange=new ServerKeyExchange(p,g,dhkeySpec.getY(),hash);
    }
    send(serverKeyExchange);
  }
  certRequest:   if (parameters.getWantClientAuth() || parameters.getNeedClientAuth()) {
    X509Certificate[] accepted;
    try {
      X509TrustManager tm=parameters.getTrustManager();
      accepted=tm.getAcceptedIssuers();
    }
 catch (    ClassCastException e) {
      break certRequest;
    }
    byte[] requestedClientCertTypes={CipherSuite.TLS_CT_RSA_SIGN,CipherSuite.TLS_CT_DSS_SIGN};
    certificateRequest=new CertificateRequest(requestedClientCertTypes,accepted);
    send(certificateRequest);
  }
  serverHelloDone=new ServerHelloDone();
  send(serverHelloDone);
  status=NEED_UNWRAP;
}

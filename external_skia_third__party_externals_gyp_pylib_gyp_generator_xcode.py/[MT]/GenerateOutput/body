def GenerateOutput(target_list, target_dicts, data, params):
    options = params['options']
    generator_flags = params.get('generator_flags', {})
    parallel_builds = generator_flags.get('xcode_parallel_builds', True)
    serialize_all_tests = generator_flags.get('xcode_serialize_all_test_runs', True)
    project_version = generator_flags.get('xcode_project_version', None)
    skip_excluded_files = (not generator_flags.get('xcode_list_excluded_files', True))
    xcode_projects = {}
    for (build_file, build_file_dict) in data.iteritems():
        (build_file_root, build_file_ext) = os.path.splitext(build_file)
        if (build_file_ext != '.gyp'):
            continue
        xcodeproj_path = ((build_file_root + options.suffix) + '.xcodeproj')
        if options.generator_output:
            xcodeproj_path = os.path.join(options.generator_output, xcodeproj_path)
        xcp = XcodeProject(build_file, xcodeproj_path, build_file_dict)
        xcode_projects[build_file] = xcp
        pbxp = xcp.project
        if parallel_builds:
            pbxp.SetProperty('attributes', {'BuildIndependentTargetsInParallel': 'YES', })
        if project_version:
            xcp.project_file.SetXcodeVersion(project_version)
        main_group = pbxp.GetProperty('mainGroup')
        build_group = gyp.xcodeproj_file.PBXGroup({'name': 'Build', })
        main_group.AppendChild(build_group)
        for included_file in build_file_dict['included_files']:
            build_group.AddOrGetFileByPath(included_file, False)
    xcode_targets = {}
    xcode_target_to_target_dict = {}
    for qualified_target in target_list:
        [build_file, target_name, toolset] = gyp.common.ParseQualifiedTarget(qualified_target)
        spec = target_dicts[qualified_target]
        if (spec['toolset'] != 'target'):
            raise Exception(('Multiple toolsets not supported in xcode build (target %s)' % qualified_target))
        configuration_names = [spec['default_configuration']]
        for configuration_name in sorted(spec['configurations'].keys()):
            if (configuration_name not in configuration_names):
                configuration_names.append(configuration_name)
        xcp = xcode_projects[build_file]
        pbxp = xcp.project
        xccl = CreateXCConfigurationList(configuration_names)
        _types = {'executable': 'com.apple.product-type.tool', 'loadable_module': 'com.googlecode.gyp.xcode.bundle', 'shared_library': 'com.apple.product-type.library.dynamic', 'static_library': 'com.apple.product-type.library.static', 'executable+bundle': 'com.apple.product-type.application', 'loadable_module+bundle': 'com.apple.product-type.bundle', 'shared_library+bundle': 'com.apple.product-type.framework', }
        target_properties = {'buildConfigurationList': xccl, 'name': target_name, }
        type = spec['type']
        is_bundle = int(spec.get('mac_bundle', 0))
        if (type != 'none'):
            type_bundle_key = type
            if is_bundle:
                type_bundle_key += '+bundle'
            xctarget_type = gyp.xcodeproj_file.PBXNativeTarget
            try:
                target_properties['productType'] = _types[type_bundle_key]
            except KeyError as e:
                gyp.common.ExceptionAppend(e, ('-- unknown product type while writing target %s' % target_name))
                raise
        else:
            xctarget_type = gyp.xcodeproj_file.PBXAggregateTarget
            assert (not is_bundle), ('mac_bundle targets cannot have type none (target "%s")' % target_name)
        target_product_name = spec.get('product_name')
        if (target_product_name is not None):
            target_properties['productName'] = target_product_name
        xct = xctarget_type(target_properties, parent=pbxp, force_outdir=spec.get('product_dir'), force_prefix=spec.get('product_prefix'), force_extension=spec.get('product_extension'))
        pbxp.AppendProperty('targets', xct)
        xcode_targets[qualified_target] = xct
        xcode_target_to_target_dict[xct] = spec
        spec_actions = spec.get('actions', [])
        spec_rules = spec.get('rules', [])
        support_xct = None
        if ((type != 'none') and (spec_actions or spec_rules)):
            support_xccl = CreateXCConfigurationList(configuration_names)
            support_target_properties = {'buildConfigurationList': support_xccl, 'name': (target_name + ' Support'), }
            if target_product_name:
                support_target_properties['productName'] = (target_product_name + ' Support')
            support_xct = gyp.xcodeproj_file.PBXAggregateTarget(support_target_properties, parent=pbxp)
            pbxp.AppendProperty('targets', support_xct)
            xct.AddDependency(support_xct)
        xct.support_target = support_xct
        prebuild_index = 0
        for action in spec_actions:
            message = action.get('message')
            if message:
                message = ('echo note: ' + gyp.common.EncodePOSIXShellArgument(message))
            else:
                message = ''
            action_string = gyp.common.EncodePOSIXShellList(action['action'])
            message_sh = gyp.xcodeproj_file.ConvertVariablesToShellSyntax(message)
            action_string_sh = gyp.xcodeproj_file.ConvertVariablesToShellSyntax(action_string)
            script = ''
            if message_sh:
                script += (message_sh + '\n')
            script += (('exec ' + action_string_sh) + '\nexit 1\n')
            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase({'inputPaths': action['inputs'], 'name': (('Action "' + action['action_name']) + '"'), 'outputPaths': action['outputs'], 'shellScript': script, 'showEnvVarsInLog': 0, })
            if support_xct:
                support_xct.AppendProperty('buildPhases', ssbp)
            else:
                xct._properties['buildPhases'].insert(prebuild_index, ssbp)
                prebuild_index = (prebuild_index + 1)
            if int(action.get('process_outputs_as_sources', False)):
                for output in action['outputs']:
                    AddSourceToTarget(output, pbxp, xct)
            if int(action.get('process_outputs_as_mac_bundle_resources', False)):
                for output in action['outputs']:
                    AddResourceToTarget(output, pbxp, xct)
        if is_bundle:
            tgt_mac_bundle_resources = spec.get('mac_bundle_resources', [])
        else:
            tgt_mac_bundle_resources = []
        rules_by_ext = {}
        for rule in spec_rules:
            rules_by_ext[rule['extension']] = rule
            concrete_outputs_by_rule_source = []
            concrete_outputs_all = []
            messages = []
            actions = []
            for rule_source in rule.get('rule_sources', []):
                rule_source_basename = posixpath.basename(rule_source)
                (rule_source_root, rule_source_ext) = posixpath.splitext(rule_source_basename)
                rule_input_dict = {'INPUT_FILE_BASE': rule_source_root, 'INPUT_FILE_SUFFIX': rule_source_ext, 'INPUT_FILE_NAME': rule_source_basename, 'INPUT_FILE_PATH': rule_source, }
                concrete_outputs_for_this_rule_source = []
                for output in rule.get('outputs', []):
                    concrete_output = ExpandXcodeVariables(output, rule_input_dict)
                    concrete_outputs_for_this_rule_source.append(concrete_output)
                    pbxp.AddOrGetFileInRootGroup(concrete_output)
                concrete_outputs_by_rule_source.append(concrete_outputs_for_this_rule_source)
                concrete_outputs_all.extend(concrete_outputs_for_this_rule_source)
                if int(rule.get('process_outputs_as_sources', False)):
                    for output in concrete_outputs_for_this_rule_source:
                        AddSourceToTarget(output, pbxp, xct)
                was_mac_bundle_resource = (rule_source in tgt_mac_bundle_resources)
                if (was_mac_bundle_resource or int(rule.get('process_outputs_as_mac_bundle_resources', False))):
                    for output in concrete_outputs_for_this_rule_source:
                        AddResourceToTarget(output, pbxp, xct)
                message = rule.get('message')
                if message:
                    message = gyp.common.EncodePOSIXShellArgument(message)
                    message = ExpandXcodeVariables(message, rule_input_dict)
                messages.append(message)
                action_string = gyp.common.EncodePOSIXShellList(rule['action'])
                action = ExpandXcodeVariables(action_string, rule_input_dict)
                actions.append(action)
            if (len(concrete_outputs_all) > 0):
                makefile_name = ('%s_%s.make' % (target_name, rule['rule_name']))
                makefile_path = os.path.join(xcode_projects[build_file].path, makefile_name)
                makefile = open(makefile_path, 'wb')
                makefile.write('all: \\\n')
                for concrete_output_index in xrange(0, len(concrete_outputs_by_rule_source)):
                    concrete_output = concrete_outputs_by_rule_source[concrete_output_index][0]
                    if (concrete_output_index == (len(concrete_outputs_by_rule_source) - 1)):
                        eol = ''
                    else:
                        eol = ' \\'
                    makefile.write(('    %s%s\n' % (concrete_output, eol)))
                for (rule_source, concrete_outputs, message, action) in zip(rule['rule_sources'], concrete_outputs_by_rule_source, messages, actions):
                    makefile.write('\n')
                    concrete_output_dirs = []
                    for concrete_output_index in xrange(0, len(concrete_outputs)):
                        concrete_output = concrete_outputs[concrete_output_index]
                        if (concrete_output_index == 0):
                            bol = ''
                        else:
                            bol = '    '
                        makefile.write(('%s%s \\\n' % (bol, concrete_output)))
                        concrete_output_dir = posixpath.dirname(concrete_output)
                        if (concrete_output_dir and (concrete_output_dir not in concrete_output_dirs)):
                            concrete_output_dirs.append(concrete_output_dir)
                    makefile.write('    : \\\n')
                    prerequisites = [rule_source]
                    prerequisites.extend(rule.get('inputs', []))
                    for prerequisite_index in xrange(0, len(prerequisites)):
                        prerequisite = prerequisites[prerequisite_index]
                        if (prerequisite_index == (len(prerequisites) - 1)):
                            eol = ''
                        else:
                            eol = ' \\'
                        makefile.write(('    %s%s\n' % (prerequisite, eol)))
                    if (len(concrete_output_dirs) > 0):
                        makefile.write(('\t@mkdir -p "%s"\n' % '" "'.join(concrete_output_dirs)))
                    if message:
                        makefile.write(('\t@echo note: %s\n' % message))
                    makefile.write(('\t%s\n' % action))
                makefile.close()
                script = ('JOB_COUNT="$(/usr/sbin/sysctl -n hw.ncpu)"\nif [ "${JOB_COUNT}" -gt 4 ]; then\n  JOB_COUNT=4\nfi\nexec "${DEVELOPER_BIN_DIR}/make" -f "${PROJECT_FILE_PATH}/%s" -j "${JOB_COUNT}"\nexit 1\n' % makefile_name)
                ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase({'name': (('Rule "' + rule['rule_name']) + '"'), 'shellScript': script, 'showEnvVarsInLog': 0, })
                if support_xct:
                    support_xct.AppendProperty('buildPhases', ssbp)
                else:
                    xct._properties['buildPhases'].insert(prebuild_index, ssbp)
                    prebuild_index = (prebuild_index + 1)
            groups = ['inputs', 'inputs_excluded']
            if skip_excluded_files:
                groups = [x for x in groups if (not x.endswith('_excluded'))]
            for group in groups:
                for item in rule.get(group, []):
                    pbxp.AddOrGetFileInRootGroup(item)
        for source in spec.get('sources', []):
            (source_root, source_extension) = posixpath.splitext(source)
            if (source_extension[1:] not in rules_by_ext):
                AddSourceToTarget(source, pbxp, xct)
            else:
                pbxp.AddOrGetFileInRootGroup(source)
        if is_bundle:
            for resource in tgt_mac_bundle_resources:
                (resource_root, resource_extension) = posixpath.splitext(resource)
                if (resource_extension[1:] not in rules_by_ext):
                    AddResourceToTarget(resource, pbxp, xct)
                else:
                    pbxp.AddOrGetFileInRootGroup(resource)
            for header in spec.get('mac_framework_headers', []):
                AddHeaderToTarget(header, pbxp, xct, True)
            for header in spec.get('mac_framework_private_headers', []):
                AddHeaderToTarget(header, pbxp, xct, False)
        for copy_group in spec.get('copies', []):
            pbxcp = gyp.xcodeproj_file.PBXCopyFilesBuildPhase({'name': ('Copy to ' + copy_group['destination']), }, parent=xct)
            dest = copy_group['destination']
            if (dest[0] not in ('/', '$')):
                dest = ('$(SRCROOT)/' + dest)
            pbxcp.SetDestination(dest)
            xct._properties['buildPhases'].insert(prebuild_index, pbxcp)
            for file in copy_group['files']:
                pbxcp.AddFile(file)
        if (not skip_excluded_files):
            for key in ['sources', 'mac_bundle_resources', 'mac_framework_headers', 'mac_framework_private_headers']:
                excluded_key = (key + '_excluded')
                for item in spec.get(excluded_key, []):
                    pbxp.AddOrGetFileInRootGroup(item)
        groups = ['inputs', 'inputs_excluded', 'outputs', 'outputs_excluded']
        if skip_excluded_files:
            groups = [x for x in groups if (not x.endswith('_excluded'))]
        for action in spec.get('actions', []):
            for group in groups:
                for item in action.get(group, []):
                    if (not item.startswith('$(BUILT_PRODUCTS_DIR)/')):
                        pbxp.AddOrGetFileInRootGroup(item)
        for postbuild in spec.get('postbuilds', []):
            action_string_sh = gyp.common.EncodePOSIXShellList(postbuild['action'])
            script = (('exec ' + action_string_sh) + '\nexit 1\n')
            ssbp = gyp.xcodeproj_file.PBXShellScriptBuildPhase({'inputPaths': ['$(BUILT_PRODUCTS_DIR)/$(EXECUTABLE_PATH)'], 'name': (('Postbuild "' + postbuild['postbuild_name']) + '"'), 'shellScript': script, 'showEnvVarsInLog': 0, })
            xct.AppendProperty('buildPhases', ssbp)
        if ('dependencies' in spec):
            for dependency in spec['dependencies']:
                xct.AddDependency(xcode_targets[dependency])
                if support_xct:
                    support_xct.AddDependency(xcode_targets[dependency])
        if ('libraries' in spec):
            for library in spec['libraries']:
                xct.FrameworksPhase().AddFile(library)
                library_dir = posixpath.dirname(library)
                if ((library_dir not in xcode_standard_library_dirs) and ((not xct.HasBuildSetting(_library_search_paths_var)) or (library_dir not in xct.GetBuildSetting(_library_search_paths_var)))):
                    xct.AppendBuildSetting(_library_search_paths_var, library_dir)
        for configuration_name in configuration_names:
            configuration = spec['configurations'][configuration_name]
            xcbc = xct.ConfigurationNamed(configuration_name)
            for include_dir in configuration.get('mac_framework_dirs', []):
                xcbc.AppendBuildSetting('FRAMEWORK_SEARCH_PATHS', include_dir)
            for include_dir in configuration.get('include_dirs', []):
                xcbc.AppendBuildSetting('HEADER_SEARCH_PATHS', include_dir)
            if ('defines' in configuration):
                for define in configuration['defines']:
                    set_define = EscapeXCodeArgument(define)
                    xcbc.AppendBuildSetting('GCC_PREPROCESSOR_DEFINITIONS', set_define)
            if ('xcode_settings' in configuration):
                for (xck, xcv) in configuration['xcode_settings'].iteritems():
                    xcbc.SetBuildSetting(xck, xcv)
            if ('xcode_config_file' in configuration):
                config_ref = pbxp.AddOrGetFileInRootGroup(configuration['xcode_config_file'])
                xcbc.SetBaseConfiguration(config_ref)
    build_files = []
    for (build_file, build_file_dict) in data.iteritems():
        if build_file.endswith('.gyp'):
            build_files.append(build_file)
    for build_file in build_files:
        xcode_projects[build_file].Finalize1(xcode_targets, serialize_all_tests)
    for build_file in build_files:
        xcode_projects[build_file].Finalize2(xcode_targets, xcode_target_to_target_dict)
    for build_file in build_files:
        xcode_projects[build_file].Write()

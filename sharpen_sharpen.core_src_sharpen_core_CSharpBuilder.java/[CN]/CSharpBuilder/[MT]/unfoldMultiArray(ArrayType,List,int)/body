{
  final CSArrayCreationExpression expression=new CSArrayCreationExpression(mappedTypeReference(type));
  expression.initializer(new CSArrayInitializerExpression());
  int length=resolveIntValue(dimensions.get(dimensionIndex));
  if (dimensionIndex < lastIndex(dimensions) - 1) {
    for (int i=0; i < length; ++i) {
      expression.initializer().addExpression(unfoldMultiArray((ArrayType)type.getComponentType(),dimensions,dimensionIndex + 1));
    }
  }
 else {
    Expression innerLength=(Expression)dimensions.get(dimensionIndex + 1);
    CSTypeReferenceExpression innerType=mappedTypeReference(type.getComponentType());
    for (int i=0; i < length; ++i) {
      expression.initializer().addExpression(new CSArrayCreationExpression(innerType,mapExpression(innerLength)));
    }
  }
  return expression;
}

{
  PrivateKey clientKey=null;
  if (serverCert != null) {
    if (session.cipherSuite.isAnonymous()) {
      unexpectedMessage();
      return;
    }
    verifyServerCert();
  }
 else {
    if (!session.cipherSuite.isAnonymous()) {
      unexpectedMessage();
      return;
    }
  }
  if (certificateRequest != null) {
    X509Certificate[] certs=null;
    String alias=null;
    String[] certTypes=certificateRequest.getTypesAsString();
    X500Principal[] issuers=certificateRequest.certificate_authorities;
    X509KeyManager km=parameters.getKeyManager();
    if (km instanceof X509ExtendedKeyManager) {
      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;
      if (this.socketOwner != null) {
        alias=ekm.chooseClientAlias(certTypes,issuers,this.socketOwner);
      }
 else {
        alias=ekm.chooseEngineClientAlias(certTypes,issuers,this.engineOwner);
      }
      if (alias != null) {
        certs=ekm.getCertificateChain(alias);
      }
    }
 else {
      alias=km.chooseClientAlias(certTypes,issuers,this.socketOwner);
      if (alias != null) {
        certs=km.getCertificateChain(alias);
      }
    }
    session.localCertificates=certs;
    clientCert=new CertificateMessage(certs);
    clientKey=km.getPrivateKey(alias);
    send(clientCert);
  }
  if (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {
    Cipher c;
    try {
      c=Cipher.getInstance("RSA/ECB/PKCS1Padding");
      if (serverKeyExchange != null) {
        c.init(Cipher.ENCRYPT_MODE,serverKeyExchange.getRSAPublicKey());
      }
 else {
        c.init(Cipher.ENCRYPT_MODE,serverCert.certs[0]);
      }
    }
 catch (    Exception e) {
      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);
      return;
    }
    preMasterSecret=new byte[48];
    parameters.getSecureRandom().nextBytes(preMasterSecret);
    System.arraycopy(clientHello.client_version,0,preMasterSecret,0,2);
    try {
      clientKeyExchange=new ClientKeyExchange(c.doFinal(preMasterSecret),serverHello.server_version[1] == 1);
    }
 catch (    Exception e) {
      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);
      return;
    }
  }
 else {
    try {
      KeyFactory kf=KeyFactory.getInstance("DH");
      KeyAgreement agreement=KeyAgreement.getInstance("DH");
      KeyPairGenerator kpg=KeyPairGenerator.getInstance("DH");
      PublicKey serverPublic;
      DHParameterSpec spec;
      if (serverKeyExchange != null) {
        serverPublic=kf.generatePublic(new DHPublicKeySpec(serverKeyExchange.par3,serverKeyExchange.par1,serverKeyExchange.par2));
        spec=new DHParameterSpec(serverKeyExchange.par1,serverKeyExchange.par2);
      }
 else {
        serverPublic=serverCert.certs[0].getPublicKey();
        spec=((DHPublicKey)serverPublic).getParams();
      }
      kpg.initialize(spec);
      KeyPair kp=kpg.generateKeyPair();
      Key key=kp.getPublic();
      if (clientCert != null && serverCert != null && (session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || session.cipherSuite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS)) {
        PublicKey client_pk=clientCert.certs[0].getPublicKey();
        PublicKey server_pk=serverCert.certs[0].getPublicKey();
        if (client_pk instanceof DHKey && server_pk instanceof DHKey) {
          if (((DHKey)client_pk).getParams().getG().equals(((DHKey)server_pk).getParams().getG()) && ((DHKey)client_pk).getParams().getP().equals(((DHKey)server_pk).getParams().getG())) {
            clientKeyExchange=new ClientKeyExchange();
          }
        }
      }
 else {
        clientKeyExchange=new ClientKeyExchange(((DHPublicKey)key).getY());
      }
      key=kp.getPrivate();
      agreement.init(key);
      agreement.doPhase(serverPublic,true);
      preMasterSecret=agreement.generateSecret();
    }
 catch (    Exception e) {
      fatalAlert(AlertProtocol.INTERNAL_ERROR,"Unexpected exception",e);
      return;
    }
  }
  if (clientKeyExchange != null) {
    send(clientKeyExchange);
  }
  computerMasterSecret();
  if (clientCert != null && !clientKeyExchange.isEmpty()) {
    String authType=clientKey.getAlgorithm();
    DigitalSignature ds=new DigitalSignature(authType);
    ds.init(clientKey);
    if ("RSA".equals(authType)) {
      ds.setMD5(io_stream.getDigestMD5());
      ds.setSHA(io_stream.getDigestSHA());
    }
 else     if ("DSA".equals(authType)) {
      ds.setSHA(io_stream.getDigestSHA());
    }
    certificateVerify=new CertificateVerify(ds.sign());
    send(certificateVerify);
  }
  sendChangeCipherSpec();
}

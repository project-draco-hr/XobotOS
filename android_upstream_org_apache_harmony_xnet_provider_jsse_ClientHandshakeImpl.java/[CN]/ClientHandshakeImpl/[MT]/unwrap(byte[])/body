{
  if (this.delegatedTaskErr != null) {
    Exception e=this.delegatedTaskErr;
    this.delegatedTaskErr=null;
    this.fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"Error in delegated task",e);
  }
  int handshakeType;
  io_stream.append(bytes);
  while (io_stream.available() > 0) {
    io_stream.mark();
    int length;
    try {
      handshakeType=io_stream.read();
      length=io_stream.readUint24();
      if (io_stream.available() < length) {
        io_stream.reset();
        return;
      }
switch (handshakeType) {
case 0:
        io_stream.removeFromMarkedPosition();
      if (clientHello != null && (clientFinished == null || serverFinished == null)) {
        break;
      }
    if (session.isValid()) {
      session=(SSLSessionImpl)session.clone();
      isResuming=true;
      startSession();
    }
 else {
      renegotiateNewSession();
    }
  break;
case 2:
if (clientHello == null || serverHello != null) {
  unexpectedMessage();
  return;
}
serverHello=new ServerHello(io_stream,length);
ProtocolVersion servProt=ProtocolVersion.getByVersion(serverHello.server_version);
String[] enabled=parameters.getEnabledProtocols();
find: {
for (int i=0; i < enabled.length; i++) {
if (servProt.equals(ProtocolVersion.getByName(enabled[i]))) {
break find;
}
}
fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"Bad server hello protocol version");
}
if (serverHello.compression_method != 0) {
fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"Bad server hello compression method");
}
CipherSuite[] enabledSuites=parameters.getEnabledCipherSuitesMember();
find: {
for (int i=0; i < enabledSuites.length; i++) {
if (serverHello.cipher_suite.equals(enabledSuites[i])) {
break find;
}
}
fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"Bad server hello cipher suite");
}
if (isResuming) {
if (serverHello.session_id.length == 0) {
isResuming=false;
}
 else if (!Arrays.equals(serverHello.session_id,clientHello.session_id)) {
isResuming=false;
}
 else if (!session.protocol.equals(servProt)) {
fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"Bad server hello protocol version");
}
 else if (!session.cipherSuite.equals(serverHello.cipher_suite)) {
fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"Bad server hello cipher suite");
}
if (serverHello.server_version[1] == 1) {
computerReferenceVerifyDataTLS("server finished");
}
 else {
computerReferenceVerifyDataSSLv3(SSLv3Constants.server);
}
}
session.protocol=servProt;
recordProtocol.setVersion(session.protocol.version);
session.cipherSuite=serverHello.cipher_suite;
session.id=serverHello.session_id.clone();
session.serverRandom=serverHello.random;
break;
case 11:
if (serverHello == null || serverKeyExchange != null || serverCert != null || isResuming) {
unexpectedMessage();
return;
}
serverCert=new CertificateMessage(io_stream,length);
break;
case 12:
if (serverHello == null || serverKeyExchange != null || isResuming) {
unexpectedMessage();
return;
}
serverKeyExchange=new ServerKeyExchange(io_stream,length,session.cipherSuite.keyExchange);
break;
case 13:
if (serverCert == null || certificateRequest != null || session.cipherSuite.isAnonymous() || isResuming) {
unexpectedMessage();
return;
}
certificateRequest=new CertificateRequest(io_stream,length);
break;
case 14:
if (serverHello == null || serverHelloDone != null || isResuming) {
unexpectedMessage();
return;
}
serverHelloDone=new ServerHelloDone(io_stream,length);
if (this.nonBlocking) {
delegatedTasks.add(new DelegatedTask(new Runnable(){
public void run(){
processServerHelloDone();
}
}
,this));
return;
}
processServerHelloDone();
break;
case 20:
if (!changeCipherSpecReceived) {
unexpectedMessage();
return;
}
serverFinished=new Finished(io_stream,length);
verifyFinished(serverFinished.getData());
session.lastAccessedTime=System.currentTimeMillis();
session.context=parameters.getClientSessionContext();
parameters.getClientSessionContext().putSession(session);
if (isResuming) {
sendChangeCipherSpec();
}
 else {
session.lastAccessedTime=System.currentTimeMillis();
status=FINISHED;
}
break;
default :
unexpectedMessage();
return;
}
}
 catch (IOException e) {
io_stream.reset();
return;
}
}
}
